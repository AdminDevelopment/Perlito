# Do not edit this file - Generated by Perlito5 8.0
use v5;
use utf8;
use strict;
use warnings;
no warnings ('redefine', 'once', 'void', 'uninitialized', 'misc', 'recursion');
use Perlito5::Perl5::Runtime;
our $MATCH = Perlito5::Match->new();
package main;
use v5;
package CompUnit;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub name {
    $_[0]->{'name'}
};
sub body {
    $_[0]->{'body'}
};
package Val::Int;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub int {
    $_[0]->{'int'}
};
package Val::Num;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub num {
    $_[0]->{'num'}
};
package Val::Buf;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub buf {
    $_[0]->{'buf'}
};
package Lit::Block;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub sig {
    $_[0]->{'sig'}
};
sub stmts {
    $_[0]->{'stmts'}
};
package Lit::Array;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub array1 {
    $_[0]->{'array1'}
};
package Lit::Hash;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub hash1 {
    $_[0]->{'hash1'}
};
package Index;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub obj {
    $_[0]->{'obj'}
};
sub index_exp {
    $_[0]->{'index_exp'}
};
package Lookup;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub obj {
    $_[0]->{'obj'}
};
sub index_exp {
    $_[0]->{'index_exp'}
};
package Var;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub sigil {
    $_[0]->{'sigil'}
};
sub namespace {
    $_[0]->{'namespace'}
};
sub name {
    $_[0]->{'name'}
};
package Proto;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub name {
    $_[0]->{'name'}
};
package Call;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub invocant {
    $_[0]->{'invocant'}
};
sub method {
    $_[0]->{'method'}
};
sub arguments {
    $_[0]->{'arguments'}
};
package Apply;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub code {
    $_[0]->{'code'}
};
sub arguments {
    $_[0]->{'arguments'}
};
sub namespace {
    $_[0]->{'namespace'}
};
package If;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub cond {
    $_[0]->{'cond'}
};
sub body {
    $_[0]->{'body'}
};
sub otherwise {
    $_[0]->{'otherwise'}
};
package While;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub init {
    $_[0]->{'init'}
};
sub cond {
    $_[0]->{'cond'}
};
sub continue {
    $_[0]->{'continue'}
};
sub body {
    $_[0]->{'body'}
};
package For;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub cond {
    $_[0]->{'cond'}
};
sub body {
    $_[0]->{'body'}
};
package Decl;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub decl {
    $_[0]->{'decl'}
};
sub type {
    $_[0]->{'type'}
};
sub var {
    $_[0]->{'var'}
};
package Sig;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub invocant {
    $_[0]->{'invocant'}
};
sub positional {
    $_[0]->{'positional'}
};
sub named {
    $_[0]->{'named'}
};
package Sub;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub name {
    $_[0]->{'name'}
};
sub sig {
    $_[0]->{'sig'}
};
sub block {
    $_[0]->{'block'}
};
package Do;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub block {
    $_[0]->{'block'}
};
package Use;
sub new {
    ((my  $class) = shift());
    bless((do {
    (my  %a);
    (do {
        ((my  $_i) = 0);
        ((my  @_a) = @_);
        for ( ; (($_i < scalar(@_a)));  ) {
            ($a{$_a[$_i]} = $_a[($_i + 1)]);
            ($_i = ($_i + 2))
        }
    });
    \%a
}), $class)
};
sub mod {
    $_[0]->{'mod'}
};

1;
