# Do not edit this file - Generated by Perlito5 8.0
use v5;
use Perlito5::Perl5::Runtime;
our $MATCH = Perlito5::Match->new();
package main;
use v5;
use Perlito5::AST;
use Perlito5::Dumper;
package Perlito5::Javascript;
for ($_) {
    ((my  $label_count) = 100);
    (my  %label);
    sub Perlito5::Javascript::pkg {
        ($label{$Perlito5::PKG_NAME} = ($label{$Perlito5::PKG_NAME} || ('p5' . ($label_count)++)))
    };
    sub Perlito5::Javascript::get_label {
        ($label_count)++
    };
    sub Perlito5::Javascript::tab {
        ((my  $level) = shift());
join("", chr(9) x $level)
    };
    ((our  %op_prefix_js_str) = (('prefix:<-A>' => 'p5atime'), ('prefix:<-M>' => 'p5mtime'), ('prefix:<-C>' => 'p5ctime'), ('prefix:<-s>' => 'p5size'), ('prefix:<-f>' => 'p5is_file'), ('prefix:<-d>' => 'p5is_directory')));
    ((our  %op_infix_js_str) = (('infix:<eq>' => ' == '), ('infix:<ne>' => ' != '), ('infix:<le>' => ' <= '), ('infix:<ge>' => ' >= ')));
    ((our  %op_infix_js_num) = (('infix:<==>' => ' == '), ('infix:<!=>' => ' != '), ('infix:<+>' => ' + '), ('infix:<->' => ' - '), ('infix:<*>' => ' * '), ('infix:</>' => ' / '), ('infix:<%>' => ' % '), ('infix:<>>' => ' > '), ('infix:<<>' => ' < '), ('infix:<>=>' => ' >= '), ('infix:<<=>' => ' <= '), ('infix:<&>' => ' & '), ('infix:<|>' => ' | '), ('infix:<^>' => ' ^ '), ('infix:<>>>' => ' >>> '), ('infix:<<<>' => ' << ')));
    ((our  %op_to_bool) = map(+((($_ => 1))), ('prefix:<!>', 'infix:<!=>', 'infix:<==>', 'infix:<<=>', 'infix:<>=>', 'infix:<>>', 'infix:<<>', 'infix:<eq>', 'infix:<ne>', 'infix:<ge>', 'infix:<le>', 'exists')));
    ((our  %op_to_str) = map(+((($_ => 1))), ('substr', 'join', 'list:<.>')));
    ((our  %op_to_num) = map(+((($_ => 1))), ('length', 'index')));
    ((my  %safe_char) = ((' ' => 1), ('!' => 1), ('"' => 1), ('#' => 1), ('$' => 1), ('%' => 1), ('&' => 1), ('(' => 1), (')' => 1), ('*' => 1), ('+' => 1), (',' => 1), ('-' => 1), ('.' => 1), ('/' => 1), (':' => 1), (';' => 1), ('<' => 1), ('=' => 1), ('>' => 1), ('?' => 1), ('@' => 1), ('[' => 1), (']' => 1), ('^' => 1), ('_' => 1), ('`' => 1), ('{' => 1), ('|' => 1), ('}' => 1), ('~' => 1)));
    sub Perlito5::Javascript::escape_string {
        ((my  $s) = shift());
        (my  @out);
        ((my  $tmp) = '');
        if (($s eq '')) {
            return (chr(39) . chr(39))
        };
        for my $i ((0 .. (length($s) - 1))) {
            ((my  $c) = substr($s, $i, 1));
            if ((((((($c ge 'a') && ($c le 'z'))) || ((($c ge 'A') && ($c le 'Z')))) || ((($c ge '0') && ($c le '9')))) || exists($safe_char{$c}))) {
                ($tmp = ($tmp . $c))
            }
            else {
                if (($tmp ne '')) {
                    push(@out, (chr(39) . $tmp . chr(39)) )
                };
                push(@out, ('String.fromCharCode(' . ord($c) . ')') );
                ($tmp = '')
            }
        };
        if (($tmp ne '')) {
            push(@out, (chr(39) . $tmp . chr(39)) )
        };
        return (join(' + ', @out))
    };
    sub Perlito5::Javascript::to_str {
        ((my  $cond) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = 'scalar');
        if (((($cond->isa('Perlito5::AST::Apply') && ($cond->code() eq 'circumfix:<( )>')) && $cond->{'arguments'}) && @{$cond->{'arguments'}})) {
            return (to_str($cond->{'arguments'}->[0]))
        };
        if ((($cond->isa('Perlito5::AST::Val::Buf')) || (($cond->isa('Perlito5::AST::Apply') && exists($op_to_str{$cond->code()}))))) {
            return ($cond->emit_javascript($level, $wantarray))
        }
        else {
            return (('p5str(' . $cond->emit_javascript($level, $wantarray) . ')'))
        }
    };
    sub Perlito5::Javascript::to_num {
        ((my  $cond) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = 'scalar');
        if ((($cond->isa('Perlito5::AST::Val::Int') || $cond->isa('Perlito5::AST::Val::Num')) || (($cond->isa('Perlito5::AST::Apply') && exists($op_to_num{$cond->code()}))))) {
            return ($cond->emit_javascript($level, $wantarray))
        }
        else {
            return (('p5num(' . $cond->emit_javascript($level, $wantarray) . ')'))
        }
    };
    sub Perlito5::Javascript::to_bool {
        ((my  $cond) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = 'scalar');
        if (((($cond->isa('Perlito5::AST::Apply') && ($cond->code() eq 'circumfix:<( )>')) && $cond->{'arguments'}) && @{$cond->{'arguments'}})) {
            return (to_bool($cond->{'arguments'}->[0]))
        };
        if (($cond->isa('Perlito5::AST::Apply') && ((($cond->code() eq 'infix:<&&>') || ($cond->code() eq 'infix:<and>'))))) {
            return (('(' . to_bool($cond->{'arguments'}->[0]) . ' && ' . to_bool($cond->{'arguments'}->[1]) . ')'))
        };
        if (($cond->isa('Perlito5::AST::Apply') && ((($cond->code() eq 'infix:<||>') || ($cond->code() eq 'infix:<or>'))))) {
            return (('(' . to_bool($cond->{'arguments'}->[0]) . ' || ' . to_bool($cond->{'arguments'}->[1]) . ')'))
        };
        if (((($cond->isa('Perlito5::AST::Val::Int')) || ($cond->isa('Perlito5::AST::Val::Num'))) || (($cond->isa('Perlito5::AST::Apply') && exists($op_to_bool{$cond->code()}))))) {
            return ($cond->emit_javascript($level, $wantarray))
        }
        else {
            return (('p5bool(' . $cond->emit_javascript($level, $wantarray) . ')'))
        }
    };
    sub Perlito5::Javascript::to_list {
        ((my  $items) = to_list_preprocess($_[0]));
        ((my  $level) = $_[1]);
        ((my  $wantarray) = 'list');
        (@{$items} ? ('interpolate_array(' . join(', ', map($_->emit_javascript($level, $wantarray), @{$items})) . ')') : '[]')
    };
    sub Perlito5::Javascript::to_list_preprocess {
        (my  @items);
        for my $item (@{$_[0]}) {
            if (($item->isa('Perlito5::AST::Apply') && (((($item->code() eq 'circumfix:<( )>') || ($item->code() eq 'list:<,>')) || ($item->code() eq 'infix:<=>>'))))) {
                for my $arg (@{to_list_preprocess($item->arguments())}) {
                    push(@items, $arg )
                }
            }
            else {
                push(@items, $item )
            }
        };
        return (\@items)
    };
    sub Perlito5::Javascript::to_scalar {
        ((my  $items) = to_scalar_preprocess($_[0]));
        ((my  $level) = $_[1]);
        ((my  $wantarray) = 'scalar');
        (@{$items} ? ('(' . join(', ', map($_->emit_javascript($level, $wantarray), @{$items})) . ')') : 'null')
    };
    sub Perlito5::Javascript::to_scalar_preprocess {
        (my  @items);
        for my $item (@{$_[0]}) {
            if (($item->isa('Perlito5::AST::Apply') && ((($item->code() eq 'list:<,>') || ($item->code() eq 'infix:<=>>'))))) {
                for my $arg (@{to_scalar_preprocess($item->arguments())}) {
                    push(@items, $arg )
                }
            }
            else {
                push(@items, $item )
            }
        };
        return (\@items)
    };
    sub Perlito5::Javascript::to_runtime_context {
        ((my  $items) = to_scalar_preprocess($_[0]));
        ((my  $level) = $_[1]);
        ((my  $wantarray) = 'runtime');
        ('p5context(' . '[' . join(', ', map($_->emit_javascript($level, $wantarray), @{$items})) . ']' . ', p5want)')
    }
};
package Perlito5::Javascript::LexicalBlock;
for ($_) {
    sub Perlito5::Javascript::LexicalBlock::new {
        ((my  $class) = shift());
        bless({@_}, $class)
    };
    sub Perlito5::Javascript::LexicalBlock::block {
        $_[0]->{'block'}
    };
    sub Perlito5::Javascript::LexicalBlock::needs_return {
        $_[0]->{'needs_return'}
    };
    sub Perlito5::Javascript::LexicalBlock::top_level {
        $_[0]->{'top_level'}
    };
    sub Perlito5::Javascript::LexicalBlock::has_decl {
        ((my  $self) = $_[0]);
        ((my  $type) = $_[1]);
        for my $decl (@{$self->{'block'}}) {
            if (defined($decl)) {
                if ((($decl->isa('Perlito5::AST::Decl') && ($decl->decl() eq $type)) || ($decl->isa('Perlito5::AST::Apply') && ($decl->code() eq $type)))) {
                    return (1)
                };
                if (($decl->isa('Perlito5::AST::Apply') && ($decl->code() eq 'infix:<=>'))) {
                    ((my  $var) = $decl->arguments()->[0]);
                    if ((($var->isa('Perlito5::AST::Decl') && ($var->decl() eq $type)) || ($decl->isa('Perlito5::AST::Apply') && ($decl->code() eq $type)))) {
                        return (1)
                    }
                }
            }
        };
        return (0)
    };
    sub Perlito5::Javascript::LexicalBlock::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        (my  @block);
        for (@{$self->{'block'}}) {
            if (defined($_)) {
                push(@block, $_ )
            }
        };
        if (!(@block)) {
            return ((Perlito5::Javascript::tab($level) . 'null;'))
        };
        ((my  $out) = '');
        (my  @str);
        ((my  $has_local) = $self->has_decl('local'));
        ((my  $create_context) = ($self->{'create_context'} && $self->has_decl('my')));
        ((my  $outer_pkg) = $Perlito5::PKG_NAME);
        ((my  $outer_throw) = $Perlito5::THROW);
        unshift(@{$Perlito5::VAR}, {});
        if ($self->{'top_level'}) {
            ($Perlito5::THROW = 0)
        };
        if ($has_local) {
            ($out = ($out . (Perlito5::Javascript::tab($level) . 'var local_idx = LOCAL.length;' . chr(10))))
        };
        if ($self->{'top_level'}) {
            ($level)++
        };
        if ($create_context) {
            ($out = ($out . (Perlito5::Javascript::tab($level) . '(function () {' . chr(10))));
            ($level)++
        };
        ((my  $tab) = Perlito5::Javascript::tab($level));
        (my  $last_statement);
        if ($self->{'needs_return'}) {
            ($last_statement = pop(@block))
        };
        for my $decl (@block) {
            if (((ref($decl) eq 'Perlito5::AST::Apply') && ($decl->code() eq 'package'))) {
                ($Perlito5::PKG_NAME = $decl->{'namespace'});
                ($Perlito5::VAR->[0]->{'$_'} = {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)});
                ($Perlito5::VAR->[0]->{'$a'} = {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)});
                ($Perlito5::VAR->[0]->{'$b'} = {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)})
            };
            if ($decl->isa('Perlito5::AST::Decl')) {
                push(@str, $decl->emit_javascript_init() )
            };
            if (($decl->isa('Perlito5::AST::Apply') && ($decl->code() eq 'my'))) {
                for (@{$decl->{'arguments'}}) {
                    if ($_->isa('Perlito5::AST::Var')) {
                        ((my  $d) = Perlito5::AST::Decl->new(('decl' => $decl->code()), ('var' => $_)));
                        push(@str, $d->emit_javascript_init() )
                    }
                }
            };
            if (($decl->isa('Perlito5::AST::Apply') && ($decl->code() eq 'infix:<=>'))) {
                ((my  $arg) = $decl->{'arguments'}->[0]);
                if ($arg->isa('Perlito5::AST::Decl')) {
                    push(@str, $arg->emit_javascript_init() )
                };
                if (($arg->isa('Perlito5::AST::Apply') && ($arg->code() eq 'my'))) {
                    for (@{$arg->{'arguments'}}) {
                        if ($_->isa('Perlito5::AST::Var')) {
                            ((my  $d) = Perlito5::AST::Decl->new(('decl' => $arg->code()), ('var' => $_)));
                            push(@str, $d->emit_javascript_init() )
                        }
                    }
                }
            };
            if (!((($decl->isa('Perlito5::AST::Decl') && ($decl->decl() eq 'my'))))) {
                push(@str, ($decl->emit_javascript($level, 'void') . ';') )
            }
        };
        if (($self->{'needs_return'} && $last_statement)) {
            if ($last_statement->isa('Perlito5::AST::Decl')) {
                push(@str, $last_statement->emit_javascript_init() )
            };
            if (($last_statement->isa('Perlito5::AST::Apply') && ($last_statement->code() eq 'infix:<=>'))) {
                if ($last_statement->{'arguments'}->[0]->isa('Perlito5::AST::Decl')) {
                    push(@str, $last_statement->{'arguments'}->[0]->emit_javascript_init() )
                }
            };
            if ((($last_statement->isa('Perlito5::AST::Apply') && ($last_statement->code() eq 'return')) && $self->{'top_level'})) {
                ($last_statement = $last_statement->{'arguments'}->[0])
            };
            if ($last_statement->isa('Perlito5::AST::If')) {
                ((my  $cond) = $last_statement->cond());
                ((my  $body) = $last_statement->body());
                ((my  $otherwise) = $last_statement->otherwise());
                ($body = Perlito5::Javascript::LexicalBlock->new(('block' => $body->stmts()), ('needs_return' => 1)));
                push(@str, ('if ( ' . Perlito5::Javascript::to_bool($cond) . ' ) {' . chr(10) . $body->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}') );
                if ($otherwise) {
                    ($otherwise = Perlito5::Javascript::LexicalBlock->new(('block' => $otherwise->stmts()), ('needs_return' => 1)));
                    push(@str, (chr(10) . Perlito5::Javascript::tab($level) . 'else {' . chr(10) . $otherwise->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}') )
                }
            }
            else {
                if ($last_statement->isa('Perlito5::AST::Lit::Block')) {
                    ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $last_statement->{'stmts'}), ('needs_return' => 1)));
                    push(@str, ('for (var i_ = 0; i_ < 1 ; i_++) {' . chr(10) . $body->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}') )
                }
                else {
                    if (((($last_statement->isa('Perlito5::AST::For') || $last_statement->isa('Perlito5::AST::While')) || ($last_statement->isa('Perlito5::AST::Apply') && ($last_statement->code() eq 'goto'))) || ($last_statement->isa('Perlito5::AST::Apply') && ($last_statement->code() eq 'return')))) {
                        push(@str, $last_statement->emit_javascript($level, 'runtime') )
                    }
                    else {
                        if ($has_local) {
                            push(@str, ('return cleanup_local(local_idx, (' . Perlito5::Javascript::to_runtime_context([$last_statement]) . '));') )
                        }
                        else {
                            push(@str, ('return (' . Perlito5::Javascript::to_runtime_context([$last_statement]) . ');') )
                        }
                    }
                }
            }
        };
        if ($has_local) {
            push(@str, 'cleanup_local(local_idx, null);' )
        };
        if ($create_context) {
            ($level)--;
            push(@str, '})();' )
        };
        if (($self->{'top_level'} && $Perlito5::THROW)) {
            ($level)--;
            ($out = ($out . (Perlito5::Javascript::tab($level) . 'try {' . chr(10) . join(chr(10), map(($tab . $_), @str)) . chr(10) . Perlito5::Javascript::tab($level) . '}' . chr(10) . Perlito5::Javascript::tab($level) . 'catch(err) {' . chr(10) . Perlito5::Javascript::tab(($level + 1)) . 'if ( err instanceof Error ) {' . chr(10) . Perlito5::Javascript::tab(($level + 2)) . 'throw(err);' . chr(10) . Perlito5::Javascript::tab(($level + 1)) . '}' . chr(10) . Perlito5::Javascript::tab(($level + 1)) . 'else {' . chr(10) . Perlito5::Javascript::tab(($level + 2)) . (($has_local ? 'return cleanup_local(local_idx, err)' : 'return(err)')) . ';' . chr(10) . Perlito5::Javascript::tab(($level + 1)) . '}' . chr(10) . Perlito5::Javascript::tab($level) . '}')))
        }
        else {
            ($out = ($out . join(chr(10), map(($tab . $_), @str))))
        };
        ($Perlito5::PKG_NAME = $outer_pkg);
        if ($self->{'top_level'}) {
            ($Perlito5::THROW = $outer_throw)
        };
        shift(@{$Perlito5::VAR});
        return ($out)
    }
};
package Perlito5::AST::CompUnit;
for ($_) {
    sub Perlito5::AST::CompUnit::emit_javascript {
        ((my  $self) = $_[0]);
        ((my  $level) = $_[1]);
        ((my  $str) = ('(function () {' . chr(10) . Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'body'}), ('needs_return' => 0))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '})()' . chr(10)));
        return ($str)
    };
    sub Perlito5::AST::CompUnit::emit_javascript_program {
        ((my  $comp_units) = shift());
        ($Perlito5::PKG_NAME = 'main');
        ((my  $str) = ('' . 'var p5want = null;' . chr(10) . 'var ' . Perlito5::Javascript::pkg() . ' = NAMESPACE[' . chr(39) . $Perlito5::PKG_NAME . chr(39) . '];' . chr(10)));
        ($Perlito5::VAR = [{('@_' => {('decl' => 'my')}), ('$@' => {('decl' => 'our'), ('namespace' => 'main')}), ('$^O' => {('decl' => 'our'), ('namespace' => 'main')}), ('%ENV' => {('decl' => 'our'), ('namespace' => 'main')}), ('%INC' => {('decl' => 'our'), ('namespace' => 'main')}), ('@#' => {('decl' => 'our'), ('namespace' => 'main')}), ('@ARGV' => {('decl' => 'our'), ('namespace' => 'main')}), ('@INC' => {('decl' => 'our'), ('namespace' => 'main')}), ('$_' => {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)}), ('$a' => {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)}), ('$b' => {('decl' => 'our'), ('namespace' => $Perlito5::PKG_NAME)})}]);
        for my $comp_unit (@{$comp_units}) {
            ($str = ($str . $comp_unit->emit_javascript() . chr(10)))
        };
        return ($str)
    }
};
package Perlito5::AST::Val::Int;
for ($_) {
    sub Perlito5::AST::Val::Int::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        $self->{'int'}
    }
};
package Perlito5::AST::Val::Num;
for ($_) {
    sub Perlito5::AST::Val::Num::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        $self->{'num'}
    }
};
package Perlito5::AST::Val::Buf;
for ($_) {
    sub Perlito5::AST::Val::Buf::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        Perlito5::Javascript::escape_string($self->{'buf'})
    }
};
package Perlito5::AST::Lit::Block;
for ($_) {
    sub Perlito5::AST::Lit::Block::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'stmts'}), ('needs_return' => 0)));
        return (('for (var i_ = 0; i_ < 1 ; i_++) {' . chr(10) . $body->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'))
    }
};
package Perlito5::AST::Index;
for ($_) {
    sub Perlito5::AST::Index::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        if (($self->{'obj'}->isa('Perlito5::AST::Var') && ($self->{'obj'}->sigil() eq '$'))) {
            ((my  $v) = Perlito5::AST::Var->new(('sigil' => '@'), ('namespace' => $self->{'obj'}->namespace()), ('name' => $self->{'obj'}->name())));
            return (($v->emit_javascript($level) . '[' . $self->{'index_exp'}->emit_javascript() . ']'))
        };
        ('(' . $self->{'obj'}->emit_javascript() . ' || (' . $self->{'obj'}->emit_javascript() . ' = new ArrayRef([]))' . ')._array_[' . $self->{'index_exp'}->emit_javascript() . ']')
    }
};
package Perlito5::AST::Lookup;
for ($_) {
    sub Perlito5::AST::Lookup::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        if (($self->{'obj'}->isa('Perlito5::AST::Var') && ($self->{'obj'}->sigil() eq '$'))) {
            ((my  $v) = Perlito5::AST::Var->new(('sigil' => '%'), ('namespace' => $self->{'obj'}->namespace()), ('name' => $self->{'obj'}->name())));
            return (($v->emit_javascript($level) . '[' . $self->{'index_exp'}->emit_javascript() . ']'))
        };
        ('(' . $self->{'obj'}->emit_javascript() . ' || (' . $self->{'obj'}->emit_javascript() . ' = new HashRef({}))' . ')._hash_[' . $self->{'index_exp'}->emit_javascript() . ']')
    }
};
package Perlito5::AST::Var;
for ($_) {
    ((my  $table) = {('$' => 'v_'), ('@' => 'List_'), ('%' => 'Hash_'), ('&' => '')});
    sub Perlito5::AST::Var::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = shift());
        ((my  $perl5_name) = $self->perl5_name());
        (my  $decl_type);
        ((my  $decl) = $self->perl5_get_decl($perl5_name));
        if ($decl) {
            ($decl_type = $decl->{'decl'})
        }
        else {
            if ((!($self->{'namespace'}) && ($self->{'sigil'} ne '*'))) {
                if ($Perlito5::STRICT) {
                    die(('Global symbol "' . $perl5_name . '" requires explicit package name'))
                };
                ($decl_type = 'our');
                ($self->{'namespace'} = $Perlito5::PKG_NAME);
                ((my  $sigil) = (($self->{'sigil'} eq '$#') ? '@' : $self->{'sigil'}));
                ((my  $s) = ('NAMESPACE["' . $self->{'namespace'} . '"]["' . $table->{$sigil} . $self->{'name'} . '"]'));
                if (($sigil eq '@')) {
                    ($s = ($s . ' || (' . $s . ' = [])'));
                    ($s = ('NAMESPACE[' . $s . ', "' . $self->{'namespace'} . '"]["' . $table->{$sigil} . $self->{'name'} . '"]'))
                };
                if (($self->{'sigil'} eq '$#')) {
                    return (('(' . $s . '.length - 1)'))
                };
                return ($s)
            }
        };
        if (($self->{'sigil'} eq '@')) {
            if (($wantarray eq 'scalar')) {
                return (($self->emit_javascript($level, 'list') . '.length'))
            };
            if (($wantarray eq 'runtime')) {
                return (('(p5want' . ' ? ' . $self->emit_javascript($level, 'list') . ' : ' . $self->emit_javascript($level, 'list') . '.length' . ')'))
            }
        };
        if (($self->{'sigil'} eq '&')) {
            return (('NAMESPACE["' . (($self->{'namespace'} || $Perlito5::PKG_NAME)) . '"]["' . $self->{'name'} . '"]'))
        };
        if (($self->{'sigil'} eq '*')) {
            return (('NAMESPACE["' . (($self->{'namespace'} || $Perlito5::PKG_NAME)) . '"]["' . $self->{'name'} . '"]'))
        };
        if (($decl_type eq 'our')) {
            ((my  $sigil) = (($self->{'sigil'} eq '$#') ? '@' : $self->{'sigil'}));
            ((my  $s) = ('NAMESPACE["' . (($self->{'namespace'} || $decl->{'namespace'})) . '"]["' . $table->{$sigil} . $self->{'name'} . '"]'));
            if (($self->{'sigil'} eq '$#')) {
                return (('(' . $s . '.length - 1)'))
            };
            return ($s)
        };
        ((my  $ns) = '');
        if ($self->{'namespace'}) {
            ($ns = ('NAMESPACE["' . $self->{'namespace'} . '"]'));
            if (($self->{'sigil'} eq '$#')) {
                return (('(' . $ns . '["' . $table->{'@'} . $self->{'name'} . '"].length - 1)'))
            };
            return (($ns . '["' . $table->{$self->{'sigil'}} . $self->{'name'} . '"]'))
        };
        if (($self->{'sigil'} eq '$#')) {
            return (('(' . $ns . $table->{'@'} . $self->{'name'} . '.length - 1)'))
        };
        ($ns . $table->{$self->{'sigil'}} . $self->{'name'})
    };
    sub Perlito5::AST::Var::perl5_name {
        ((my  $self) = shift());
        ((my  $sigil) = $self->{'sigil'});
        if (($sigil eq '$#')) {
            ($sigil = '@')
        };
        ($sigil . (($self->{'namespace'} ? ($self->{'namespace'} . '::') : '')) . $self->{'name'})
    };
    sub Perlito5::AST::Var::perl5_get_decl {
        ((my  $self) = shift());
        ((my  $perl5_name) = shift());
        for (@{$Perlito5::VAR}) {
            if (exists($_->{$perl5_name})) {
                return ($_->{$perl5_name})
            }
        };
        return (undef())
    }
};
package Perlito5::AST::Decl;
for ($_) {
    sub Perlito5::AST::Decl::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        $self->{'var'}->emit_javascript($level)
    };
    sub Perlito5::AST::Decl::emit_javascript_init {
        ((my  $self) = shift());
        ((my  $env) = {('decl' => $self->{'decl'})});
        ((my  $perl5_name) = $self->{'var'}->perl5_name());
        if (($self->{'decl'} ne 'my')) {
            if ((($self->{'decl'} eq 'our') && $self->{'var'}->{'namespace'})) {
                die(('No package name allowed for variable ' . $perl5_name . ' in "our"'))
            };
            if (($self->{'var'}->{'namespace'} eq '')) {
                ((my  $decl_namespace) = '');
                ((my  $decl) = $self->{'var'}->perl5_get_decl($perl5_name));
                if (((($self->{'decl'} eq 'local') && $decl) && ((($decl->{'decl'} eq 'our') || ($decl->{'decl'} eq 'local'))))) {
                    ($decl_namespace = $decl->{'namespace'})
                };
                ($env->{'namespace'} = ($decl_namespace || $Perlito5::PKG_NAME))
            }
        };
        ($Perlito5::VAR->[0]->{$perl5_name} = $env);
        if (($self->{'decl'} eq 'my')) {
            ((my  $str) = '');
            ($str = ($str . 'var ' . $self->{'var'}->emit_javascript() . ' = '));
            if (($self->{'var'}->sigil() eq '%')) {
                ($str = ($str . '{};'))
            }
            else {
                if (($self->{'var'}->sigil() eq '@')) {
                    ($str = ($str . '[];'))
                }
                else {
                    ($str = ($str . 'null;'))
                }
            };
            return ($str)
        }
        else {
            if (($self->{'decl'} eq 'our')) {
                return (('// our ' . $self->{'var'}->emit_javascript()))
            }
            else {
                if (($self->{'decl'} eq 'local')) {
                    ((my  $perl5_name) = $self->{'var'}->perl5_name());
                    ((my  $decl_namespace) = '');
                    ((my  $decl) = $self->{'var'}->perl5_get_decl($perl5_name));
                    if (($decl && ((($decl->{'decl'} eq 'our') || ($decl->{'decl'} eq 'local'))))) {
                        ($decl_namespace = $decl->{'namespace'})
                    };
                    ((my  $ns) = ('NAMESPACE["' . ((($self->{'var'}->{'namespace'} || $decl_namespace) || $Perlito5::PKG_NAME)) . '"]'));
                    return (('set_local(' . $ns . ',' . Perlito5::Javascript::escape_string($self->{'var'}->{'name'}) . ',' . Perlito5::Javascript::escape_string($self->{'var'}->{'sigil'}) . '); '))
                }
                else {
                    if (($self->{'decl'} eq 'state')) {
                        return (('// state ' . $self->{'var'}->emit_javascript()))
                    }
                    else {
                        die(('not implemented: Perlito5::AST::Decl ' . chr(39) . $self->{'decl'} . chr(39)))
                    }
                }
            }
        }
    }
};
package Perlito5::AST::Proto;
for ($_) {
    sub Perlito5::AST::Proto::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        if (($self->{'name'} eq '__PACKAGE__')) {
            return (Perlito5::Javascript::pkg())
        };
        ('NAMESPACE["' . $self->{'name'} . '"]')
    }
};
package Perlito5::AST::Call;
for ($_) {
    sub Perlito5::AST::Call::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = shift());
        ((my  $invocant) = $self->{'invocant'}->emit_javascript());
        ((my  $meth) = $self->{'method'});
        if (($meth eq 'postcircumfix:<[ ]>')) {
            return (('(' . $invocant . ' || (' . $invocant . ' = new ArrayRef([]))' . ')._array_[' . $self->{'arguments'}->emit_javascript($level, 'list') . ']'))
        };
        if (($meth eq 'postcircumfix:<{ }>')) {
            return (('(' . $invocant . ' || (' . $invocant . ' = new HashRef({}))' . ')._hash_[' . $self->{'arguments'}->emit_javascript($level, 'list') . ']'))
        };
        if (($meth eq 'postcircumfix:<( )>')) {
            return (('(' . $invocant . ')(' . Perlito5::Javascript::to_list($self->{'arguments'}) . ')'))
        };
        if ((ref($meth) eq 'Perlito5::AST::Var')) {
            ($meth = $meth->emit_javascript())
        }
        else {
            ($meth = ('"' . $meth . '"'))
        };
        return (('p5call(' . $invocant . ', ' . $meth . ', ' . Perlito5::Javascript::to_list($self->{'arguments'}) . ', ' . ((($wantarray eq 'list') ? '1' : (($wantarray eq 'scalar') ? '0' : (($wantarray eq 'void') ? 'null' : 'p5want')))) . ')'))
    }
};
package Perlito5::AST::Apply;
for ($_) {
    sub Perlito5::AST::Apply::emit_regex_javascript {
        ((my  $op) = shift());
        ((my  $var) = shift());
        ((my  $regex) = shift());
        (my  $str);
        ((my  $code) = $regex->{'code'});
        ((my  $regex_args) = $regex->{'arguments'});
        if (($code eq 'p5:s')) {
            ($str = ($var->emit_javascript() . ' = p5str(' . $var->emit_javascript() . ').replace(/' . $regex_args->[0]->{'buf'} . '/' . $regex_args->[2] . ', ' . $regex_args->[1]->emit_javascript() . ')'))
        }
        else {
            if (($code eq 'p5:m')) {
                ($str = ('(p5str(' . $var->emit_javascript() . ').match(/' . $regex_args->[0]->{'buf'} . '/' . $regex_args->[1] . ')' . ' ? 1 : 0)'))
            }
            else {
                die(('Error: regex emitter - unknown operator ' . $code))
            }
        };
        if (($op eq '=~')) {
            return ($str)
        };
        if (($op eq '!~')) {
            return (('!(' . $str . ')'))
        };
        die('Error: regex emitter')
    };
    sub Perlito5::AST::Apply::emit_function_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = shift());
        ((my  $argument) = shift());
        if (($argument->isa('Perlito5::AST::Apply') && ($argument->code() eq 'return'))) {
            return (('function () { ' . $argument->emit_javascript($level, $wantarray) . ' }'))
        };
        return (('function () { return ' . $argument->emit_javascript($level, $wantarray) . ' }'))
    };
    ((my  %emit_js) = (('infix:<=~>' => sub {
    ((my  $self) = $_[0]);
    emit_regex_javascript('=~', $self->{'arguments'}->[0], $self->{'arguments'}->[1])
}), ('infix:<!~>' => sub {
    ((my  $self) = $_[0]);
    emit_regex_javascript('!~', $self->{'arguments'}->[0], $self->{'arguments'}->[1])
}), ('p5:s' => sub {
    ((my  $self) = $_[0]);
    emit_regex_javascript('=~', Perlito5::AST::Var->new(('sigil' => '$'), ('namespace' => ''), ('name' => '_')), $self)
}), ('p5:m' => sub {
    ((my  $self) = $_[0]);
    emit_regex_javascript('=~', Perlito5::AST::Var->new(('sigil' => '$'), ('namespace' => ''), ('name' => '_')), $self)
}), ('__PACKAGE__' => sub {
    ((my  $self) = $_[0]);
    ('"' . $Perlito5::PKG_NAME . '"')
}), ('wantarray' => sub {
    ((my  $self) = $_[0]);
    'p5want'
}), ('package' => sub {
    ((my  $self) = $_[0]);
    ('var ' . Perlito5::Javascript::pkg() . ' = p5make_package("' . $self->{'namespace'} . '")')
}), ('infix:<=>>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    join(', ', map($_->emit_javascript($level), @{$self->{'arguments'}}))
}), ('infix:<cmp>' => sub {
    ((my  $self) = $_[0]);
    ('p5cmp(' . join(', ', map(Perlito5::Javascript::to_str($_), @{$self->{'arguments'}})) . ')')
}), ('infix:<<=>>' => sub {
    ((my  $self) = $_[0]);
    ('p5cmp(' . join(', ', map(Perlito5::Javascript::to_num($_), @{$self->{'arguments'}})) . ')')
}), ('prefix:<!>' => sub {
    ((my  $self) = $_[0]);
    ('!( ' . Perlito5::Javascript::to_bool($self->{'arguments'}->[0]) . ')')
}), ('prefix:<~>' => sub {
    ((my  $self) = $_[0]);
    ('~( ' . Perlito5::Javascript::to_num($self->{'arguments'}->[0]) . ')')
}), ('prefix:<->' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('-( ' . $self->{'arguments'}->[0]->emit_javascript($level, 'scalar') . ')')
}), ('prefix:<+>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('(' . $self->{'arguments'}->[0]->emit_javascript($level, $wantarray) . ')')
}), ('require' => sub {
    ((my  $self) = $_[0]);
    ('NAMESPACE["Perlito5::Grammar::Use"]["require"]([' . Perlito5::Javascript::to_str($self->{'arguments'}->[0]) . '])')
}), ('prefix:<$>' => sub {
    ((my  $self) = $_[0]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    ('(' . $arg->emit_javascript() . ')._scalar_')
}), ('prefix:<@>' => sub {
    ((my  $self) = $_[0]);
    ((my  $level) = $_[1]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    ('(' . $arg->emit_javascript($level) . ' || (' . $arg->emit_javascript($level) . ' = new ArrayRef([]))' . ')._array_')
}), ('prefix:<$#>' => sub {
    ((my  $self) = $_[0]);
    ((my  $level) = $_[1]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    ('((' . $arg->emit_javascript($level) . ' || (' . $arg->emit_javascript($level) . ' = new ArrayRef([]))' . ')._array_.length - 1)')
}), ('prefix:<%>' => sub {
    ((my  $self) = $_[0]);
    ((my  $level) = $_[1]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    ('(' . $arg->emit_javascript($level) . ')._hash_')
}), ('prefix:<&>' => sub {
    ((my  $self) = $_[0]);
    ((my  $level) = $_[1]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    ('p5code_lookup_by_name("' . $Perlito5::PKG_NAME . '", ' . $arg->emit_javascript($level) . ')')
}), ('circumfix:<[ ]>' => sub {
    ((my  $self) = $_[0]);
    ('(new ArrayRef(' . Perlito5::Javascript::to_list($self->{'arguments'}) . '))')
}), ('circumfix:<{ }>' => sub {
    ((my  $self) = $_[0]);
    ('(new HashRef(array_to_hash(' . Perlito5::Javascript::to_list($self->{'arguments'}) . ')))')
}), ('prefix:<' . chr(92) . '>' => sub {
    ((my  $self) = $_[0]);
    ((my  $level) = $_[1]);
    ((my  $arg) = $self->{'arguments'}->[0]);
    if ($arg->isa('Perlito5::AST::Var')) {
        if (($arg->sigil() eq '@')) {
            return (('(new ArrayRef(' . $arg->emit_javascript($level) . '))'))
        };
        if (($arg->sigil() eq '%')) {
            return (('(new HashRef(' . $arg->emit_javascript($level) . '))'))
        };
        if (($arg->sigil() eq '&')) {
            if ($arg->{'namespace'}) {
                return (('NAMESPACE["' . $arg->{'namespace'} . '"].' . $arg->{'name'}))
            }
            else {
                return ((Perlito5::Javascript::pkg() . '.' . $arg->{'name'}))
            }
        }
    };
    return (('(new ScalarRef(' . $arg->emit_javascript($level) . '))'))
}), ('postfix:<++>' => sub {
    ((my  $self) = $_[0]);
    ('(' . join(' ', map($_->emit_javascript(), @{$self->{'arguments'}})) . ')++')
}), ('postfix:<-->' => sub {
    ((my  $self) = $_[0]);
    ('(' . join(' ', map($_->emit_javascript(), @{$self->{'arguments'}})) . ')--')
}), ('prefix:<++>' => sub {
    ((my  $self) = $_[0]);
    ('++(' . join(' ', map($_->emit_javascript(), @{$self->{'arguments'}})) . ')')
}), ('prefix:<-->' => sub {
    ((my  $self) = $_[0]);
    ('--(' . join(' ', map($_->emit_javascript(), @{$self->{'arguments'}})) . ')')
}), ('infix:<x>' => sub {
    ((my  $self) = $_[0]);
    ('str_replicate(' . join(', ', map($_->emit_javascript(), @{$self->{'arguments'}})) . ')')
}), ('list:<.>' => sub {
    ((my  $self) = $_[0]);
    ('(' . join(' + ', map(Perlito5::Javascript::to_str($_), @{$self->{'arguments'}})) . ')')
}), ('list:<,>' => sub {
    ((my  $self) = $_[0]);
    Perlito5::Javascript::to_list($self->{'arguments'})
}), ('infix:<..>' => sub {
    ((my  $self) = $_[0]);
    ('(function (a) { ' . 'for (var i=' . $self->{'arguments'}->[0]->emit_javascript() . ', l=' . $self->{'arguments'}->[1]->emit_javascript() . '; ' . 'i<=l; ++i)' . '{ ' . 'a.push(i) ' . '}; ' . 'return a ' . '})([])')
}), ('delete' => sub {
    ((my  $self) = $_[0]);
    ('(delete ' . $self->{'arguments'}->[0]->emit_javascript() . ')')
}), ('ternary:<? :>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('( ' . Perlito5::Javascript::to_bool($self->{'arguments'}->[0]) . ' ? ' . ($self->{'arguments'}->[1])->emit_javascript($level, $wantarray) . ' : ' . ($self->{'arguments'}->[2])->emit_javascript($level, $wantarray) . ')')
}), ('my' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('p5context(' . '[' . join(', ', map($_->emit_javascript($level, $wantarray), @{$self->{'arguments'}})) . '], ' . ((($wantarray eq 'runtime') ? 'p5want' : (($wantarray eq 'list') ? 1 : 0))) . ')')
}), ('circumfix:<( )>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('p5context(' . '[' . join(', ', map($_->emit_javascript($level, $wantarray), @{$self->{'arguments'}})) . '], ' . ((($wantarray eq 'runtime') ? 'p5want' : (($wantarray eq 'list') ? 1 : 0))) . ')')
}), ('infix:<=>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    emit_javascript_bind($self->{'arguments'}->[0], $self->{'arguments'}->[1], $level)
}), ('return' => sub {
    ((my  $self) = $_[0]);
    ($Perlito5::THROW = 1);
    ('throw(' . Perlito5::Javascript::to_runtime_context($self->{'arguments'}) . ')')
}), ('goto' => sub {
    ((my  $self) = $_[0]);
    ($Perlito5::THROW = 1);
    ('throw((' . $self->{'arguments'}->[0]->emit_javascript() . ')([List__, p5want]))')
}), ('do' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ((my  $ast) = Perlito5::AST::Apply->new(('code' => 'eval'), ('namespace' => ''), ('arguments' => [Perlito5::AST::Apply->new(('code' => 'slurp'), ('namespace' => 'Perlito5::IO'), ('arguments' => $self->{'arguments'}))])));
    $ast->emit_javascript($level)
}), ('eval' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ($Perlito5::THROW = 1);
    ((my  $arg) = $self->{'arguments'}->[0]);
    (my  $eval);
    if ($arg->isa('Perlito5::AST::Do')) {
        ($eval = $arg->emit_javascript(($level + 1), $wantarray))
    }
    else {
        ((my  $var_env_perl5) = Perlito5::Dumper::Dumper($Perlito5::VAR));
        ((my  $m) = Perlito5::Expression->term_square($var_env_perl5, 0));
        ($m = Perlito5::Expression::expand_list($m->flat()->[2]));
        ((my  $var_env_js) = ('(new ArrayRef(' . Perlito5::Javascript::to_list($m) . '))'));
        ($eval = ('eval(perl5_to_js(' . Perlito5::Javascript::to_str($arg) . ', ' . '"' . $Perlito5::PKG_NAME . '", ' . $var_env_js . '))'))
    };
    ('(function () {' . chr(10) . 'var r = null;' . chr(10) . 'NAMESPACE["main"]["v_@"] = "";' . chr(10) . 'try {' . chr(10) . 'r = ' . $eval . chr(10) . '}' . chr(10) . 'catch(err) {' . chr(10) . 'if ( err instanceof p5_error ) {' . chr(10) . '}' . chr(10) . 'else if ( err instanceof Error ) {' . chr(10) . 'NAMESPACE["main"]["v_@"] = err;' . chr(10) . '}' . chr(10) . 'else {' . chr(10) . 'throw(err);' . chr(10) . '}' . chr(10) . '}' . chr(10) . 'return r;' . chr(10) . '})()')
}), ('undef' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    if (($self->{'arguments'} && @{$self->{'arguments'}})) {
        return (('(' . $self->{'arguments'}->[0]->emit_javascript() . ' = null)'))
    };
    return ('null')
}), ('defined' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('(' . join(' ', map($_->emit_javascript($level), @{$self->{'arguments'}})) . ' != null)')
}), ('shift' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    if (($self->{'arguments'} && @{$self->{'arguments'}})) {
        return ((Perlito5::Javascript::pkg() . '.shift([' . join(', ', map($_->emit_javascript($level), @{$self->{'arguments'}})) . '])'))
    };
    return ((Perlito5::Javascript::pkg() . '.shift([List__])'))
}), ('map' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ((my  @in) = @{$self->{'arguments'}});
    ((my  $fun) = shift(@in));
    ((my  $list) = Perlito5::Javascript::to_list(\@in));
    if ((ref($fun) eq 'Perlito5::AST::Lit::Block')) {
        ($fun = $fun->{'stmts'})
    }
    else {
        ($fun = [$fun])
    };
    ('p5map(' . Perlito5::Javascript::pkg() . ', ' . 'function (p5want) {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $fun), ('needs_return' => 1), ('top_level' => 0)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}, ' . $list . ')')
}), ('grep' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ((my  @in) = @{$self->{'arguments'}});
    ((my  $fun) = shift(@in));
    ((my  $list) = Perlito5::Javascript::to_list(\@in));
    if ((ref($fun) eq 'Perlito5::AST::Lit::Block')) {
        ($fun = $fun->{'stmts'})
    }
    else {
        ($fun = [$fun])
    };
    ('p5grep(' . Perlito5::Javascript::pkg() . ', ' . 'function (p5want) {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $fun), ('needs_return' => 1), ('top_level' => 0)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}, ' . $list . ')')
}), ('sort' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ((my  @in) = @{$self->{'arguments'}});
    (my  $fun);
    (my  $list);
    if ((ref($in[0]) eq 'Perlito5::AST::Lit::Block')) {
        ($fun = shift(@in));
        ($fun = ('function (p5want) {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $fun->{'stmts'}), ('needs_return' => 1), ('top_level' => 0)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'))
    }
    else {
        ($fun = 'null')
    };
    ($list = Perlito5::Javascript::to_list(\@in));
    ('p5sort(' . Perlito5::Javascript::pkg() . ', ' . $fun . ', ' . $list . ')')
}), ('infix:<//>' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ('defined_or' . '(' . $self->{'arguments'}->[0]->emit_javascript($level, $wantarray) . ', ' . $self->emit_function_javascript($level, $wantarray, $self->{'arguments'}->[1]) . ')')
}), ('exists' => sub {
    ((my  $self) = shift());
    ((my  $level) = shift());
    ((my  $wantarray) = shift());
    ((my  $arg) = $self->{'arguments'}->[0]);
    if ($arg->isa('Perlito5::AST::Lookup')) {
        ((my  $v) = $arg->obj());
        if (($v->isa('Perlito5::AST::Var') && ($v->sigil() eq '$'))) {
            ($v = Perlito5::AST::Var->new(('sigil' => '%'), ('namespace' => $v->namespace()), ('name' => $v->name())));
            return (('(' . $v->emit_javascript() . ').hasOwnProperty(' . ($arg->index_exp())->emit_javascript() . ')'))
        };
        return (('(' . $v->emit_javascript() . ')._hash_.hasOwnProperty(' . ($arg->index_exp())->emit_javascript() . ')'))
    };
    if ($arg->isa('Perlito5::AST::Call')) {
        if (($arg->method() eq 'postcircumfix:<{ }>')) {
            return (('(' . $arg->invocant()->emit_javascript() . ')._hash_.hasOwnProperty(' . $arg->{'arguments'}->emit_javascript() . ')'))
        }
    }
})));
    sub Perlito5::AST::Apply::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $wantarray) = shift());
        ((my  $apply) = $self->op_assign());
        if ($apply) {
            return ($apply->emit_javascript($level))
        };
        ((my  $code) = $self->{'code'});
        if ((ref($code) ne '')) {
            ((my  @args) = ());
            for (@{$self->{'arguments'}}) {
                push(@args, $_->emit_javascript() )
            };
            return (('(' . $self->{'code'}->emit_javascript($level) . ')(' . join(',', @args) . ')'))
        };
        if (exists($emit_js{$code})) {
            return ($emit_js{$code}->($self, $level, $wantarray))
        };
        if (exists($Perlito5::Javascript::op_infix_js_str{$code})) {
            return (('(' . join($Perlito5::Javascript::op_infix_js_str{$code}, map(Perlito5::Javascript::to_str($_), @{$self->{'arguments'}})) . ')'))
        };
        if (exists($Perlito5::Javascript::op_infix_js_num{$code})) {
            return (('(' . join($Perlito5::Javascript::op_infix_js_num{$code}, map(Perlito5::Javascript::to_num($_), @{$self->{'arguments'}})) . ')'))
        };
        if (exists($Perlito5::Javascript::op_prefix_js_str{$code})) {
            return (($Perlito5::Javascript::op_prefix_js_str{$code} . '(' . Perlito5::Javascript::to_str($self->{'arguments'}->[0]) . ')'))
        };
        if ((($code eq 'infix:<&&>') || ($code eq 'infix:<and>'))) {
            return (('and' . '(' . $self->{'arguments'}->[0]->emit_javascript($level, $wantarray) . ', ' . $self->emit_function_javascript($level, $wantarray, $self->{'arguments'}->[1]) . ')'))
        };
        if ((($code eq 'infix:<||>') || ($code eq 'infix:<or>'))) {
            return (('or' . '(' . $self->{'arguments'}->[0]->emit_javascript($level, $wantarray) . ', ' . $self->emit_function_javascript($level, $wantarray, $self->{'arguments'}->[1]) . ')'))
        };
        if ($self->{'namespace'}) {
            if ((($self->{'namespace'} eq 'JS') && ($code eq 'inline'))) {
                if ($self->{'arguments'}->[0]->isa('Perlito5::AST::Val::Buf')) {
                    return ($self->{'arguments'}->[0]->{'buf'})
                }
                else {
                    die('JS::inline needs a string constant')
                }
            };
            ($code = ('NAMESPACE["' . $self->{'namespace'} . '"].' . $code))
        }
        else {
            ($code = (Perlito5::Javascript::pkg() . '.' . $code))
        };
        (my  $sig);
        for ($_) {
            ((my  $name) = $self->{'code'});
            (+((my  $namespace)) = $self->{'namespace'});
            ((my  $effective_name) = ($self->{'code'} . '::' . $self->{'namespace'}));
            if (exists($Perlito5::PROTO->{$effective_name})) {
                ($sig = $Perlito5::PROTO->{$effective_name})
            }
            else {
                if ((((!($namespace) || ($namespace eq 'CORE'))) && exists($Perlito5::CORE_PROTO->{('CORE::' . $name)}))) {
                    ($effective_name = ('CORE::' . $name));
                    ($sig = $Perlito5::CORE_PROTO->{$effective_name})
                }
            }
        };
        if ($sig) {
            ((my  @out) = ());
            ((my  @in) = @{($self->{'arguments'} || [])});
            if (($sig eq chr(92) . '@@')) {
                push(@out, shift(@in)->emit_javascript($level, 'list') );
                push(@out, Perlito5::Javascript::to_list(\@in) )
            }
            else {
                if ((($sig eq chr(92) . '[@%]') || ($sig eq ';' . chr(92) . '@'))) {
                    push(@out, shift(@in)->emit_javascript($level, 'list') )
                }
                else {
                    if (($sig eq chr(92) . '@;$$@')) {
                        push(@out, shift(@in)->emit_javascript($level, 'list') );
                        if (@in) {
                            push(@out, shift(@in)->emit_javascript($level, 'scalar') )
                        };
                        if (@in) {
                            push(@out, shift(@in)->emit_javascript($level, 'scalar') )
                        };
                        if (@in) {
                            push(@out, Perlito5::Javascript::to_list(\@in) )
                        }
                    }
                    else {
                        if (($sig eq '$@')) {
                            push(@out, shift(@in)->emit_javascript($level, 'scalar') );
                            push(@out, Perlito5::Javascript::to_list(\@in) )
                        }
                        else {
                            if (($sig eq '@')) {
                                push(@out, Perlito5::Javascript::to_list(\@in) )
                            }
                            else {
                                for (@in) {
                                    push(@out, $_->emit_javascript($level, 'scalar') )
                                }
                            }
                        }
                    }
                }
            };
            return (($code . '([' . join(', ', @out) . '], ' . ((($wantarray eq 'list') ? '1' : (($wantarray eq 'scalar') ? '0' : (($wantarray eq 'void') ? 'null' : 'p5want')))) . ')'))
        };
        ((my  @args) = ());
        ((my  $arg_list) = Perlito5::Javascript::to_list_preprocess($self->{'arguments'}));
        for (@{$arg_list}) {
            push(@args, $_->emit_javascript($level) )
        };
        ((my  $arg_code) = (($self->{'code'} eq 'scalar') ? ('[' . join(', ', @args) . ']') : Perlito5::Javascript::to_list($arg_list)));
        ($code . '(' . $arg_code . ', ' . ((($wantarray eq 'list') ? '1' : (($wantarray eq 'scalar') ? '0' : (($wantarray eq 'void') ? 'null' : 'p5want')))) . ')')
    };
    sub Perlito5::AST::Apply::emit_javascript_bind {
        ((my  $parameters) = shift());
        ((my  $arguments) = shift());
        ((my  $level) = shift());
        if (($parameters->isa('Perlito5::AST::Apply') && ((($parameters->code() eq 'my') || ($parameters->code() eq 'circumfix:<( )>'))))) {
            ((my  $tmp) = ('tmp' . Perlito5::Javascript::get_label()));
            ((my  $tmp2) = ('tmp' . Perlito5::Javascript::get_label()));
            return (('(function () { ' . 'var ' . $tmp . ' = ' . Perlito5::Javascript::to_list([$arguments], ($level + 1)) . '; ' . 'var ' . $tmp2 . ' = ' . $tmp . '.slice(0); ' . join('; ', (map(+(((($_->isa('Perlito5::AST::Apply') && ($_->code() eq 'undef')) ? ($tmp . '.shift()') : (($_->sigil() eq '$') ? ($_->emit_javascript() . ' = ' . $tmp . '.shift()') : (($_->sigil() eq '@') ? ($_->emit_javascript() . ' = ' . $tmp . '; ' . $tmp . ' = []') : (($_->sigil() eq '%') ? ($_->emit_javascript() . ' = array_to_hash(' . $tmp . '); ' . $tmp . ' = []') : die('not implemented'))))))), @{$parameters->arguments()})),('return ' . $tmp2)) . ' })()'))
        };
        if ((($parameters->isa('Perlito5::AST::Var') && ($parameters->sigil() eq '$')) || ($parameters->isa('Perlito5::AST::Decl') && ($parameters->var()->sigil() eq '$')))) {
            return (('(' . $parameters->emit_javascript() . ' = ' . Perlito5::Javascript::to_scalar([$arguments], ($level + 1)) . ')'))
        };
        if ((($parameters->isa('Perlito5::AST::Var') && ($parameters->sigil() eq '@')) || ($parameters->isa('Perlito5::AST::Decl') && ($parameters->var()->sigil() eq '@')))) {
            return (('(' . $parameters->emit_javascript() . ' = ' . Perlito5::Javascript::to_list([$arguments], ($level + 1)) . ')'))
        }
        else {
            if ((($parameters->isa('Perlito5::AST::Var') && ($parameters->sigil() eq '%')) || ($parameters->isa('Perlito5::AST::Decl') && ($parameters->var()->sigil() eq '%')))) {
                return (('(' . $parameters->emit_javascript() . ' = array_to_hash(' . Perlito5::Javascript::to_list([$arguments], ($level + 1)) . '))'))
            }
        };
        ('(' . $parameters->emit_javascript($level) . ' = ' . $arguments->emit_javascript(($level + 1)) . ')')
    }
};
package Perlito5::AST::If;
for ($_) {
    sub Perlito5::AST::If::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $cond) = $self->{'cond'});
        ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'body'}->stmts()), ('needs_return' => 0), ('create_context' => 1)));
        ((my  $s) = ('if ( ' . Perlito5::Javascript::to_bool($cond) . ' ) {' . chr(10) . $body->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'));
        if (@{$self->{'otherwise'}->stmts()}) {
            ((my  $otherwise) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'otherwise'}->stmts()), ('needs_return' => 0), ('create_context' => 1)));
            ($s = ($s . chr(10) . Perlito5::Javascript::tab($level) . 'else {' . chr(10) . $otherwise->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'))
        };
        return ($s)
    }
};
package Perlito5::AST::While;
for ($_) {
    sub Perlito5::AST::While::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'body'}->stmts()), ('needs_return' => 0), ('create_context' => 1)));
        return (('for ( ' . (($self->{'init'} ? ($self->{'init'}->emit_javascript() . '; ') : '; ')) . (($self->{'cond'} ? (Perlito5::Javascript::to_bool($self->{'cond'}) . '; ') : '; ')) . (($self->{'continue'} ? ($self->{'continue'}->emit_javascript() . ' ') : ' ')) . ') {' . chr(10) . $body->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'))
    }
};
package Perlito5::AST::For;
for ($_) {
    sub Perlito5::AST::For::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $cond) = Perlito5::Javascript::to_list([$self->{'cond'}]));
        if ($self->{'body'}->sig()) {
            ((my  $v) = $self->{'body'}->sig());
            ($Perlito5::VAR->[0]->{$v->perl5_name()} = {('decl' => 'my')});
            ((my  $sig) = $v->emit_javascript(($level + 1)));
            return (('p5for_lex(' . ('function (' . $sig . ') {' . chr(10)) . (Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'body'}->stmts()), ('needs_return' => 0), ('top_level' => 0)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}, ' . $cond . ')'))
        }
        else {
            return (('p5for(' . Perlito5::Javascript::pkg() . ', ' . 'function () {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'body'}->stmts()), ('needs_return' => 0), ('top_level' => 0)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}, ' . $cond . ')'))
        }
    }
};
package Perlito5::AST::Sub;
for ($_) {
    sub Perlito5::AST::Sub::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $s) = ('function (List__, p5want) {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $self->{'block'}), ('needs_return' => 1), ('top_level' => 1)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '}'));
        if ($self->{'name'}) {
            return (('p5make_sub("' . $self->{'namespace'} . '", "' . $self->{'name'} . '", ' . $s . ')'))
        }
        else {
            return ($s)
        }
    }
};
package Perlito5::AST::Do;
for ($_) {
    sub Perlito5::AST::Do::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        ((my  $block) = $self->simplify()->block());
        return (('(function () {' . chr(10) . (Perlito5::Javascript::LexicalBlock->new(('block' => $block), ('needs_return' => 1)))->emit_javascript(($level + 1)) . chr(10) . Perlito5::Javascript::tab($level) . '})()'))
    }
};
package Perlito5::AST::Use;
for ($_) {
    sub Perlito5::AST::Use::emit_javascript {
        ((my  $self) = shift());
        ((my  $level) = shift());
        Perlito5::Grammar::Use::emit_time_eval($self);
        ('// ' . $self->{'code'} . ' ' . $self->{'mod'} . chr(10))
    }
};

1;
