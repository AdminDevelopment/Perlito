# Do not edit this file - Generated by Perlito5 8.0
use v5;
use utf8;
use strict;
use warnings;
no warnings ('redefine', 'once', 'void', 'uninitialized', 'misc', 'recursion');
use Perlito5::Perl5::Runtime;
use Perlito5::Perl5::Prelude;
our $MATCH = Perlito5::Match->new();
{
package main;
    sub new { shift; bless { @_ }, "main" }
    use v5;
    use Perlito5::AST;
    {
    package Javascript;
        sub new { shift; bless { @_ }, "Javascript" }
        sub tab {
            my $List__ = bless \@_, "ARRAY";
            ((my  $level) = shift());
            (('    ') x $level)
        };
        ((my  $Hash_safe_char = bless {}, 'HASH') = (do {
    (my  $Hash_a = bless {}, 'HASH');
    ($Hash_a->{'_'} = 1);
    ($Hash_a->{','} = 1);
    ($Hash_a->{'.'} = 1);
    ($Hash_a->{':'} = 1);
    ($Hash_a->{'-'} = 1);
    ($Hash_a->{'+'} = 1);
    ($Hash_a->{'*'} = 1);
    ($Hash_a->{' '} = 1);
    ($Hash_a->{'('} = 1);
    ($Hash_a->{')'} = 1);
    ($Hash_a->{'<'} = 1);
    ($Hash_a->{'>'} = 1);
    ($Hash_a->{'['} = 1);
    ($Hash_a->{']'} = 1);
    $Hash_a
}));
        sub escape_string {
            my $List__ = bless \@_, "ARRAY";
            ((my  $s) = shift());
            (my  $List_out = bless [], 'ARRAY');
            ((my  $tmp) = '');
            if (($s eq '')) {
                return ((chr(39) . chr(39)))
            };
            for my $i ( @{(bless [0 .. (length($s) - 1)], 'ARRAY')} ) {
                ((my  $c) = substr($s, $i, 1));
                if ((((((((($c ge 'a')) && (($c le 'z')))) || (((($c ge 'A')) && (($c le 'Z'))))) || (((($c ge '0')) && (($c le '9'))))) || exists($Hash_safe_char->{$c})))) {
                    ($tmp = ($tmp . $c))
                }
                else {
                    if (($tmp ne '')) {
                        push( @{$List_out}, (chr(39) . $tmp . chr(39)) )
                    };
                    push( @{$List_out}, ('String.fromCharCode(' . ord($c) . (')')) );
                    ($tmp = '')
                }
            };
            if (($tmp ne '')) {
                push( @{$List_out}, (chr(39) . $tmp . chr(39)) )
            };
            return (join(' + ', @{$List_out}))
        };
        sub autovivify {
            my $List__ = bless \@_, "ARRAY";
            ((my  $ast) = shift());
            ((my  $type) = shift());
            ((my  $str_init) = (chr(39) . chr(39)));
            if (($type eq 'HASH')) {
                ($str_init = chr(123) . chr(125))
            };
            if (($type eq 'ARRAY')) {
                ($str_init = '[]')
            };
            if (($type eq 'HASHREF')) {
                ($str_init = chr(123) . chr(125))
            };
            if (($type eq 'ARRAYREF')) {
                ($str_init = '[]')
            };
            if ((Main::isa($ast, 'Var'))) {
                if (((($type eq 'HASH') && ($ast->sigil() eq chr(36))))) {
                    ($ast = Var->new(('sigil' => chr(37)), ('twigil' => $ast->twigil()), ('namespace' => $ast->namespace()), ('name' => $ast->name())));
                    ((my  $var_js) = $ast->emit_javascript());
                    return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                }
                else {
                    if (((($type eq 'ARRAY') && ($ast->sigil() eq chr(36))))) {
                        ($ast = Var->new(('sigil' => chr(64)), ('twigil' => $ast->twigil()), ('namespace' => $ast->namespace()), ('name' => $ast->name())));
                        ((my  $var_js) = $ast->emit_javascript());
                        return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                    }
                    else {
                        if (((($type eq 'HASHREF') && ($ast->sigil() eq chr(36))))) {
                            ((my  $var_js) = $ast->emit_javascript());
                            return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                        }
                        else {
                            if (((($type eq 'ARRAYREF') && ($ast->sigil() eq chr(36))))) {
                                ((my  $var_js) = $ast->emit_javascript());
                                return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                            }
                        }
                    }
                }
            }
            else {
                if ((Main::isa($ast, 'Call'))) {
                    ((my  $var_js) = $ast->emit_javascript());
                    if ((($ast->method() eq 'postcircumfix:<[ ]>'))) {
                        return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    ($List_v = (autovivify($ast->invocant(), 'ARRAYREF')));
    for my $x ( @{(bless [0 .. ((scalar( @{$List_v} ) - 1))], 'ARRAY')} ) {
        push( @{$List_a}, $List_v->[$x] )
    };
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                    }
                    else {
                        if ((($ast->method() eq 'postcircumfix:<' . chr(123) . ' ' . chr(125) . '>'))) {
                            return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    ($List_v = (autovivify($ast->invocant(), 'HASHREF')));
    for my $x ( @{(bless [0 .. ((scalar( @{$List_v} ) - 1))], 'ARRAY')} ) {
        push( @{$List_a}, $List_v->[$x] )
    };
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                        }
                    }
                }
                else {
                    if ((Main::isa($ast, 'Index'))) {
                        ((my  $var_js) = $ast->emit_javascript());
                        (my  $type);
                        ((my  $var) = $ast->obj());
                        if (((Main::isa($var, 'Var') && ($var->sigil() eq chr(36))))) {
                            ($type = 'ARRAY')
                        }
                        else {
                            ($type = 'ARRAYREF')
                        };
                        return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    ($List_v = (autovivify($ast->obj(), $type)));
    for my $x ( @{(bless [0 .. ((scalar( @{$List_v} ) - 1))], 'ARRAY')} ) {
        push( @{$List_a}, $List_v->[$x] )
    };
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                    }
                    else {
                        if ((Main::isa($ast, 'Lookup'))) {
                            ((my  $var_js) = $ast->emit_javascript());
                            (my  $type);
                            ((my  $var) = $ast->obj());
                            if (((Main::isa($var, 'Var') && ($var->sigil() eq chr(36))))) {
                                ($type = 'HASH')
                            }
                            else {
                                ($type = 'HASHREF')
                            };
                            return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    ($List_v = (autovivify($var, $type)));
    for my $x ( @{(bless [0 .. ((scalar( @{$List_v} ) - 1))], 'ARRAY')} ) {
        push( @{$List_a}, $List_v->[$x] )
    };
    push( @{$List_a}, ('if (' . $var_js . ' ' . chr(61) . chr(61) . ' null) ' . chr(123) . ' ' . $var_js . ' ' . chr(61) . ' ' . $str_init . ' ' . chr(125) . chr(59) . ' ') );
    $List_a
}))
                        }
                    }
                }
            };
            return ((do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    $List_a
}))
        }
    }

;
    {
    package Perlito5::Javascript::LexicalBlock;
        sub new { shift; bless { @_ }, "Perlito5::Javascript::LexicalBlock" }
        sub block { $_[0]->{block} };
        sub needs_return { $_[0]->{needs_return} };
        sub top_level { $_[0]->{top_level} };
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            if (($self->{top_level})) {
                ((my  $block) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->block()), ('needs_return' => $self->needs_return()), ('top_level' => 0)));
                return ((Javascript::tab($level) . 'try ' . chr(123) . (chr(10)) . $block->emit_javascript_indented(($level + 1)) . chr(59) . (chr(10)) . Javascript::tab($level) . chr(125) . (chr(10)) . Javascript::tab($level) . 'catch(err) ' . chr(123) . (chr(10)) . Javascript::tab(($level + 1)) . 'if ( err instanceof Error ) ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'throw(err)' . chr(59) . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . Javascript::tab(($level + 1)) . 'else ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'return(err)' . chr(59) . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . Javascript::tab($level) . chr(125)))
            };
            (my  $List_block = bless [], 'ARRAY');
            for ( @{($self->{block})} ) {
                if ((defined($_))) {
                    push( @{$List_block}, $_ )
                }
            };
            if ((!($List_block))) {
                return ((Javascript::tab($level) . 'null' . chr(59)))
            };
            (my  $List_str = bless [], 'ARRAY');
            for my $decl ( @{$List_block} ) {
                if (((Main::isa($decl, 'Decl') && ($decl->decl() eq 'my')))) {
                    push( @{$List_str}, (Javascript::tab($level) . $decl->emit_javascript_init()) )
                };
                if (((Main::isa($decl, 'Apply') && ($decl->code() eq 'infix:<' . chr(61) . '>')))) {
                    ((my  $var) = $decl->arguments()->[0]);
                    if (((Main::isa($var, 'Decl') && ($var->decl() eq 'my')))) {
                        push( @{$List_str}, (Javascript::tab($level) . $var->emit_javascript_init()) )
                    }
                }
            };
            (my  $last_statement);
            if (($self->{needs_return})) {
                ($last_statement = pop( @{$List_block} ))
            };
            for my $decl ( @{$List_block} ) {
                if ((!(((Main::isa($decl, 'Decl') && ($decl->decl() eq 'my')))))) {
                    push( @{$List_str}, ($decl->emit_javascript_indented($level) . chr(59)) )
                }
            };
            if ((($self->{needs_return} && $last_statement))) {
                if ((Main::isa($last_statement, 'If'))) {
                    ((my  $cond) = $last_statement->cond());
                    ((my  $body) = $last_statement->body());
                    ((my  $otherwise) = $last_statement->otherwise());
                    if (((Main::isa($cond, 'Var') && ($cond->sigil() eq chr(64))))) {
                        ($cond = Apply->new(('code' => 'prefix:<' . chr(64) . '>'), ('arguments' => (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $cond );
    $List_a
}))))
                    };
                    ($body = Perlito5::Javascript::LexicalBlock->new(('block' => $body->stmts()), ('needs_return' => 1)));
                    push( @{$List_str}, (Javascript::tab($level) . 'if ( ' . ('bool') . '(' . $cond->emit_javascript() . ') ) ' . chr(123) . ' return (function () ' . chr(123) . (chr(10)) . $body->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')()' . chr(59) . ' ' . chr(125)) );
                    if (($otherwise)) {
                        ($otherwise = Perlito5::Javascript::LexicalBlock->new(('block' => $otherwise->stmts()), ('needs_return' => 1)));
                        push( @{$List_str}, (Javascript::tab($level) . 'else ' . chr(123) . ' return (function () ' . chr(123) . (chr(10)) . $otherwise->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')()' . chr(59) . ' ' . chr(125)) )
                    }
                }
                else {
                    if ((((Main::isa($last_statement, 'Apply') && ($last_statement->code() eq 'return')) || Main::isa($last_statement, 'For')) || Main::isa($last_statement, 'While'))) {
                        push( @{$List_str}, $last_statement->emit_javascript_indented($level) )
                    }
                    else {
                        push( @{$List_str}, (Javascript::tab($level) . 'return(' . $last_statement->emit_javascript() . ')') )
                    }
                }
            };
            return ((join((chr(10)), @{$List_str}) . chr(59)))
        }
    }

;
    {
    package CompUnit;
        sub new { shift; bless { @_ }, "CompUnit" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = $List__->[0]);
            $self->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = $List__->[0]);
            ((my  $level) = $List__->[1]);
            (my  $List_body = bless [], 'ARRAY');
            ((my  $i) = 0);
            for ( ; (($i <= scalar( @{($self->{body})} )));  ) {
                ((my  $stmt) = $self->{body}->[$i]);
                if (((Main::isa($stmt, 'Apply') && ($stmt->code() eq 'package')))) {
                    ((my  $name) = $stmt->namespace());
                    (my  $List_stmts = bless [], 'ARRAY');
                    ($i)++;
                    for ( ; ((($i <= scalar( @{($self->{body})} )) && !(((Main::isa($self->{body}->[$i], 'Apply') && ($self->{body}->[$i]->code() eq 'package'))))));  ) {
                        push( @{$List_stmts}, $self->{body}->[$i] );
                        ($i)++
                    };
                    push( @{$List_body}, CompUnit->new(('name' => $name), ('body' => $List_stmts)) )
                }
                else {
                    push( @{$List_body}, $stmt );
                    ($i)++
                }
            };
            ((my  $class_name) = Main::to_javascript_namespace($self->{name}));
            ((my  $str) = (chr(47) . chr(47) . ' class ' . $self->{name} . (chr(10)) . 'if (typeof ' . $class_name . ' ' . chr(33) . chr(61) . chr(61) . ' ' . chr(39) . 'object' . chr(39) . ') ' . chr(123) . (chr(10)) . '  ' . $class_name . ' ' . chr(61) . ' function() ' . chr(123) . chr(125) . chr(59) . (chr(10)) . '  ' . $class_name . ' ' . chr(61) . ' new ' . $class_name . chr(59) . (chr(10)) . '  ' . $class_name . '.' . ('isa') . ' ' . chr(61) . ' function (s) ' . chr(123) . ' return s ' . chr(61) . chr(61) . ' ' . chr(39) . $self->{name} . chr(39) . chr(59) . ' ' . chr(125) . chr(59) . (chr(10)) . '  ' . $class_name . '.' . ('ref') . ' ' . chr(61) . ' function (s) ' . chr(123) . ' return ' . chr(39) . $self->{name} . chr(39) . chr(59) . ' ' . chr(125) . chr(59) . (chr(10)) . chr(125) . (chr(10)) . '(function () ' . chr(123) . (chr(10)) . '  var v__NAMESPACE ' . chr(61) . ' ' . $class_name . chr(59) . (chr(10))));
            for my $decl ( @{$List_body} ) {
                if (((Main::isa($decl, 'Decl') && (($decl->decl() eq 'my'))))) {
                    ($str = ($str . '  ' . $decl->emit_javascript_init()))
                };
                if (((Main::isa($decl, 'Apply') && ($decl->code() eq 'infix:<' . chr(61) . '>')))) {
                    ((my  $var) = $decl->arguments()->[0]);
                    if (((Main::isa($var, 'Decl') && ($var->decl() eq 'my')))) {
                        ($str = ($str . '  ' . $var->emit_javascript_init()))
                    }
                }
            };
            for my $decl ( @{$List_body} ) {
                if (((Main::isa($decl, 'Decl') && (($decl->decl() eq 'has'))))) {
                    ($str = ($str . '  ' . chr(47) . chr(47) . ' accessor ' . $decl->var()->name() . (chr(10)) . '  ' . $class_name . '.v_' . $decl->var()->name() . ' ' . chr(61) . ' null' . chr(59) . (chr(10)) . '  ' . $class_name . '.' . ($decl->var()->name()) . ' ' . chr(61) . ' function () ' . chr(123) . ' return this.v_' . $decl->var()->name() . chr(59) . ' ' . chr(125) . chr(59) . (chr(10))))
                };
                if ((Main::isa($decl, 'Sub'))) {
                    ((my  $sig) = $decl->sig());
                    ((my  $pos) = $sig->positional());
                    ((my  $block) = Perlito5::Javascript::LexicalBlock->new(('block' => $decl->block()), ('needs_return' => 1), ('top_level' => 1)));
                    ($str = ($str . '  ' . chr(47) . chr(47) . ' sub ' . $decl->name() . (chr(10)) . '  ' . $class_name . '.' . ($decl->name()) . ' ' . chr(61) . ' function (' . join(', ', @{[map($_->emit_javascript(), @{($pos)})]}) . ') ' . chr(123) . (chr(10)) . Javascript::tab(($level + 1)) . 'var List__ ' . chr(61) . ' Array.prototype.slice.call(arguments)' . chr(59) . (chr(10)) . Javascript::tab(($level + 1)) . 'if (List__[0] instanceof CallSubClass) ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'List__.shift()' . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . Javascript::tab(($level + 1)) . 'else ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'List__.unshift(this)' . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . $block->emit_javascript_indented(($level + 1)) . (chr(10)) . '  ' . chr(125) . (chr(10)) . '  ' . $class_name . '.' . ($decl->name()) . chr(59) . '  ' . chr(47) . chr(47) . ' v8 bug workaround' . (chr(10))))
                }
            };
            for my $decl ( @{$List_body} ) {
                if ((((defined($decl) && (!(((Main::isa($decl, 'Decl') && (((($decl->decl() eq 'has')) || (($decl->decl() eq 'my'))))))))) && (!((Main::isa($decl, 'Sub'))))))) {
                    ($str = ($str . ($decl)->emit_javascript_indented(($level + 1)) . (chr(59) . chr(10))))
                }
            };
            ($str = ($str . chr(125) . ')()' . (chr(10))))
        };
        sub emit_javascript_program {
            my $List__ = bless \@_, "ARRAY";
            ((my  $comp_units) = shift());
            ((my  $str) = '');
            for my $comp_unit ( @{($comp_units)} ) {
                ($str = ($str . $comp_unit->emit_javascript() . (chr(10))))
            };
            return ($str)
        }
    }

;
    {
    package Val::Int;
        sub new { shift; bless { @_ }, "Val::Int" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . $self->{int})
        }
    }

;
    {
    package Val::Bit;
        sub new { shift; bless { @_ }, "Val::Bit" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . (($self->{bit} ? 'true' : 'false')))
        }
    }

;
    {
    package Val::Num;
        sub new { shift; bless { @_ }, "Val::Num" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . $self->{num})
        }
    }

;
    {
    package Val::Buf;
        sub new { shift; bless { @_ }, "Val::Buf" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . Javascript::escape_string($self->{buf}))
        }
    }

;
    {
    package Lit::Block;
        sub new { shift; bless { @_ }, "Lit::Block" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $sig) = 'v__');
            if (($self->{sig})) {
                ($sig = $self->{sig}->emit_javascript_indented(($level + 1)))
            };
            return ((Javascript::tab($level) . ('(function (' . $sig . ') ' . chr(123) . chr(10)) . (Perlito5::Javascript::LexicalBlock->new(('block' => $self->{stmts}), ('needs_return' => 1)))->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')'))
        }
    }

;
    {
    package Lit::Array;
        sub new { shift; bless { @_ }, "Lit::Array" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $ast) = $self->expand_interpolation());
            return ($ast->emit_javascript_indented($level))
        }
    }

;
    {
    package Lit::Hash;
        sub new { shift; bless { @_ }, "Lit::Hash" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $ast) = $self->expand_interpolation());
            return ($ast->emit_javascript_indented($level))
        }
    }

;
    {
    package Index;
        sub new { shift; bless { @_ }, "Index" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            if (((Main::isa($self->{obj}, 'Var') && ($self->{obj}->sigil() eq chr(36))))) {
                ((my  $v) = Var->new(('sigil' => chr(64)), ('twigil' => $self->{obj}->twigil()), ('namespace' => $self->{obj}->namespace()), ('name' => $self->{obj}->name())));
                return (($v->emit_javascript_indented($level) . '[' . $self->{index_exp}->emit_javascript() . ']'))
            };
            (Javascript::tab($level) . $self->{obj}->emit_javascript() . '[' . $self->{index_exp}->emit_javascript() . ']')
        }
    }

;
    {
    package Lookup;
        sub new { shift; bless { @_ }, "Lookup" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            if ((((Main::isa($self->{obj}, 'Var') && ($self->{obj}->sigil() eq chr(36))) && ($self->{obj}->name() ne 'MATCH')))) {
                ((my  $v) = Var->new(('sigil' => chr(37)), ('twigil' => $self->{obj}->twigil()), ('namespace' => $self->{obj}->namespace()), ('name' => $self->{obj}->name())));
                return (($v->emit_javascript_indented($level) . '[' . $self->{index_exp}->emit_javascript() . ']'))
            };
            return (($self->{obj}->emit_javascript_indented($level) . '[' . $self->{index_exp}->emit_javascript() . ']'))
        }
    }

;
    {
    package Var;
        sub new { shift; bless { @_ }, "Var" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $table) = (do {
    (my  $Hash_a = bless {}, 'HASH');
    ($Hash_a->{chr(36)} = 'v_');
    ($Hash_a->{chr(64)} = 'List_');
    ($Hash_a->{chr(37)} = 'Hash_');
    ($Hash_a->{chr(38)} = 'Code_');
    $Hash_a
}));
            ((my  $ns) = '');
            if (($self->{namespace})) {
                ($ns = (Main::to_javascript_namespace($self->{namespace}) . '.'))
            };
            ((($self->{twigil} eq '.')) ? (('v_self.v_' . $self->{name} . '')) : (($table->{$self->{sigil}} . $ns . $self->{name})))
        };
        sub plain_name {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            if (($self->namespace())) {
                return (($self->namespace() . '.' . $self->name()))
            };
            return ($self->name())
        }
    }

;
    {
    package Proto;
        sub new { shift; bless { @_ }, "Proto" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . Main::to_javascript_namespace($self->{name}))
        }
    }

;
    {
    package Call;
        sub new { shift; bless { @_ }, "Call" }
        ((my  $Hash_method_js = bless {}, 'HASH') = (do {
    (my  $Hash_a = bless {}, 'HASH');
    ($Hash_a->{'isa'} = 'isa');
    $Hash_a
}));
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $invocant) = $self->{invocant}->emit_javascript());
            if ((($self->{method} eq 'new'))) {
                ((my  $str) = (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    $List_a
}));
                for my $field ( @{($self->{arguments})} ) {
                    if (((Main::isa($field, 'Apply') && ($field->code() eq 'infix:<' . chr(61) . '>>')))) {
                        push( @{($str)}, ('v_' . $field->arguments()->[0]->buf() . ': ' . $field->arguments()->[1]->emit_javascript()) )
                    }
                    else {
                        die('Error in constructor, field: ', $field)
                    }
                };
                return (('(function () ' . chr(123) . ' ' . 'if (' . Main::to_javascript_namespace($invocant) . '.hasOwnProperty(' . chr(34) . 'new' . chr(34) . ') ) ' . chr(123) . ' ' . 'return ' . $invocant . '.new(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')' . chr(59) . ' ' . chr(125) . ' ' . 'var tmp ' . chr(61) . ' ' . chr(123) . join(',', @{($str)}) . chr(125) . chr(59) . ' ' . 'tmp.__proto__ ' . chr(61) . ' ' . Main::to_javascript_namespace($invocant) . chr(59) . ' ' . 'return tmp' . chr(59) . ' ' . chr(125) . ')()'))
            };
            if ((exists($Hash_method_js->{$self->{method}}))) {
                return ((($self->{method}) . '(' . $invocant . ((($self->{arguments}) ? (', ' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]})) : '')) . ')'))
            };
            ((my  $meth) = $self->{method});
            if ((($self->{method} eq 'postcircumfix:<[ ]>'))) {
                return ((Javascript::tab($level) . $invocant . '[' . $self->{arguments}->emit_javascript() . ']'))
            };
            if ((($self->{method} eq 'postcircumfix:<' . chr(123) . ' ' . chr(125) . '>'))) {
                return ((Javascript::tab($level) . $invocant . '[' . $self->{arguments}->emit_javascript() . ']'))
            };
            if ((($meth eq 'postcircumfix:<( )>'))) {
                return (('(' . $invocant . ')(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            ((my  $List_args = bless [], 'ARRAY') = (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $invocant );
    $List_a
}));
            for ( @{($self->{arguments})} ) {
                push( @{$List_args}, $_->emit_javascript() )
            };
            return ((Javascript::tab($level) . '(' . 'typeof(' . $invocant . '.__proto__) ' . chr(33) . chr(61) . ' ' . chr(39) . 'undefined' . chr(39) . ' ' . chr(38) . chr(38) . ' ' . $invocant . '.__proto__.hasOwnProperty(' . chr(34) . ($meth) . chr(34) . ') ' . chr(63) . ' ' . $invocant . '.__proto__.' . ($meth) . '.call(' . join(',', @{$List_args}) . ') ' . ': ' . $invocant . '.' . ($meth) . '(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')' . ')'))
        }
    }

;
    {
    package Apply;
        sub new { shift; bless { @_ }, "Apply" }
        ((my  $Hash_op_infix_js = bless {}, 'HASH') = (do {
    (my  $Hash_a = bless {}, 'HASH');
    ($Hash_a->{'infix:<->'} = ' - ');
    ($Hash_a->{'infix:<*>'} = ' * ');
    ($Hash_a->{'infix:<' . chr(47) . '>'} = ' ' . chr(47) . ' ');
    ($Hash_a->{'infix:<>>'} = ' > ');
    ($Hash_a->{'infix:<<>'} = ' < ');
    ($Hash_a->{'infix:<>' . chr(61) . '>'} = ' >' . chr(61) . ' ');
    ($Hash_a->{'infix:<<' . chr(61) . '>'} = ' <' . chr(61) . ' ');
    ($Hash_a->{'infix:<eq>'} = ' ' . chr(61) . chr(61) . ' ');
    ($Hash_a->{'infix:<ne>'} = ' ' . chr(33) . chr(61) . ' ');
    ($Hash_a->{'infix:<le>'} = ' <' . chr(61) . ' ');
    ($Hash_a->{'infix:<ge>'} = ' >' . chr(61) . ' ');
    ($Hash_a->{'infix:<' . chr(61) . chr(61) . '>'} = ' ' . chr(61) . chr(61) . ' ');
    ($Hash_a->{'infix:<' . chr(33) . chr(61) . '>'} = ' ' . chr(33) . chr(61) . ' ');
    $Hash_a
}));
        ((my  $Hash_op_global_js = bless {}, 'HASH') = (do {
    (my  $Hash_a = bless {}, 'HASH');
    ($Hash_a->{'bless'} = 1);
    ($Hash_a->{'ref'} = 1);
    $Hash_a
}));
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $apply) = $self->op_assign());
            if (($apply)) {
                return ($apply->emit_javascript_indented($level))
            };
            ((my  $code) = $self->{code});
            if ((ref(($code ne '')))) {
                return ((Javascript::tab($level) . '(' . $self->{code}->emit_javascript() . ')->(' . join(',', @{[map($_->emit(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'infix:<' . chr(61) . '>>'))) {
                return ((Javascript::tab($level) . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]})))
            };
            if ((exists($Hash_op_infix_js->{$code}))) {
                return ((Javascript::tab($level) . '(' . join($Hash_op_infix_js->{$code}, @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'eval'))) {
                return (('eval(perl5_to_js(' . ('string') . '(' . ($self->{arguments}->[0])->emit_javascript() . ')' . '))'))
            };
            if ((($code eq 'undef'))) {
                return ((Javascript::tab($level) . 'null'))
            };
            if ((($code eq 'defined'))) {
                return ((Javascript::tab($level) . '(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ' ' . chr(33) . chr(61) . ' null)'))
            };
            if ((($code eq 'substr'))) {
                return (('(' . ($self->{arguments}->[0])->emit_javascript() . ' ' . chr(124) . chr(124) . ' ' . chr(34) . chr(34) . ').substr(' . ($self->{arguments}->[1])->emit_javascript() . ((defined($self->{arguments}->[2]) ? (', ' . ($self->{arguments}->[2])->emit_javascript()) : '')) . ')'))
            };
            if ((($code eq 'shift'))) {
                if ((($self->{arguments}))) {
                    return (('CORE.shift(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
                };
                return ('CORE.shift(List__)')
            };
            if ((($code eq 'map'))) {
                ((my  $fun) = $self->{arguments}->[0]);
                ((my  $list) = $self->{arguments}->[1]);
                return (('(function (a_) ' . chr(123) . ' ' . 'var out ' . chr(61) . ' []' . chr(59) . ' ' . 'if ( a_ ' . chr(61) . chr(61) . ' null ) ' . chr(123) . ' return out' . chr(59) . ' ' . chr(125) . chr(59) . ' ' . 'for(var i ' . chr(61) . ' 0' . chr(59) . ' i < a_.length' . chr(59) . ' i++) ' . chr(123) . ' ' . 'var v__ ' . chr(61) . ' a_[i]' . chr(59) . ' ' . 'out.push(' . $fun->emit_javascript() . ')' . chr(125) . chr(59) . ' ' . 'return out' . chr(59) . ' ' . chr(125) . ')(' . $list->emit_javascript() . ')'))
            };
            if ((($code eq 'chr'))) {
                return (('String.fromCharCode(' . ('num') . '(' . ($self->{arguments}->[0])->emit_javascript() . '))'))
            };
            if ((($code eq 'ord'))) {
                return (('(' . ($self->{arguments}->[0])->emit_javascript() . ').charCodeAt(0)'))
            };
            if ((($code eq 'Int'))) {
                return (('parseInt(' . ($self->{arguments}->[0])->emit_javascript() . ')'))
            };
            if ((($code eq 'Num'))) {
                return (('parseFloat(' . ($self->{arguments}->[0])->emit_javascript() . ')'))
            };
            if ((($code eq 'prefix:<' . chr(33) . '>'))) {
                return (('( ' . ('bool') . '(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ') ' . chr(63) . ' false : true)'))
            };
            if ((($code eq 'prefix:<' . chr(63) . '>'))) {
                return (('( ' . ('bool') . '(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ') ' . chr(63) . ' true : false)'))
            };
            if ((($code eq 'prefix:<' . chr(36) . '>'))) {
                return ((('scalar') . '(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'prefix:<' . chr(64) . '>'))) {
                return (('(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'prefix:<' . chr(37) . '>'))) {
                return (('(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ').' . ('hash') . '()'))
            };
            if ((($code eq 'prefix:<' . chr(92) . '>'))) {
                return (join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}))
            };
            if ((($code eq 'postfix:<++>'))) {
                return (('(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')++'))
            };
            if ((($code eq 'postfix:<-->'))) {
                return (('(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')--'))
            };
            if ((($code eq 'prefix:<++>'))) {
                return (('++(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'prefix:<-->'))) {
                return (('--(' . join(' ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'infix:<x>'))) {
                return (('str_replicate(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'list:<.>'))) {
                return (('(' . ('string') . '(' . join((') + ' . ('string') . '('), @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . '))'))
            };
            if ((($code eq 'infix:<+>'))) {
                return ((('add') . '(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'prefix:<+>'))) {
                return (('(' . $self->{arguments}->[0]->emit_javascript() . ')'))
            };
            if ((($code eq 'infix:<..>'))) {
                return (('(function (a) ' . chr(123) . ' ' . 'for (var i' . chr(61) . $self->{arguments}->[0]->emit_javascript() . ', l' . chr(61) . $self->{arguments}->[1]->emit_javascript() . chr(59) . ' ' . 'i<' . chr(61) . 'l' . chr(59) . ' ++i)' . chr(123) . ' ' . 'a.push(i) ' . chr(125) . chr(59) . ' ' . 'return a ' . chr(125) . ')([])'))
            };
            if ((($code eq 'infix:<' . chr(38) . chr(38) . '>') || ($code eq 'infix:<and>'))) {
                return ((('and') . '(' . $self->{arguments}->[0]->emit_javascript() . ', ' . 'function () ' . chr(123) . ' return ' . $self->{arguments}->[1]->emit_javascript() . chr(59) . ' ' . chr(125) . ')'))
            };
            if ((($code eq 'infix:<' . chr(124) . chr(124) . '>') || ($code eq 'infix:<or>'))) {
                return ((('or') . '(' . $self->{arguments}->[0]->emit_javascript() . ', ' . 'function () ' . chr(123) . ' return ' . $self->{arguments}->[1]->emit_javascript() . chr(59) . ' ' . chr(125) . ')'))
            };
            if ((($code eq 'infix:<' . chr(47) . chr(47) . '>'))) {
                return ((('defined_or') . '(' . $self->{arguments}->[0]->emit_javascript() . ', ' . 'function () ' . chr(123) . ' return ' . $self->{arguments}->[1]->emit_javascript() . chr(59) . ' ' . chr(125) . ')'))
            };
            if ((($code eq 'exists'))) {
                ((my  $arg) = $self->{arguments}->[0]);
                if ((Main::isa($arg, 'Lookup'))) {
                    ((my  $v) = $arg->obj());
                    if ((((Main::isa($v, 'Var') && ($v->sigil() eq chr(36))) && ($v->name() ne 'MATCH')))) {
                        ($v = Var->new(('sigil' => chr(37)), ('twigil' => $v->twigil()), ('namespace' => $v->namespace()), ('name' => $v->name())))
                    };
                    return (('(' . $v->emit_javascript() . ').hasOwnProperty(' . ($arg->index_exp())->emit_javascript() . ')'))
                };
                if (((Main::isa($arg, 'Call') && ($arg->method() eq 'postcircumfix:<' . chr(123) . ' ' . chr(125) . '>')))) {
                    return (('(' . $arg->invocant()->emit_javascript() . ').hasOwnProperty(' . $arg->arguments()->emit_javascript() . ')'))
                }
            };
            if ((($code eq 'ternary:<' . chr(63) . chr(63) . ' ' . chr(33) . chr(33) . '>'))) {
                return ((Javascript::tab($level) . '( ' . ('bool') . '(' . ($self->{arguments}->[0])->emit_javascript() . ')' . ' ' . chr(63) . ' ' . ($self->{arguments}->[1])->emit_javascript() . ' : ' . ($self->{arguments}->[2])->emit_javascript() . ')'))
            };
            if ((($code eq 'circumfix:<( )>'))) {
                return ((Javascript::tab($level) . '(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
            };
            if ((($code eq 'infix:<' . chr(61) . '>'))) {
                return (emit_javascript_bind($self->{arguments}->[0], $self->{arguments}->[1], $level))
            };
            if ((($code eq 'return'))) {
                return ((Javascript::tab($level) . 'throw(' . ((($self->{arguments}) ? $self->{arguments}->[0]->emit_javascript() : 'null')) . ')'))
            };
            if (($self->{namespace})) {
                ($code = (Main::to_javascript_namespace($self->{namespace}) . '.' . ($code)))
            }
            else {
                if ((!(exists($Hash_op_global_js->{$code})))) {
                    ($code = ('(v__NAMESPACE.hasOwnProperty(' . chr(34) . ($code) . chr(34) . ') ' . chr(63) . ' v__NAMESPACE.' . ($code) . ' ' . ': CORE.' . ($code) . ')'))
                }
                else {
                    ($code = ($self->{code}));
                    return ((Javascript::tab($level) . $code . '(' . join(', ', @{[map($_->emit_javascript(), @{($self->{arguments})})]}) . ')'))
                }
            };
            ((my  $List_args = bless [], 'ARRAY') = (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, 'CallSub' );
    $List_a
}));
            for ( @{($self->{arguments})} ) {
                push( @{$List_args}, $_->emit_javascript() )
            };
            (Javascript::tab($level) . $code . '(' . join(', ', @{$List_args}) . ')')
        };
        sub emit_javascript_bind {
            my $List__ = bless \@_, "ARRAY";
            ((my  $parameters) = shift());
            ((my  $arguments) = shift());
            ((my  $level) = shift());
            if ((Main::isa($parameters, 'Call'))) {
                if ((($parameters->method() eq 'postcircumfix:<[ ]>'))) {
                    ((my  $str) = '');
                    ((my  $var_js) = $parameters->invocant()->emit_javascript());
                    ((my  $auto) = Javascript::autovivify($parameters, 'ARRAYREF'));
                    pop( @{($auto)} );
                    ($str = ($str . join('', @{($auto)})));
                    ((my  $index_js) = $parameters->arguments()->emit_javascript());
                    ($str = ($str . 'return (' . $var_js . '[' . $index_js . '] ' . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')' . chr(59) . ' '));
                    return ((Javascript::tab($level) . '(function () ' . chr(123) . ' ' . $str . chr(125) . ')()'))
                };
                if ((($parameters->method() eq 'postcircumfix:<' . chr(123) . ' ' . chr(125) . '>'))) {
                    ((my  $str) = '');
                    ((my  $var_js) = $parameters->invocant()->emit_javascript());
                    ((my  $auto) = Javascript::autovivify($parameters, 'ARRAYREF'));
                    pop( @{($auto)} );
                    ($str = ($str . join('', @{($auto)})));
                    ((my  $index_js) = $parameters->arguments()->emit_javascript());
                    ($str = ($str . 'return (' . $var_js . '[' . $index_js . '] ' . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')' . chr(59) . ' '));
                    return ((Javascript::tab($level) . '(function () ' . chr(123) . ' ' . $str . chr(125) . ')()'))
                };
                return ((Javascript::tab($level) . '(' . ($parameters->invocant())->emit_javascript() . '.v_' . $parameters->method() . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')'))
            };
            if ((Main::isa($parameters, 'Lookup'))) {
                ((my  $str) = '');
                ((my  $var) = $parameters->obj());
                if ((((Main::isa($var, 'Var') && ($var->sigil() eq chr(36))) && ($var->name() ne 'MATCH')))) {
                    ($var = Var->new(('sigil' => chr(37)), ('twigil' => $var->twigil()), ('namespace' => $var->namespace()), ('name' => $var->name())))
                };
                ((my  $var_js) = $var->emit_javascript());
                ((my  $auto) = Javascript::autovivify($parameters, 'ARRAYREF'));
                pop( @{($auto)} );
                ($str = ($str . join('', @{($auto)})));
                ((my  $index_js) = $parameters->index_exp()->emit_javascript());
                ($str = ($str . 'return (' . $var_js . '[' . $index_js . '] ' . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')' . chr(59) . ' '));
                return ((Javascript::tab($level) . '(function () ' . chr(123) . ' ' . $str . chr(125) . ')()'))
            };
            if ((Main::isa($parameters, 'Index'))) {
                ((my  $str) = '');
                ((my  $var) = $parameters->obj());
                if (((Main::isa($var, 'Var') && ($var->sigil() eq chr(36))))) {
                    ($var = Var->new(('sigil' => chr(64)), ('twigil' => $var->twigil()), ('namespace' => $var->namespace()), ('name' => $var->name())))
                };
                ((my  $var_js) = $var->emit_javascript());
                ((my  $auto) = Javascript::autovivify($parameters, 'ARRAYREF'));
                pop( @{($auto)} );
                ($str = ($str . join('', @{($auto)})));
                ((my  $index_js) = $parameters->index_exp()->emit_javascript());
                ($str = ($str . 'return (' . $var_js . '[' . $index_js . '] ' . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')' . chr(59) . ' '));
                return ((Javascript::tab($level) . '(function () ' . chr(123) . ' ' . $str . chr(125) . ')()'))
            };
            if (((Main::isa($parameters, 'Var') && ($parameters->sigil() eq chr(64))) || (Main::isa($parameters, 'Decl') && ($parameters->var()->sigil() eq chr(64))))) {
                ($arguments = Lit::Array->new(('array1' => (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $arguments );
    $List_a
}))));
                return ((Javascript::tab($level) . '(' . $parameters->emit_javascript() . ' ' . chr(61) . ' (' . $arguments->emit_javascript() . ').slice())'))
            }
            else {
                if (((Main::isa($parameters, 'Var') && ($parameters->sigil() eq chr(37))) || (Main::isa($parameters, 'Decl') && ($parameters->var()->sigil() eq chr(37))))) {
                    ($arguments = Lit::Hash->new(('hash1' => (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $arguments );
    $List_a
}))));
                    return ((Javascript::tab($level) . '(' . $parameters->emit_javascript() . ' ' . chr(61) . ' (function (_h) ' . chr(123) . ' ' . 'var _tmp ' . chr(61) . ' ' . chr(123) . chr(125) . chr(59) . ' ' . 'for (var _i in _h) ' . chr(123) . ' ' . '_tmp[_i] ' . chr(61) . ' _h[_i]' . chr(59) . ' ' . chr(125) . chr(59) . ' ' . 'return _tmp' . chr(59) . ' ' . chr(125) . ')( ' . $arguments->emit_javascript() . '))'))
                }
            };
            (Javascript::tab($level) . '(' . $parameters->emit_javascript() . ' ' . chr(61) . ' ' . $arguments->emit_javascript() . ')')
        }
    }

;
    {
    package If;
        sub new { shift; bless { @_ }, "If" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $cond) = $self->{cond});
            if (((Main::isa($cond, 'Var') && ($cond->sigil() eq chr(64))))) {
                ($cond = Apply->new(('code' => 'prefix:<' . chr(64) . '>'), ('arguments' => (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $cond );
    $List_a
}))))
            };
            ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{body}->stmts()), ('needs_return' => 0)));
            ((my  $s) = (Javascript::tab($level) . 'if ( ' . ('bool') . '(' . $cond->emit_javascript() . ') ) ' . chr(123) . ' ' . '(function () ' . chr(123) . (chr(10)) . $body->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')()' . chr(59) . ' ' . chr(125)));
            if (($self->{otherwise}->stmts())) {
                ((my  $otherwise) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{otherwise}->stmts()), ('needs_return' => 0)));
                ($s = ($s . (chr(10)) . Javascript::tab($level) . 'else ' . chr(123) . ' ' . '(function () ' . chr(123) . (chr(10)) . $otherwise->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')()' . chr(59) . ' ' . chr(125)))
            };
            return ($s)
        }
    }

;
    {
    package While;
        sub new { shift; bless { @_ }, "While" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{body}->stmts()), ('needs_return' => 0)));
            return ((Javascript::tab($level) . 'for ( ' . (($self->{init} ? ($self->{init}->emit_javascript() . chr(59) . ' ') : chr(59) . ' ')) . (($self->{cond} ? (('bool') . '(' . $self->{cond}->emit_javascript() . ')' . chr(59) . ' ') : chr(59) . ' ')) . (($self->{continue} ? ($self->{continue}->emit_javascript() . ' ') : ' ')) . ') ' . chr(123) . ' ' . '(function () ' . chr(123) . ' ' . $body->emit_javascript_indented(($level + 1)) . ' ' . chr(125) . ')()' . ' ' . chr(125)))
        }
    }

;
    {
    package For;
        sub new { shift; bless { @_ }, "For" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $cond) = $self->{cond});
            if ((!(((Main::isa($cond, 'Var') && ($cond->sigil() eq chr(64))))))) {
                ($cond = Lit::Array->new(('array1' => (do {
    (my  $List_a = bless [], 'ARRAY');
    (my  $List_v = bless [], 'ARRAY');
    push( @{$List_a}, $cond );
    $List_a
}))))
            };
            ((my  $body) = Perlito5::Javascript::LexicalBlock->new(('block' => $self->{body}->stmts()), ('needs_return' => 0)));
            ((my  $sig) = 'v__');
            if (($self->{body}->sig())) {
                ($sig = $self->{body}->sig()->emit_javascript_indented(($level + 1)))
            };
            (Javascript::tab($level) . '(function (a_) ' . chr(123) . ' for (var i_ ' . chr(61) . ' 0' . chr(59) . ' i_ < a_.length ' . chr(59) . ' i_++) ' . chr(123) . ' ' . ('(function (' . $sig . ') ' . chr(123) . ' ') . $body->emit_javascript_indented(($level + 1)) . ' ' . chr(125) . ')(a_[i_]) ' . chr(125) . ' ' . chr(125) . ')' . '(' . $cond->emit_javascript() . ')')
        }
    }

;
    {
    package Decl;
        sub new { shift; bless { @_ }, "Decl" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . $self->{var}->emit_javascript())
        };
        sub emit_javascript_init {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            if ((($self->{decl} eq 'my'))) {
                ((my  $str) = '');
                ($str = ($str . 'var ' . ($self->{var})->emit_javascript() . ' ' . chr(61) . ' '));
                if ((($self->{var})->sigil() eq chr(37))) {
                    ($str = ($str . chr(123) . chr(125) . chr(59) . (chr(10))))
                }
                else {
                    if ((($self->{var})->sigil() eq chr(64))) {
                        ($str = ($str . '[]' . chr(59) . (chr(10))))
                    }
                    else {
                        ($str = ($str . 'null' . chr(59) . (chr(10))))
                    }
                };
                return ($str)
            }
            else {
                die(('not implemented: Decl ' . chr(39) . $self->{decl} . (chr(39))))
            }
        }
    }

;
    {
    package Sub;
        sub new { shift; bless { @_ }, "Sub" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $sig) = $self->{sig});
            ((my  $pos) = $sig->positional());
            ((my  $str) = join(', ', @{[map($_->emit_javascript(), @{($pos)})]}));
            (Javascript::tab($level) . 'function ' . $self->{name} . '(' . $str . ') ' . chr(123) . (chr(10)) . Javascript::tab(($level + 1)) . 'var List__ ' . chr(61) . ' Array.prototype.slice.call(arguments)' . chr(59) . (chr(10)) . Javascript::tab(($level + 1)) . 'if (List__[0] instanceof CallSubClass) ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'List__.shift()' . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . Javascript::tab(($level + 1)) . 'else ' . chr(123) . (chr(10)) . Javascript::tab(($level + 2)) . 'List__.unshift(this)' . (chr(10)) . Javascript::tab(($level + 1)) . chr(125) . (chr(10)) . (Perlito5::Javascript::LexicalBlock->new(('block' => $self->{block}), ('needs_return' => 1), ('top_level' => 1)))->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125))
        }
    }

;
    {
    package Do;
        sub new { shift; bless { @_ }, "Do" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            ((my  $block) = $self->simplify()->block());
            return ((Javascript::tab($level) . '(function () ' . chr(123) . ' ' . (chr(10)) . (Perlito5::Javascript::LexicalBlock->new(('block' => $block), ('needs_return' => 1)))->emit_javascript_indented(($level + 1)) . (chr(10)) . Javascript::tab($level) . chr(125) . ')()'))
        }
    }

;
    {
    package Use;
        sub new { shift; bless { @_ }, "Use" }
        sub emit_javascript {
            my $List__ = bless \@_, "ARRAY";
            $List__->[0]->emit_javascript_indented(0)
        };
        sub emit_javascript_indented {
            my $List__ = bless \@_, "ARRAY";
            ((my  $self) = shift());
            ((my  $level) = shift());
            (Javascript::tab($level) . chr(47) . chr(47) . ' use ' . $self->{mod} . (chr(10)))
        }
    }


}

1;
