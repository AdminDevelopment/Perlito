# Do not edit this file - Generated by Perlito5 8.0
use v5;
use utf8;
use strict;
use warnings;
no warnings ('redefine', 'once', 'void', 'uninitialized', 'misc', 'recursion');
use Perlito5::Perl5::Runtime;
our $MATCH = Perlito5::Match->new();
package main;
use v5;
package Apply;
((my  %op) = (('infix:<+' . chr(61) . '>' => 'infix:<+>'), ('infix:<-' . chr(61) . '>' => 'infix:<->'), ('infix:<*' . chr(61) . '>' => 'infix:<*>'), ('infix:<' . chr(47) . chr(61) . '>' => 'infix:<' . chr(47) . '>'), ('infix:<' . chr(124) . chr(124) . chr(61) . '>' => 'infix:<' . chr(124) . chr(124) . '>'), ('infix:<' . chr(38) . chr(38) . chr(61) . '>' => 'infix:<' . chr(38) . chr(38) . '>'), ('infix:<' . chr(124) . chr(61) . '>' => 'infix:<' . chr(124) . '>'), ('infix:<' . chr(38) . chr(61) . '>' => 'infix:<' . chr(38) . '>'), ('infix:<' . chr(47) . chr(47) . chr(61) . '>' => 'infix:<' . chr(47) . chr(47) . '>'), ('infix:<.' . chr(61) . '>' => 'list:<.>')));
sub op_assign {
    ((my  $self) = $_[0]);
    ((my  $code) = $self->{('code')});
    if (ref($code)) {
        return (0)
    };
    if ((exists($op{$code}))) {
        return (Apply->new(('code' => 'infix:<' . chr(61) . '>'), ('arguments' => [    $self->{('arguments')}->[0],
    Apply->new(('code' => $op{$code}), ('arguments' => $self->{('arguments')}))])))
    };
    return (0)
};
package Do;
sub simplify {
    ((my  $self) = $_[0]);
    (my  $block);
    if (($self->{('block')}->isa('Lit::Block'))) {
        ($block = $self->{('block')}->stmts())
    }
    else {
        ($block = [    $self->{('block')}])
    };
    if (((scalar(@{$block}) == 1))) {
        ((my  $stmt) = $block->[0]);
        if ((($stmt->isa('Apply') && ($stmt->code() eq 'circumfix:<( )>')))) {
            ((my  $args) = $stmt->arguments());
            return (Do->new(('block' => $args->[0]))->simplify())
        };
        if (($stmt->isa('Do'))) {
            return ($stmt->simplify())
        }
    };
    return (Do->new(('block' => $block)))
};

1;
