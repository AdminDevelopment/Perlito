# Do not edit this file - Generated by Perlito5 9.0
use v5;
use Perlito5::Perl5::Runtime;
package main;
package Perlito5::Grammar::Use;
use Perlito5::Precedence;
use Perlito5::Grammar;
Perlito5::Precedence::add_term('no', sub {
    Perlito5::Grammar::Use->term_use($_[0], $_[1])
});
Perlito5::Precedence::add_term('use', sub {
    Perlito5::Grammar::Use->term_use($_[0], $_[1])
});
((my  %Perlito_internal_module) = ('strict', 'Perlito5::strict', 'warnings', 'Perlito5::warnings', 'utf8', 'Perlito5::utf8', 'bytes', 'Perlito5::bytes'));
sub Perlito5::Grammar::Use::use_decl {
    ((my  $grammar) = $_[0]);
    ((my  $str) = $_[1]);
    ((my  $pos) = $_[2]);
    ((my  $MATCH) = {'str', $str, 'from', $pos, 'to', $pos});
    ((my  $tmp) = (((do {
    ((my  $pos1) = $MATCH->{'to'});
    (((do {
    (('use' eq substr($str, $MATCH->{'to'}, 3)) && (($MATCH->{'to'} = (3 + $MATCH->{'to'}))))
})) || ((do {
    ($MATCH->{'to'} = $pos1);
    (((('no' eq substr($str, $MATCH->{'to'}, 2)) && (($MATCH->{'to'} = (2 + $MATCH->{'to'}))))))
})))
}))));
    ($tmp ? $MATCH : 0)
};
sub Perlito5::Grammar::Use::term_use {
    ((my  $grammar) = $_[0]);
    ((my  $str) = $_[1]);
    ((my  $pos) = $_[2]);
    ((my  $MATCH) = {'str', $str, 'from', $pos, 'to', $pos});
    ((my  $tmp) = (((do {
    ((my  $pos1) = $MATCH->{'to'});
    ((do {
    ((((do {
    ((my  $m2) = $grammar->use_decl($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        ($MATCH->{'use_decl'} = $m2);
        1
    }
    else {
        0
    }
})) && ((do {
    ((my  $m2) = Perlito5::Grammar::Space->ws($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        1
    }
    else {
        0
    }
}))) && ((do {
    ((my  $pos1) = $MATCH->{'to'});
    (((do {
    (((do {
    ((my  $m2) = Perlito5::Grammar->val_version($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        ($MATCH->{'Perlito5::Grammar.val_version'} = $m2);
        1
    }
    else {
        0
    }
})) && ((do {
    ($MATCH->{'capture'} = ['term', Perlito5::AST::Apply->new('code', 'undef', 'namespace', '', 'arguments', [])]);
;
    1
})))
})) || ((do {
    ($MATCH->{'to'} = $pos1);
    ((((((do {
    ((my  $m2) = Perlito5::Grammar->full_ident($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        ($MATCH->{'Perlito5::Grammar.full_ident'} = $m2);
        1
    }
    else {
        0
    }
})) && ((do {
    ((my  $m) = $MATCH);
    if (!(((do {
    ((my  $pos1) = $MATCH->{'to'});
    ((do {
    (((('-' eq substr($str, $MATCH->{'to'}, 1)) && (($MATCH->{'to'} = (1 + $MATCH->{'to'}))))) && ((do {
    ((my  $m2) = Perlito5::Grammar->ident($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        if (exists($MATCH->{'Perlito5::Grammar.ident'})) {
            push(@{$MATCH->{'Perlito5::Grammar.ident'}}, $m2 )
        }
        else {
            ($MATCH->{'Perlito5::Grammar.ident'} = [$m2])
        };
        1
    }
    else {
        0
    }
})))
}))
})))) {
        ($MATCH = $m)
    };
    1
}))) && ((do {
    ((my  $m2) = Perlito5::Expression->list_parse($str, $MATCH->{'to'}));
    if ($m2) {
        ($MATCH->{'to'} = $m2->{'to'});
        ($MATCH->{'Perlito5::Expression.list_parse'} = $m2);
        1
    }
    else {
        0
    }
}))) && ((do {
    ((my  $list) = Perlito5::Match::flat($MATCH->{'Perlito5::Expression.list_parse'})->{'exp'});
    if (($list eq '*undef*')) {
        ($list = undef())
    }
    else {
        ((my  $m) = $MATCH->{'Perlito5::Expression.list_parse'});
        ((my  $list_code) = substr($str, $m->{'from'}, ($m->{'to'} - $m->{'from'})));
        ((my  @list) = (do { my $m = Perlito5::Grammar->exp_stmts("do {" .     $list_code . "}", 0);my $source = Perlito5::Match::flat($m)->[0]->emit_perl5(0, "scalar");eval $source;}));
        ($list = \@list)
    };
    ((my  $ast) = Perlito5::AST::Use->new('code', Perlito5::Match::flat($MATCH->{'use_decl'}), 'mod', Perlito5::Match::flat($MATCH->{'Perlito5::Grammar.full_ident'}), 'arguments', $list));
    parse_time_eval($ast);
    ($MATCH->{'capture'} = ['term', $ast]);
;
    1
}))))
})))
})))
}))
}))));
    ($tmp ? $MATCH : 0)
};
sub Perlito5::Grammar::Use::parse_time_eval {
    ((my  $self) = shift());
    ((my  $module_name) = $self->mod());
    ((my  $use_or_not) = $self->code());
    ((my  $arguments) = $self->{'arguments'});
    ((my  $skip_import) = (defined($arguments) && (@{$arguments} == 0)));
    if (defined($arguments)) {

    }
    else {
        ($arguments = [])
    };
    if (($module_name eq 'feature')) {

    }
    else {
        if ($Perlito5::EXPAND_USE) {
            if (exists($Perlito_internal_module{$module_name})) {
                ($module_name = $Perlito_internal_module{$module_name})
            };
            ((my  $filename) = modulename_to_filename($module_name));
Perlito5::Grammar::Use::require($filename);
            if (!($skip_import)) {
                if (($use_or_not eq 'use')) {
                    if ((defined($_) & do { for ($_) {
    ($module_name . '::import')
}})) {
                        $module_name->import(@{$arguments})
                    }
                }
                else {
                    if (($use_or_not eq 'no')) {
                        if ((defined($_) & do { for ($_) {
    ($module_name . '::unimport')
}})) {
                            $module_name->unimport(@{$arguments})
                        }
                    }
                }
            }
        }
    }
};
sub Perlito5::Grammar::Use::emit_time_eval {
    ((my  $self) = shift());
    if (($self->mod() eq 'strict')) {
        if (($self->code() eq 'use')) {
            Perlito5::strict->import()
        }
        else {
            if (($self->code() eq 'no')) {
                Perlito5::strict->unimport()
            }
        }
    }
};
sub Perlito5::Grammar::Use::modulename_to_filename {
    ((my  $s) = shift());
    ($s =~ s!::!/!g);
    return (($s . '.pm'))
};
sub Perlito5::Grammar::Use::filename_lookup {
    ((my  $filename) = shift());
    if (exists($INC{$filename})) {
        if ($INC{$filename}) {
            return ('done')
        };
        die('Compilation failed in require')
    };
    for my $prefix ((@INC, '.')) {
        ((my  $realfilename) = ($prefix . '/' . $filename));
        if (-f($realfilename)) {
            ($INC{$filename} = $realfilename);
            return ('todo')
        }
    };
    die(('Can' . chr(39) . 't locate ' . $filename . ' in @INC ' . '(@INC contains ' . join(' ', @INC) . ').'))
};
sub Perlito5::Grammar::Use::expand_use {
    ((my  $comp_units) = shift());
    ((my  $stmt) = shift());
    ((my  $module_name) = $stmt->mod());
    if (((($module_name eq 'strict') || ($module_name eq 'warnings')) || ($module_name eq 'feature'))) {
        return ()
    };
    ((my  $filename) = modulename_to_filename($module_name));
    if ((filename_lookup($filename) eq 'done')) {
        return ()
    };
    ((my  $realfilename) = $INC{$filename});
    ((my  $source) = Perlito5::IO::slurp($realfilename));
    ((my  $m) = Perlito5::Grammar->exp_stmts($source, 0));
    if (($m->{'to'} != length($source))) {
        die('Syntax Error near ', $m->{'to'})
    };
    push(@{$comp_units}, @{add_comp_unit([Perlito5::AST::CompUnit->new('name', 'main', 'body', Perlito5::Match::flat($m))])} )
};
sub Perlito5::Grammar::Use::add_comp_unit {
    ((my  $parse) = shift());
    ((my  $comp_units) = []);
    for my $comp_unit (@{$parse}) {
        if ($comp_unit->isa('Perlito5::AST::Use')) {
            expand_use($comp_units, $comp_unit)
        }
        else {
            if ($comp_unit->isa('Perlito5::AST::CompUnit')) {
                for my $stmt (@{$comp_unit->body()}) {
                    if ($stmt->isa('Perlito5::AST::Use')) {
                        expand_use($comp_units, $stmt)
                    }
                }
            }
        };
        push(@{$comp_units}, $comp_unit )
    };
    return ($comp_units)
};
sub Perlito5::Grammar::Use::require {
    ((my  $filename) = shift());
    ((my  $is_bareword) = shift());
    if ($is_bareword) {
        ($filename = modulename_to_filename($filename))
    };
    if ((filename_lookup($filename) eq 'done')) {
        return ()
    };
    ($result = (do { my $m = Perlito5::Grammar->exp_stmts("do {" .     Perlito5::IO::slurp($INC{$filename}) . "}", 0);my $source = Perlito5::Match::flat($m)->[0]->emit_perl5(0, "scalar");eval $source;}));
    if ($@) {
        ($INC{$filename} = undef());
        die($@)
    }
    else {
        if (!($result)) {
            delete($INC{$filename});
            if ($@) {
                warn($@)
            };
            die(($filename . ' did not return true value'))
        }
        else {
            return ($result)
        }
    }
};
1;

1;
