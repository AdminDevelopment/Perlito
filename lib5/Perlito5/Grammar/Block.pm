# Do not edit this file - Generated by Perlito5 9.0
use v5.10;
use Perlito5::Perl5::Runtime;
package main;
package Perlito5::Grammar::Block;
use Perlito5::Expression;
Perlito5::Expression::add_statement('{', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
Perlito5::Expression::add_statement('BEGIN', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
Perlito5::Expression::add_statement('UNITCHECK', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
Perlito5::Expression::add_statement('CHECK', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
Perlito5::Expression::add_statement('INIT', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
Perlito5::Expression::add_statement('END', sub {
    Perlito5::Grammar::Block->term_block($_[0], $_[1])
});
sub Perlito5::Grammar::Block::term_block {
    ((my  $self) = $_[0]);
    ((my  $str) = $_[1]);
    ((my  $pos) = $_[2]);
    ((my  $p) = $pos);
    (my  $block_name);
    ((my  $m_name) = Perlito5::Grammar->ident($str, $p));
    if ($m_name) {
        ($p = $m_name->{'to'});
        ($block_name = Perlito5::Match::flat($m_name))
    };
    ((my  $ws) = Perlito5::Grammar::Space->ws($str, $p));
    if ($ws) {
        ($p = $ws->{'to'})
    };
    if ((substr($str, $p, 1) eq '{')) {
        ((my  $m) = Perlito5::Expression->term_curly($str, $p));
        if ($m) {
            ($p = $m->{'to'});
            ($ws = Perlito5::Grammar::Space->ws($str, $p));
            if ($ws) {
                ($p = $ws->{'to'})
            };
            ((my  $continue) = Perlito5::AST::Lit::Block->new('stmts', []));
            ((my  $has_continue) = 0);
            if ((!($block_name) && (substr($str, $p, 8) eq 'continue'))) {
                ($p = ($p + 8));
                ($ws = Perlito5::Grammar::Space->ws($str, $p));
                if ($ws) {
                    ($p = $ws->{'to'})
                };
                ((my  $cont) = Perlito5::Expression->term_curly($str, $p));
                if ($cont) {

                }
                else {
                    die('syntax error')
                };
                warn('continue!');
                ($continue->{'stmts'} = $cont->{'capture'}->[2]);
                ($has_continue = 1);
                ($m->{'to'} = $cont->{'to'})
            };
            ((my  $v) = Perlito5::Match::flat($m));
            ($v = Perlito5::AST::Lit::Block->new('stmts', $v->[2], 'sig', $v->[3]));
            if ($has_continue) {

            }
            else {
                ($v = Perlito5::Expression::block_or_hash($v))
            };
            if ((ref($v) eq 'Perlito5::AST::Lit::Block')) {
                ($v->{'name'} = $block_name);
                ($m->{'capture'} = $v);
                ($m->{'capture'}->{'continue'} = $continue);
                return ($m)
            }
        }
    };
    return (0)
};
1;

1;
