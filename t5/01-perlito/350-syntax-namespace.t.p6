# Do not edit this file - Generated by Perlito5 9.0
use v6;
{
    package main {
        # use feature
        print('1..9' ~ chr(10));
        my $v;
        my $r;
        my $x;
        {
            # use strict
            $r = 3;
            sub main::A {
                $r = 4
            }
            main::A;
            print('not ')
                if $r != 4;
            say('ok 1 - double-colon before # ::A ' ~ $r ~ ' ');
            $r = 3;
            main::A;
            print('not ')
                if $r != 4;
            say('ok 2 - double-colon before means ' ~ chr(39) ~ 'main::A' ~ chr(39) ~ ' # ::A ' ~ $r ~ ' ')
        }
        {
            # use strict
            eval(' $x = B:: ');
            $r = '>' ~ $x ~ '<';
            print('not ')
                if $r ne '>B<';
            say('ok 3 - double-colon after - B:: ' ~ $x)
        }
        {
            # no strict
            $x = C;
            $r = '>' ~ $x ~ '<';
            print('not ')
                if $r ne '>C<';
            say('ok 4 - no double-colon before or after # C ' ~ $x ~ ' ')
        }
        {
            # use strict
            $r = eval(chr(10) ~ '                ' ~ $x ~ ' = D;' ~ chr(10) ~ '                ' ~ $v ~ ' = ' ~ chr(39) ~ '>' ~ chr(39) ~ ' . ' ~ $x ~ ' . ' ~ chr(39) ~ '<' ~ chr(39) ~ ';' ~ chr(10) ~ '                1; ') || 0;
            print('not ')
                if $r;
            say('ok 5 - Bareword "D" not allowed while "strict subs" in use')
        }
        {
            # no strict
            $x = main::E;
            $r = '>' ~ $x ~ '<';
            print('not ')
                if $r ne '>::E<';
            say('ok 6 - double-colon before - ::E ' ~ $x ~ ' # TODO Parser bug')
        }
        {
            # use strict
            eval(' $F' ~ chr(39) ~ 'x = 9      ');
            eval(' $r = ">$F' ~ chr(39) ~ 'x<" ');
            print('not ')
                if $r ne '>9<';
            say('ok 7 - tick instead of double-colon - $F' ~ chr(39) ~ 'x ' ~ $r ~ ' # TODO Parser bug');
            eval(' $r = ">$F::x<" ');
            print('not ')
                if $r ne '>9<';
            say('ok 8 - double-colon instead of tick - $F::x ' ~ $r ~ ' # TODO Parser bug')
        }
        {
            # no strict
            eval(' $x = ::G' ~ chr(39) ~ 'a ');
            $r = '>' ~ $x ~ '<';
            print('not ')
                if $r ne '>::G::a<';
            say('ok 9 - tick in constant - ::G' ~ chr(39) ~ 'a ' ~ $x ~ ' # TODO Parser bug')
        }
    }
}

