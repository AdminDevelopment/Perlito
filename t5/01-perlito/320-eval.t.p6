# Do not edit this file - Generated by Perlito5 9.0
use v6;
{
    package main {
        # use strict
        # use feature
        print('1..10' ~ chr(10));
        eval('print "ok 1 # say from eval' ~ chr(92) ~ 'n"');
        eval('{;print "not "');
        print('ok 2 # we live after evaling incorrect code' ~ chr(10));
        sub main::foo {
            my $x = eval(do {
                return('bar')
            });
            print('# err ' ~ ${'@'} ~ chr(10))
                if ${'@'};
            return('baz-' ~ $x)
        }
        my $bar = foo();
        print('not ')
            if $bar ne 'baz-bar';
        print('ok 3 # return from eval block ' ~ $bar ~ chr(10));
        sub main::foo2 {
            my $x = eval(' return "bar" ');
            return('baz-' ~ $x)
        }
        my $bar2 = foo2();
        print('not ')
            if $bar2 ne 'baz-bar';
        print('ok 4 # return from eval string ' ~ $bar2 ~ chr(10));
        eval(do {
            my $result = wantarray ?? 'LIST' !! defined(wantarray) ?? 'SCALAR' !! 'VOID';
            print('not ')
                if $result ne 'SCALAR';
            say('ok 5 # Eval block: ' ~ $result);
            1
        }) or do {
            warn('Oops')
        };
        eval('    my $result = wantarray ? "LIST" : defined wantarray ? "SCALAR" : "VOID";' ~ chr(10) ~ '    print "not " if $result ne ' ~ chr(39) ~ 'SCALAR' ~ chr(39) ~ ';' ~ chr(10) ~ '    say "ok 6 # Eval string: $result";' ~ chr(10) ~ '    1;' ~ chr(10)) or do {
            warn('Oops')
        };
        sub main::foo3 {
            my $result = wantarray ?? 'LIST' !! defined(wantarray) ?? 'SCALAR' !! 'VOID';
            print('not ')
                if $result ne 'SCALAR';
            say('ok 7 # Sub: ' ~ $result);
            1
        }
        foo3 or do {
            warn('Oops')
        };
        (sub {
            my $result = wantarray ?? 'LIST' !! defined(wantarray) ?? 'SCALAR' !! 'VOID';
            print('not ')
                if $result ne 'SCALAR';
            say('ok 8 # Anon: ' ~ $result);
            1
        }).() or do {
            warn('Oops')
        };
        sub main::foo4 {
            1
        }
        foo4(eval(do {
            my $result = wantarray ?? 'LIST' !! defined(wantarray) ?? 'SCALAR' !! 'VOID';
            print('not ')
                if $result ne 'LIST';
            say('ok 9 # Eval: ' ~ $result);
            1
        }));
        eval(do {
            my $result = wantarray ?? 'LIST' !! defined(wantarray) ?? 'SCALAR' !! 'VOID';
            print('not ')
                if $result ne 'VOID';
            say('ok 10 # Eval: ' ~ $result);
            1
        })
    }
}

