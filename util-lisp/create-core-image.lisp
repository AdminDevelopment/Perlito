
(defun slurp (filename) 
  (format nil "~{~a~%~}" 
    (with-open-file (s filename)
      (loop for line = (read-line s nil nil)
            while line
            collect line into lines
            finally (return lines)))))

(defun compiler-main ()
  (let (source 
        (pos 0) 
        p 
        (arg1 "") 
        (arg2 "") 
        (arg3 "") 
        (execute t) 
        (result "")
        (sv-comp_units (make-array 0 :adjustable 1 :fill-pointer t)))

      (setf COMMON-LISP-USER::*posix-argv* (cdr COMMON-LISP-USER::*posix-argv*))
      (setf *mp6-args* (make-array
                                  (length COMMON-LISP-USER::*posix-argv*)
                                  :adjustable 1
                                  :fill-pointer t
                                  :initial-contents COMMON-LISP-USER::*posix-argv*))
      ;; (sv-say (list "Args: " (sv-perl *mp6-args*)))

      (ignore-errors (setf arg1 (elt *mp6-args* 0)))
      (ignore-errors (setf arg2 (elt *mp6-args* 1)))
      (ignore-errors (setf arg3 (elt *mp6-args* 2)))
      (if (sv-eq arg1 "-Clisp")
        (progn
          (setf execute nil)
          (setf arg1 arg2)
          (setf arg2 arg3)
          (setf arg3 "")))

      ;; (format t "[ execute ~a - ~a - ~a - ~a ]~%" execute arg1 arg2 arg3)

      (if (sv-eq arg1 "-e")
          (setf source arg2)
          (setf source (slurp arg1)))
      ;; (format t "~a" source)

      (setf result (concatenate 'string result (format nil "~a~%" ";; Do not edit this file - Generated by MiniPerl6 4.1")))
      (loop while (< pos (length source)) 
            do (progn
               (setf p (sv-comp_unit (proto-mp-MiniPerl6-Grammar) source pos))
               ;; (format t "~a~%" (sv-perl p))
               ;; (sv-say (list ";; at source pos: " (sv-to p) " source end: " (length source)))
               (sv-push sv-comp_units (sv-capture p))
               (setf pos (sv-to p))))
      (setf result (concatenate 'string result (mp-CompUnit::sv-emit_lisp_program sv-comp_units)))

      ;; (format t "~a~%" result)

      (if execute
          (progn
                ;; (format t "eval:~%")
                (in-package mp-Main)

                (setf result (concatenate 'string 
                                "(progn (in-package mp-Main) (use-package 'common-lisp) (use-package 'mp-Main)" 
                                result))
                (setf result (concatenate 'string result ")" ))

                (ignore-errors (eval (read-from-string result))))
          (format t "~a" result))

      (sb-ext:quit)))

(sb-ext:save-lisp-and-die "mp6-lisp" :toplevel 'compiler-main :executable t )

