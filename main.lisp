;; Do not edit this file - Generated by MiniPerl6
;; class Main
(defpackage mp-Main
  (:use common-lisp mp-Main))
;; (in-package mp-Main)
(let ((sv-m (sv-undef)))
(if (not (ignore-errors (find-class 'mp-Main)))
  (defclass mp-Main () ()))

(let (x) 
  (setq x (make-instance 'mp-Main))
  (defun proto-mp-Main () x))
(defmethod sv-perl ((self mp-Main))
  (mp-Main::sv-lisp_dump_object "::Main" (list )))

(mp-Main::sv-say (list "1..3"))
(setf sv-m (let ((m (make-instance 'mp-MiniPerl6-Match))) (setf (sv-str m) "abcdef")(setf (sv-from m) 2)(setf (sv-to m) 4)(setf (sv-bool m) 1) m))
(if (sv-bool (sv-eq (sv-scalar sv-m) "cd")) (progn (mp-Main::sv-say (list "ok 1"))) (progn (mp-Main::sv-say (list "not ok 1"))))
(setf (gethash "abc" (sv-hash sv-MATCH)) 3)
(if (sv-bool (eql (gethash "abc" (sv-hash sv-MATCH)) 3)) (progn (mp-Main::sv-say (list "ok 2"))) (progn (mp-Main::sv-say (list "not ok 2"))))
(setf sv-m (sv-word (proto-mp-MiniPerl6-Grammar) "abcdef" 2))
(if (sv-bool (sv-eq (sv-scalar sv-m) "c")) (progn (mp-Main::sv-say (list "ok 3"))) (progn (mp-Main::sv-say (list "not ok 3"))))
)


