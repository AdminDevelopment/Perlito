TODO list for Perlito

CPAN distribution

- cross compilation doesn't work (can't create the temporary "AST" files) - FIXED

Eval.pm module

- add exceptions

- complete ast nodes implementation

Command line compiler (util/perlito.pl)

- migrate all bootstrap scripts to use util/perlito.pl - FIXED

- build Ast cache using JSON (we currently use Perl5 Data::Dumper) or XML (Go has XML and JSON input)

- option to build binaries (Lisp, Java, Go) or modules (Perl, Lisp, Javascript)

- add "make" capabilities (test file dates, etc)

- does it need a config file? (lib location, make details)

- add '-B' option (execute)

Perlito in Rakudo

- Rakudo should be able to execute Perlito directly. What do we need to fix in both sides?

Perlito in Lisp

- test other Lisp implementations

Perlito in Go

- document which release of Go to use

Perlito in Perl5

(no issues at the moment)

Perlito in Parrot

- finish OO, class variables

- fix die() parameter handling

Perlito in Python

- module loading uses mangled filenames (with underlines); it should use dot-separated names instead.

Perlito in Ruby

- module loading uses mangled filenames (with underlines); it should use dot-separated names instead.

Missing Backends

- Haskell

- MO in MP6 

- Clojure

Missing Features

- detailed syntax errors

- type annotations - FIXED

- 'use v5' is not supported
  (maybe not needed for Perlito)

- no 'state', 'constant', 'local'

- debugger

- chain operators - supported by the grammar, but no AST representation

- "loop(;;)"

- "when"

Missing Features of the Token sub-compiler

- no quantifiers - FIXED

- no variable interpolation

- use the new precedence parser

Nice to Have

- 'perlito-format' script (see gofmt and perltidy)

- run some tests from the standard test suite

- use Test.pm - FIXED

Grammar

- item-assignment precedence is different from list-assignment

- captures like: / <a> <a>* / - the first capture must share storage with the second capture

- modify the grammar to return multi-line strings as multiple strings
  (this makes it easier to write a beautifier script)

- parse Namespaces as array of string (we are going to split them anyway)

- double quote variable interpolation - FIXED (without method calls)

- and expression interpolation 

- the grammar should be aware of function arity

Semantics

- @a.values and %a.keys return Array
  These should return a List 

- Not implemented: %a = (list) 

