TODO list for Perlito5


* perlito5 command-line


* libraries

-- these should go into namespace Perlito5X::*

-- Test (implemented as Perlito5::Test)

-- Data::Dumper (implemented as Perlito5X::Dumper)

-- create perlito5-specific libs for:
    feature.pm
    Config.pm
    overload.pm
    bytes.pm
    integer.pm
    lib.pm
    Carp.pm
    Tie::Array
    Tie::Hash
    Tie::Scalar
    Symbol

    alternately, check $^H for strictness - such that perl's own strict.pm just works
    and ${^WARNING_BITS} for warnings


* Parser

-- syntax error in hashref subscript - parses 's' as s///:
    ${x->{s}}
    $x->{s}

    $ perl  -e ' use Data::Dumper;  ${ x ->{s} } = 4;  print Dumper \%x '
    #  { 's' => \4 }

-- label all blocks
    Note: this is not possible, because a "next" inside a subroutine goes back to the caller.

-- tailcalls
    same-subroutine tailcalls could execute a "redo" in the current subroutine.

-- wrong precedence in keys()
    keys prototype is '+'

    if (keys %hh != 2) { print "not" }
    parses as: keys(%hh != 2)

-- "'" meaning "::"
    $'m  # $::m
    $m'  # String found where operator expected

    package X'Y  # X::Y
    package X'   # Invalid version format (non-numeric data)

-- attributes
    http://perldoc.perl.org/attributes.html
    missing MODIFY_CODE_ATTRIBUTES handlers

-- create __DATA__
    %Perlito5::DATA_SECTION contains the __DATA__ for each package

-- compile-time eval() is not bound to the "program" environment, but to the "compiler" environment instead
    see README-perlito5-js near "Compile-time / Run-time interleaving"

    my $v;
    BEGIN { $v = "123" }
    use Module $v;  # $v is not accessible at compile-time

-- parse the regexes
    Note: implemented in Perlito5::Grammar::Regex5
    create an AST for regexes

-- prototypes (signatures)
    http://perldoc.perl.org/perlsub.html#Prototypes

    check that undeclared barewords give the right error
    *foo = sub () { ... }   # does prototype work here?
    check signature in sort()
    fix the prototype for 'stat(*)' (see t/test.pl in the perl test suite)

    '&@' - See Try::Tiny

-- block vs. hash

    $ perl -e ' print {  1, 2 } '
    HASH(0x7fdf3b005450)
    $ perl -e ' print {  1, 2; } '
    syntax error at -e line 1, near "; }"
    Execution of -e aborted due to compilation errors.
    $ perl -e ' sub x { { 1, 2}; }  print x() '
    HASH(0x7fb033805450)
    $ perl -e ' sub x { {; 1, 2} }  print x() , "\n" '
    12
    $ perl -e ' sub x { { 1, 2} }  print x() , "\n" '
    HASH(0x7fad8b805450)
    $ perl -e ' sub x { { 1, 2;} }  print x() , "\n" '
    syntax error at -e line 1, near ";}"
    syntax error at -e line 1, near "} }"
    Execution of -e aborted due to compilation errors.
    $ perl -e ' sub x { { 1 } }  print x() , "\n" '
    1
    $ perl -e ' sub x { { 1, } }  print x() , "\n" '
    HASH(0x7f8b13805450)
    $ perl -e ' sub x { { 1; } }  print x() , "\n" '
    1

-- "namespace" parsing
    tests: t5/01-perlito/26-syntax-namespace.t

    $ perl -e ' { package X; sub print { CORE::print(">$_[1]<\n") } } my $x = bless {}, "X"; print $x "xxx" '
    Not a GLOB reference at -e line 1.

    $ perl -e ' { package X; sub printx { CORE::print(">$_[1]<\n") } } my $x = bless {}, "X"; printx $x "xxx" '
    >xxx<

    $ perl -MO=Deparse -e ' print X:: "xxx" '
    print X 'xxx';

    $ perl -e ' use strict; my $x = X::; print $x '
    X

    $ perl -e ' use strict; my $x = X; print $x '
    Bareword "X" not allowed while "strict subs" in use

    $ perl perlito5.pl -MO=Deparse -e ' ::X::x::y '
    join("", ::{'main::X::'} x main::y);

    $ perl -MO=Deparse -e ' ::X '
    '???';

    $ perl -MO=Deparse -e ' sub X {} ::X '
    sub X { }
    X;

    $ perl -e ' $::X::::X = 3; print $main::X::::X '        # 3
    $ perl -e ' $::X::::X = 3; print $main::main::X::::X '  # 3
    $ perl -e ' $::X::::X = 3; print $main::X::main::X '    # empty
    $ perl -e ' $::X::::X = 3; print $main::X::X '          # empty
    $ perl -e ' $::X::::X = 3; print $::::X::::X '          # empty

-- CORE:: namespace can be used with operators:

    $ perl -MO=Deparse -e ' $x CORE::and $v '
    $v if $x;

    $ perl -MO=Deparse -e ' @v = CORE::qw/ a b c / '
    @v = ('a', 'b', 'c');

    $ perl -MO=Deparse -e ' $x CORE::+ $v '
    CORE:: is not a keyword


-- strict and warnings: create options like 'subs', 'refs'

-- things that work in perlito5, but which are errors in 'perl'

    $ perl -e ' my @things= map {  no warnings; 123 } @list; '
    "no" not allowed in expression

    quotes vs. hash lookups:

        $ perl -e '  q}} '
        # ok

        $ perl -e ' $x{ q}} } '
        Unmatched right curly bracket at -e line 1, at end of line

        $ perl -e ' $x{ q]] } '
        # ok

    string interpolation with nested quotes of the same type:

        $ perl -e ' " $x{"x"} " '
        String found where operator expected at -e line 1, near "x"} ""


* Add tests for fixed bugs:

    unit tests:

    local() vs. next/redo/last

    our()

    aliasing inside for-loop

    aliasing of subroutine parameters

    prototypes

    ---
    syntax error in ${@} in string
    "${@}";
    ${"};

    syntax error in autoquote: $x{s}
    parses as: $x { s/// }

    ---
    prototypes can change during compilation

    $ perl -e ' my @x; sub z0 ($$@) { zz(99, @_) } sub zz ($$$@) { print "@_\n" } @x=(9,4,6); zz(8,5,@x); z0(8,5,@x); '
    8 5 3           # zz prototype is '$$$@'
    99 8 5 9 4 6    # zz prototype was '@' when z0 was compiled


    ---
    resolve "filehandle" methods

    $ perl -e ' package X; open(X, ">", "x"); X->print(1234) '
    $ cat x
    1234
    $ nodejs perlito5.js -Isrc5/lib -Cjs -e ' package X; open(X, ">", "x"); X->print(1234) '


    ---
    variable declarations in expressions

    our $Verbose ||= 0;
    our (%Cache);
    my $args = @_ or @_ = @$exports;


    ---
    add additional variants of "for"

    # "our" with localization
    $ perl -e ' use strict; our $x = 123; for our $x (1,2,3) { 2 } print "$x\n" '
    123

    # variable in scope with localization
    $ perl -e ' use strict; my $x = 123; for $x (1,2,3) { 2 } print "$x\n" '123
    123


    ---
    add "print", "printf", "say" special parsing - note this is related to indirect object notation

    indirect object notation
    http://lwn.net/Articles/451486/
    http://www.modernperlbooks.com/mt/2009/08/the-problems-with-indirect-object-notation.html
    http://shadow.cat/blog/matt-s-trout/indirect-but-still-fatal/
    http://perlbuzz.com/mechanix/2008/02/the-perils-of-perl-5s-indirect.html

    method Module $param;
    new Class( arg => $value );
    new Class::($args);
    say $config->{output} "This is a diagnostic message!";  # indirect call
    say {$config->{output}} "This is a diagnostic message!"; # say to filehandle

    use Class;
    sub Class {
    warn 'Called Class sub not Class package';
    'Class'
    }
    my $q = Class->new; # calls the Class sub above
    my $s = new Class; # throws a 'Bareword found where operator expected' error
    my $t = Class::->new # this works
    my $u = new Class::; # this also works (even with sub main in the current package)

    sbertrang++ noted this is also valid:
    print( STDERR "123" )


    ---
    add tests for signatures: "empty" _ $ ;$

    ---
    add test for "sub _" should be in package "main"
    $ perl -MO=Deparse -e ' package X; sub _ { 123 } '
    package X;
    sub main::_ {
        123;
    }

    ---
    add test for defined-or vs. m//  (2012/9/25 Конрад Боровски <notifications@github.com>)
    Note: fixed; see test t5/01-perlito/25-syntax-defined-or.t

    $ perl perlito5.pl -Isrc5/lib -Cast-perl5 -e ' shift // 2 '
    Number or Bareword found where operator expected

    $ perl perlito5.pl -Isrc5/lib -Cast-perl5 -e ' shift / 2 '
    Can't find string terminator '/' anywhere before EOF

    ---
    add test for filetest operators special case:
    ' -f($file).".bak" ' should be equivalent to -f "$file.bak"
    parses as -(f($file)).".bak"
    but: ' -f ($file).".bak" '
    parses correctly
    This seems to be because there is a rule that \w followed by '(' is a function call;
    this needs more testing: ' ... and(2) '
    Test: redefine 'and', 'not' and check what works.

    '  $s111++ + $s222 '
    parses as  (+$s222)++

    '  $step++ < $steps '
    Can't find string terminator '>' anywhere before EOF

-- from moritz, Schwern and others at
    http://stackoverflow.com/questions/161872/hidden-features-of-perl

    - you can use letters as delimiters

    $ perl -Mstrict  -wle 'print q bJet another perl hacker.b'
    Jet another perl hacker.

    Likewise you can write regular expressions:

    m xabcx
    # same as m/abc/



* Perl6 backend

-- keep comments

-- context: wantarray, return-comma
        sub x { return 7, 8 }
    vs. sub x { return (7, 8) }

    use an "out-of-band" parameter to set the call context, like:
    $v = x( :scalar )   # 8
    $v = x( :list   )   # 2

-- <> is lines()

-- 0..$#num to @num.keys

-- choose @*ARGS or @_ in shift() and pop()

-- typeglob assignment

-- "given" statement not implemented

-- refactoring sub arguments
    my $x = $_[0];
    my ($x, $y, @rest) = @_;    # check if @_ is unused elsewhere in the sub

-- placeholder
    my ($a, $, $c) = 1..3;
    ($a, *, $c) = 1..3;

-- __PACKAGE__

-- specialized refactoring for packages that introduce syntax
    Try::Tiny
    List::MoreUtils
    Moose

-- no strict

-- bless

-- tests



* Perl5 backend

-- "given" statement not implemented
-- "default" statement not implemented

-- ${^NAME} needs curly-escaping

- fix regex delimiters, or escape the regexes



* Compile-time execution environment

-- work in progress

-- special backend option "_comp" dumps the compile-time execution environment:

    $ perl perlito5.pl -Isrc5/lib -I. -It -C_comp -e '  (0, undef, undef, @_)[1, 2] ; { 123 } sub x { 456; { 3 } }'
    {
        'block' => [
            {
                'block' => [],
            },
            {
                'block' => [
                    {
                        'block' => [],
                    },
                ],
                'name' => 'main::x',
                'type' => 'sub',
            },
        ],
    }

    $ perl perlito5.pl -Isrc5/lib -I. -It -C_comp -e ' local (undef, undef, @_) ; { 123 } sub x { 456; { my $x = 3 } } local $y; INIT { 123 } BEGIN { $Perlito5::SCOPE->{block}[-1]{xxx} = 3 }'
        change the environment using a BEGIN block


* Nice to Have

-- keep comments

-- debugging symbols
-- line numbers in error messages

-- caller()
-- "when"

-- run more of the "perl" test suite

-- proper "use strict" and "use warnings"
-- use the same error messages and warnings as 'perl'
-- no warnings 'redefine';

-- __LINE__, __FILE__

-- INIT{}, END{}
   look at the implementation in perlito6-in-Go

-- source code - remove Perl 6 code such as "token"
   (fixed: This is only loaded if the grammar compiler is needed)

-- *{ $name }{CODE}->();

-- local(*{$caller."::a"}) = \my $a;
-- *{$pkg . "::foo"} = \&bar;

-- local $SIG{__WARN__};

-- bug https://github.com/fglock/Perlito/issues/10
    "Perlito 5 JS has syntax errors"

    Tried

    YUI Compressor online
    and
    Google Closure Compiler
    http://closure-compiler.appspot.com/home

    Both failed with syntax errors.


* Oddities

-- from moritz, Schwern and others at
    http://stackoverflow.com/questions/161872/hidden-features-of-perl

    - you can give subs numeric names if you use symbolic references

    $ perl -lwe '*4 = sub { print "yes" }; 4->()'
    yes

-- return value of continue-block

    $ perl -e ' sub x {  { 456 } continue { 789 } } print "@{[ x() ]}\n" '
    456 789

* Deprecate

-- Interpreter backend
   this is not being maintained; the code is still in src5/lib/Perlito5/Eval.pm just in case

   alternately, use the interpreter to compute constant foldings

