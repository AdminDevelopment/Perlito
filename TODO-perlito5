TODO list for Perlito5

* Perlito5

- fix regex delimiters, or escape the regexes 


* basic functionality

-- add "map" block

-- add "grep", "sort"

-- add "require"


* libraries

-- these should probably go into namespace Perlito5X::*

-- Test (implemented as Perlito5::Test)

-- Data::Dumper (implemented as Perlito5::Dumper)


* Parser

-- 'use' doesn't work inside eval-string

-- parse the regexes

-- prototypes (signatures)
--- done: "empty" _ $ ;$
--- check that undeclared barewords give the right error
--- *foo = sub () { ... }   # does prototype work here?

-- check that \(@a) and \@a have different meanings

-- double-quoted here-docs

-- parse "local $x[1]"
-- parse local $@

-- $v{x} doesn't autoquote the index
-- $v{x} doesn't interpolate inside double quotes


* Perl5 backend

-- ${^NAME} needs curly-escaping


* Javascript backend

-- no global error handler when running in node.js;
   there is no catch for the syntax error in:
    $ node perlito5.js -Bjs -e ' { '

-- "autoload" the compiler if eval-string is used (eval-string needs the compiler at run-time)

-- symbol variables like $] ${"main::\$"} $#_
-- check that @_, $_, $a, $b and other special variables are in the right context (lexical, global, package global)

-- do EXPR (do $filename)
-- eval EXPR (try/catch)

-- emit array/hash slices: @a[@x], @a{@x}

-- add alternate mro's

-- add regex compiler
-- /e modifier
-- support all perl5 regex syntax
-- @v = /x/g

-- bug: variable redeclaration does not work
-- javascript "var" erases the outer value within the whole current lexical scope
-- bug: "my" variables - this doesn't work as expected: my $v = $v
   possible fix: rename variables

-- move "substr" and others to CORE
-- lvalue "substr"
-- subroutine signatures
-- array interpolation in argument lists

-- bug: negative index in array doesn't work

-- bug: variable aliases create copies instead

-- generate more compact code; maybe use more subroutines instead of inlining;
   autovivification is probably the most verbose part of the code.

-- in the browser: implement "use" with XMLHttpRequest (what are the security implications?)

-- add symbol tables for scalar, array and hash

-- string increment and string ranges

-- finish "overload" implementation


* Perl6 backend

* Python backend

* Ruby backend

* Java backend


* Nice to Have

-- labels, "next", "last"

-- run the "perl" test suite

-- wantarray()

-- import

-- run perltidy on the source code

-- proper "use strict" and "use warnings"
-- use the same error messages and warnings as 'perl'
-- no warnings 'redefine';

-- __PACKAGE__,  __END__, __LINE__, __DATA__, __FILE__

-- BEGIN{}, INIT{}, END{}

-- source code - remove Perl 6 code such as "token"
   (fixed: This is only loaded if the grammar compiler is needed)

-- *{ $name }{CODE}->();

-- $object->$method_name()

-- local(*{$caller."::a"}) = \my $a;

-- AUTOLOAD

