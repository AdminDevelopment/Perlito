* Java backend

-- Perlito5-Java vs. Perl

    - no timely destruction (DESTROY) (because Java)
    - no XS (because Java)
    - limited BEGIN blocks side-effects (because unfinished Perlito5 impl)
    - no eval-string (because not-yet-bootstrapped)

    - any other differences are not-yet-implemented or bugs.

-- document Java import options

    package The::Class {
          import           => 'full.path.Class',  # mandatory
          java_constructor => 'Class',            # auto generated from 'import' class name
          perl_to_java     => 'to_TheClass',      # auto generated from package name
          # perl_package     => 'The::Class',     # internal, auto generated, same as the package name
    }

-- "import"

    package Sample { import => "misc.Java.Sample" };

    generates:
    - import misc.java.Sample;              (DONE)
    - adds a pObject coercion "to_Sample"   (DONE)
    - adds a pObject variant "pSample"      (DONE)
                                            (TODO - add argument list - test)
                                            (TODO - maybe unbox the arguments automatically)
    - add a pScalar variant "set(Sample)"   (TODO)
    - add pArray and pHash setters          (TODO)

-- Typed variables

    - no "global" typed variables (only "my" variables)

    Note:
        - parameters to native calls are evaluated in scalar context
        - untyped variables are passed by reference - that is, v_x instead of v_x.get()
        - wantarray() context is not passed to native calls

    $ perl perlito5.pl -Isrc5/lib -I. -It -Cjava -e ' package Sample { import => "misc.Java.Sample" }; my $x = Sample->new(); $x->to_Sample() ' > Test.java ; javac Test.java

    my $p_put = new Sample();
    creates a boxed Java variable           (DONE)

    $x->to_Sample()
    retrieves the native Sample object      (DONE)
    allow conversion of primitive types - to_Int(), to_String()
                                            (TODO - generate primitive types in emitter)

    my $x = $p_put;
    puts the boxed object into a Perl scalar  (DONE)

    my Sample $put = new Sample();
    creates a native Java variable          (DONE)
                                            (TODO - allow Int, String types)

    my $x = $put;
    puts the unboxed object into a Perl scalar  (TODO - create pScalar.set() variant)

    my $x = Sample->new()
    stores the boxed pSample object in a Perl scalar (DONE)

    package Int { import => 'java.lang.Integer' };
    my Int $x = 3;          # $x is a Java Int (not a pScalar)  (TODO - test)

-- interoperation between native expressions and perl expressions

    method calls on typed variables call Java methods,
    method calls on untyped variables call Perl methods

    subroutines are always "Perl"

    Class method calls on imported classes are "Java",
    all other Class method calls are "Perl".

    Parameters to Java method calls should be converted to Java automatically.  (TODO - test, examples)

    storing a Java object into a Perl scalar converts the value to a "Perl" object (blessed reference);
    Java "int", "String", "double" are converted to Perl values.

    using Java objects in other types of expressions than scalar assignment is not well defined. (TODO - test, examples)

    using Perl objects in Java code is not well defined. (TODO - test, examples)

    storing a Java object into a typed variable keeps the Java object as-is.

    test case:
    $ perl perlito5.pl -Isrc5/lib -I. -It -Cjava -e ' package my::Sample { import => "misc.Java.Sample" }; my $x = my::Sample->new(); $x->to_mySample(); say "ref: ", ref($x), " x ", $x; my @arr = (1,2,5); say ref(\@arr); $x = \@arr; say ref($x); my my::Sample $z = my::Sample->new(); $x = $z; 

-- primitive types

    char, boolean, float, long, short, int, byte

    in Perl:
    char::Array, boolean::Array, float::Array, long::Array, short::Array, int::Array, byte::Array

    $ perl perlito5.pl -Isrc5/lib -I. -It -Cjava -e ' package byte::Array { type => 'byte[]' } my byte::Array $x = byte::Array->new("A","B","C");'

        - this should return:
        byte[] v_x = new byte[3]; // alocate 3 bytes - the native arrays in java are not dynamic
        byte[0] ='A';
        byte[1] = 'B';
        byte[2] = 'C';

        - or:
        byte[] v_x = new byte[] { "A", "B", "C" };

    alternately:

        package my_chars { type => 'char[]' }

    Investigate adding support for plain "Object" arguments.
        See http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html arguments

-- coercing method naming rules

    - rule: remove '::', add 'to_'
        example:  my::Sample  =>  to_mySample()

    package my::Sample { import => "misc.Java.Sample" };
    my $x = my::Sample->new();
    $x->to_mySample()

-- TODO autovivification of aliased parameters

    $ perl -e ' use Data::Dumper; my %z; my $s; my @w; sub x {$_[0] = 3} x($z{d}, $s, $w[3]); print Dumper [\%z, $s, \@w] '
    $VAR1 = [
          {
            'd' => 3
          },
          undef,
          []
        ];
    $ perl -e ' use Data::Dumper; my %z; my $s; my @w; sub x {$_[1] = 3} x($z{d}, $s, $w[3]); print Dumper [\%z, $s, \@w] '
    $VAR1 = [
          {},
          3,
          []
        ];
    $ perl -e ' use Data::Dumper; my %z; my $s; my @w; sub x {$_[2] = 3} x($z{d}, $s, $w[3]); print Dumper [\%z, $s, \@w] '
    $VAR1 = [
          {},
          undef,
          [
            undef,
            undef,
            undef,
            3
          ]
        ];

-- BUG globals

    @x = (1,2,3);
    generates a scalar assignment:
    pV.set("main", "List_x", new pArray(new pInt(1), new pInt(2), new pInt(3)));

    related:
    $ perl -e ' use strict; use warnings; use Data::Dumper; my $z; @{$z} = (1,2,3); print Dumper $z '
    $VAR1 = [
          1,
          2,
          3
        ];
    should generate:
        .array_deref(), .array_deref_set()
        .hash_deref(), .hash_deref_set()

-- TODO slices

    $scalar = delete @hash{qw(foo bar)}; # $scalar is 22
    @array  = delete @hash{qw(foo baz)}; # @array  is (undef,33)

    - test slice interpolation in strings

-- TODO namespaces, global variables, local, our

    delete local EXPR

    "our" should use lexicals (it currently compiles to a "global")
        - lexicals are faster

    subroutine lookups could also be "our"-like (also method lookups)

-- TODO symbolic references

    $ perl -e ' $a = 123; my $z; $z = "a"; print $$z '
    123
    $ perl -e ' my $a = 123; my $z; $z = "a"; print $$z '
    ''

-- BUG hash deref
    $x{"a"}{"b"} dereferences twice:
    Hash_x.get_hash(new pString("a")).get_hash().hget(new pString("b"));

-- autobox as-needed

    runtime methods should accept String, int, double, boolean types
    and maybe other types of number (byte, ...)

    Array and Hash should accept other types of containers

    - String accepts char in constructor (DONE)
    - Hash accepts String for index (DONE)
    - Array accepts int for index   (DONE)

-- missing features (or untested)

    NaN, Inf
    subroutine signatures
    return (list)
    assignment to splice
    rw @_
    //
    sprintf
        http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...)
        http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html
    pack
    unpack
    file operations
    regex
        http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html
    pos()
    typeglob operations
    local

