"Perlito" Perl 6 compiler

    This is Perlito, a compiler that implements a subset of Perl 6.

Backends

    Perlito can compile Perl 6 programs into one of the 'backend' 
    languages:

        Perl 5, Javascript, Python 2.6

    Previous versions of Perlito also compiled to:

        Go, Common Lisp, and Ruby 1.9

Web

    Main Perlito repository: http://github.com/fglock/Perlito

    Main Project web page: http://www.perlito.org

    Run Perlito online, in the browser: http://perlcabal.org/~fglock/perlito.html

Source code

    The source code for Perlito can be found in the 'lib' directory.
    Perlito is written in Perl 6.

USING PERLITO

Using the Go backend

    perl perlito.pl -Bgo t/04-op.t

    Creating a bootstrapped compiler:

    # create a "6.out" binary, using perlito.pl
    perl perlito.pl -Bgo util/perlito.pl    
    # test the binary
    ./6.out -Cgo t/04-op.t          
    # recompile the compiler using itself
    ./6.out -Cgo util/perlito.pl > perlito-go.go   
    6g perlito-go.go
    6l perlito-go.6
    ./6.out -Cgo util/perlito.pl > perlito-go-new.go
    # "perlito-go.go" and "perlito-go-new.go" should be identical

    See also: Go homepage at http://golang.org

Using the Java class backend

    perl perlito.pl -Bjava-class -e 'class Main { say "hello, World!" }'
    java tmp

    Creating a bootstrapped compiler:

    # create a Java class, using perlito.pl:
    perl perlito.pl -v -Bjava-class util/perlito.pl
    # test "tmp.class"
    java tmp -Cjs t/04-op.t

    Requires Rhino's js.jar in CLASSPATH, see also: http://www.mozilla.org/rhino

Using the Javascript backend in the browser

    Open the file 'perlito.html' in a browser (Firefox, Chrome, or Safari).

    Alternately, browse to:

    http://perlcabal.org/~fglock/perlito.html

Using the Javascript backend in the command line

    Executing from the command line requires Perl 5 and a javascript compiler (V8, SpiderMonkey, or Rhino):

    perl perlito.pl -Bv8 -e 'class Main { say "hello, World!" }'

    perl perlito.pl -Brhino -e 'class Main { say "hello, World!" }'

    Creating a bootstrapped compiler:

    # compile util/perlito.pl to Javascript, using perlito.pl:
    perl perlito.pl -Bperl5 util/perlito.pl -Cjs util/perlito.pl > util-js/perlito.js

    # testing the bootstrap with the v8 developer shell
    d8 util-js/perlito.js -- -Cjs util/perlito.pl > perlito-new.js

    # testing the bootstrap with Rhino
    java org.mozilla.javascript.tools.shell.Main util-js/perlito.js -Cjs util/perlito.pl > perlito-new.js

    See also: 

        V8 homepage at http://code.google.com/apis/v8

        Rhino homepage at http://www.mozilla.org/rhino

Using the Lisp backend

    perl perlito.pl -Blisp -e 'class Main { say "hello, World!" }'

    Creating an executable image:

    perl perlito.pl -Clisp-bin util/perlito.pl 
    mv tmp.out perlito-lisp
    ./perlito-lisp -Clisp t/04-op.t

    See also: SBCL homepage at http://www.sbcl.org

Using the Parrot backend

    The parrot backend is not bootstrapped, and it doesn't pass all tests.

    The perl 5 backend can be used to compile MiniPerl6 to parrot:

    perl perlito.pl -Bparrot -e 'class Main { say "hello, World!" }'

    See also: Parrot homepage at http://www.parrot.org

Using the Perl 5 backend

    perl perlito.pl -e 'class Main { say "hello, World!" }'

    See also: Perl 5 homepage at http://www.perl.org

    Creating a bootstrapped compiler:

    # compile util/perlito.pl using perlito.pl:
    perl perlito.pl -Cperl5 util/perlito.pl > perlito-perl5.pl 
    # testing the bootstrap 
    perl -Ilib5 perlito-perl5.pl -Cperl5 util/perlito.pl > perlito-new.pl

Using the Python backend

    # initialize "./libpy" and compile "perlito.py"
    . util-python/build-python.sh

    # using the perlito.py compiler
    PYTHONPATH=libpy python perlito.py -Cpython -e 'class Main { say "hello, World!" }' | PYTHONPATH=libpy python 

    # using the perlito.pl compiler
    perl perlito.pl -Bpython -e 'class Main { say "hello, World!" }'

Using the Ruby backend

    # initialize "./librb" and compile "perlito.rb"
    . util-ruby/build-ruby.sh

    # using the perlito.rb compiler
    RUBYLIB=librb ruby1.9 perlito.rb -Cruby -e 'class Main { say "hello, World!" }' | RUBYLIB=librb ruby1.9 

    # using the perlito.pl compiler
    perl perlito.pl -Bruby1.9 -e 'class Main { say "hello, World!" }'

Producing AST output

    perl perlito.pl -Cast-json -e 'class Main { say "hello, World!" }'

RUNNING TESTS

Testing a backend using the Perl5 based compiler

    prove -e "perl perlito.pl -Bjs"
    prove -e "perl perlito.pl -Bperl5"
    prove -e "perl perlito.pl -Blisp"
    prove -e "perl perlito.pl -Bgo"
    prove -e "perl perlito.pl -Bpython"
    prove -e "perl perlito.pl -Bruby1.9"

AUTHORS

Flavio Soibelmann Glock - fglock@gmail.com
The Pugs Team - perl6-compiler@perl.org

SEE ALSO

The Perl 6 homepage at http://dev.perl.org/perl6
The Pugs homepage at http://pugscode.org
The Perlito homepage at http://perlito.org

COPYRIGHT

Copyright 2006, 2009, 2010 by Flavio Soibelmann Glock, Audrey Tang and others.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See http://www.perl.com/perl/misc/Artistic.html

