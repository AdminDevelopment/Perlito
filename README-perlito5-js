Perlito5 Data model Overview


method call
- lookup the method in the _class_ attribute; follow the class hierarchy until the UNIVERSAL base class.
- do a native call on the method. The invocant is the first argument. "this" is not used.

subroutine call 
- lookup the subroutine in the current namespace; follow the hierarchy until the CORE base class.
- do a native method call. "this" is not used.

Hash
- native {}

Array
- native []

Scalar
- native value

HashRef
- native {} wrapped in a "HashRef" object

ArrayRef
- native [] wrapped in a "ArrayRef" object

ScalarRef
- native value wrapped in a "ScalarRef" object

CodeRef
- native value

Object
- one of the reference types, with a _class_ attribute

Class
- classes are stored in the CLASS global hash
- the _class_ attribute points to the class itself
- classes inherit from UNIVERSAL

Namespace
- namespaces are stored in the NAMESPACE global hash
- current namespace object is in the PKG variable
- Namespace inherits from CORE, which inherits from CORE::GLOBAL
- Namespace is a copy of the Class, but with a different inheritance
- Namespace and Class are updated in parallel, both when a sub is declared or when using typeglob assignment

Calling context ("wantarray", caller)
- TODO

Alias
- TODO
- using String/Boolean/Number (boxed types) as SCALARs doesn't seem to work

List (eg. subroutine return value)
- native []

AUTOLOAD
- TODO


Javascript resources


https://github.com/eriwen/javascript-stacktrace
- how to get a stacktrace in browsers

https://github.com/audreyt/pugs/tree/master/perl5/PIL2JS
- Pugs Perl6 in javascript


Cell-based aliasing (TODO)


- slow
- allows aliasing (rw parameters to functions)
- allows "tie", because collection access is done through methods
- simplifies autovivification
- allows lvalue subroutines, such as chop(), chomp(), keys(), pos(), substr(), undef()
- allows "our"

- examples:

v = new Cell();
v.set(5);
f(v);   // f gets a copy of the cell; v.set() inside f() modifies the original variable.
1 + v;  // calls v.valueOf()
x = v;  // alias (copies the cell); v.set() modifies x.valueOf()
x.set( v.valueOf() );  // copies the value (doesn't alias)

h.lookup("x");  // looks up h["x"] for a cell; autovivifies if needed
v.lookup("x");  // error if the cell in v contains something else than undef or an arrayref

- see mp6_Scalar class in src6/lib/Perlito/Python/Runtime.py

