// Do not edit this file - Generated by Perlito 7.0
// Do not edit this file - Generated by Perlito 7.0
// lib/Perlito/Javascript/Runtime.js
//
// Runtime for "Perlito" Perlito-in-Javascript
//
// AUTHORS
//
// Flavio Soibelmann Glock  fglock@gmail.com
// The Pugs Team  perl6-compiler@perl.org
//
// SEE ALSO
//
// The Perl 6 homepage at http://dev.perl.org/perl6
// The Pugs homepage at http://pugscode.org/
//
// COPYRIGHT
//
// Copyright 2009, 2010, 2011 by Flavio Soibelmann Glock and others.
// 
// This program is free software; you can redistribute it and/or modify it
// under the same terms as Perl itself.
// 
// See http://www.perl.com/perl/misc/Artistic.html

if (typeof arguments === 'object') {
    List_ARGS = arguments;
}

// class IO
if (typeof IO !== 'object') {
    IO = function() {};
    IO = new IO;
}

IO.slurp = function(filename) {
    if (typeof readFile == 'function') {
        return readFile(filename);
    }
    if (typeof read == 'function') {
        // v8
        return read(filename);
    }
    die("IO.slurp() not implemented");
};

// class Main
if (typeof Main !== 'object') {
    Main = function() {};
    Main = new Main;
}

(function() {
    Main.lisp_escape_string = function(s) {
        var o = s;
        o = o.replace(/\\/g, "\\\\");
        o = o.replace(/"/g, "\\\"");
        return o;
    };
    Main.to_javascript_namespace = function(s) {
        var o = s;
        o = o.replace(/::/g, "$");
        return o;
    };
    Main.to_lisp_namespace = function(s) {
        var o = s;
        o = o.replace(/[$@%]/, "");
        o = o.replace(/::/g, "-");
        return "mp-" + o;
    };
    Main.to_go_namespace = function(s) {
        var o = s;
        o = o.replace(/[$@%]/, "");
        o = o.replace(/::/g, "__");
        return o;
    };
    Main._dump = function(o) {
        var out = [];
        for (var i in o) {
            if (i.match(/^v_/)) {
                out.push(i.substr(2) + " => " + perl(o[i]));
            }
            // else if (i.match(/^/)) {
            // } else {
            //    out.push(i + " => " + perl(o[i]));
            // }
        }
        return out.join(", ");
    };
})();

if (typeof Perlito$Match !== 'object') {
    Perlito$Match = function() {};
    Perlito$Match = new Perlito$Match;
    Perlito$Match.isa = function(s) {
        return s == 'Perlito::Match';
    };
    Perlito$Match.perl = function() {
        return 'Perlito::Match.new(' + Main._dump(this) + ')';
    };
}

v_MATCH = {};
v_MATCH.__proto__ = Perlito$Match;

Perlito$Match.hash = function() {
    return this;
};

if (typeof f_print !== 'function') {
    var buf = "";
    f_print = function() {
        var i;
        for (i = 0; i < f_print.arguments.length; i++) {
            var s = string(f_print.arguments[i]);
            if (s.substr(s.length - 2, 2) == "\n") {
                print(buf + s.substr(0, s.length - 2));
                buf = "";
            }
            else if (s.substr(s.length - 1, 1) == "\n") {
                print(buf + s.substr(0, s.length - 1));
                buf = "";
            }
            else {
                buf = buf + s;
            }
        }
        return true;
    };
}

if (typeof say !== 'function') {
    say = function() {
        var i;
        for (i = 0; i < say.arguments.length; i++) {
            f_print(say.arguments[i]);
        }
        return f_print("\n");
    };
}

if (typeof die !== 'function') {
    die = function() {
        var i;
        var s = '';
        for (i = 0; i < die.arguments.length; i++) {
            s = s + die.arguments[i];
        }
        f_print("Died: " + s + "\n");
    };
}

if (typeof warn !== 'function') {
    warn = function() {
        var i;
        var s = '';
        for (i = 0; i < warn.arguments.length; i++) {
            s = s + warn.arguments[i];
        }
        f_print("Warning: " + s + "\n");
    };
}

chr = function(o) {
    return String.fromCharCode(num(o));
};

elems = function(o) {
    if (o == null) {
        return 1;
    };
    if (typeof o.elems === 'function') {
        return o.elems();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o.length;
    }
    switch (typeof o) {
        case "string": return 1;
        case "function": return 1;
        case "number": return 1;
        case "boolean": return 1;
    }
    var l = 0;
    for (var i in o) {
        l++;
    }
    return l;
};

values = function(o) {
    if (o == null) {
        return [];
    };
    if (typeof o.values === 'function') {
        return o.values();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o;
    }
    switch (typeof o) {
        case "string": return [o];
        case "function": return [o];
        case "number": return [o];
        case "boolean": return [o];
    }
    var out = [];
    for (var i in o) {
        out.push(o[i]);
    }
    return out;
};

keys = function(o) {
    if (o == null) {
        return [];
    }
    if (typeof o.keys === 'function') {
        return o.keys();
    }
    var out = [];
    if (typeof o === 'object' && (o instanceof Array)) {
        var count = 0;
        for (var i in o) {
            out.push(count);
            count++;
        }
        return out;
    }
    for (var i in o) {
        out.push(i);
    }
    return out;
};

pairs = function(o) {
    if (o == null) {
        return [];
    }
    if (typeof o.pairs === 'function') {
        return o.pairs();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var count = 0;
        for (var i in o) {
            var tmp = {
                v_key: count,
                v_value: i
            };
            tmp.__proto__ = Pair;
            out.push(tmp);
            count++;
        }
        return o;
    }
    var out = [];
    for (var i in o) {
        var tmp = {
            v_key: i,
            v_value: o[i]
        };
        tmp.__proto__ = Pair;
        out.push(tmp);
    }
    return out;
};

Array.prototype.grep = function grep(f) {
    var res = new Array()
    for (var i in this) {
        if (bool(f(this[i]))) {
            res.push(this[i])
        }
    }
    return res
}

var _id = 0;
id = function(o) {
    if (o == null) {
        return '_id_' + 'Mu';
    }
    if (typeof o.id === 'function') {
        return o.id();
    }
    if (o._id) {
        return o._id;
    }
    switch (typeof o) {
        case "string": return '_id_str_' + o;
        case "number": return '_id_num_' + o;
        case "boolean": return '_id_bool_' + o;
    }
    o._id = ++_id;
    return o._id;
};

perl = function(o) {
    if (o == null) {
        return 'Mu';
    }
    if (typeof o.perl === 'function') {
        return o.perl();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var out = [];
        for (var i = 0; i < o.length; i++) {
            out.push(perl(o[i]));
        }
        return "[" + out.join(", ") + "]";
    }
    switch (typeof o) {
        case "string": return '"' + Main.lisp_escape_string(o) + '"';
        case "function": return "function";
        case "number": return o;
        case "boolean": return o;
    }
    var out = [];
    for (var i in o) {
        out.push(i + " => " + perl(o[i]));
    }
    return '{' + out.join(", ") + '}';
};

isa = function(o, s) {
    if (o == null) {
        if (s == 'Mu') {
            return true;
        } else {
            return false;
        }
    }
    if (typeof o.isa === 'function') {
        return o.isa(s);
    }
    switch (typeof o) {
        case "string": return (s == 'Str');
        case "number": return (s == 'Num');
    }
    if (s == 'Array' && typeof o === 'object' && (o instanceof Array)) {
        return (1);
    }
    return false;
};

scalar = function(o) {
    if (o == null) {
        return o;
    }
    if (typeof o.scalar === 'function') {
        return o.scalar();
    }
    return o;
};

string = function(o) {
    if (o == null) {
        return "";
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var out = [];
        for (var i = 0; i < o.length; i++) {
            out.push(string(o[i]));
        }
        return out.join(" ");
    }
    if (typeof o.string === 'function') {
        return o.string();
    }
    if (typeof o !== 'string') {
        return "" + o;
    }
    return o;
};

num = function(o) {
    if (o == null) {
        return 0;
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o.length;
    }
    if (typeof o.num === 'function') {
        return o.num();
    }
    if (typeof o !== 'number') {
        return parseFloat(string(o));
    }
    return o;
};

add = function(o1, o2) {
    return num(o1) + num(o2)
};

bool = function(o) {
    if (o == null) {
        return o;
    }
    if (typeof o === 'boolean') {
        return o;
    }
    if (typeof o === 'number') {
        return o;
    }
    if (typeof o === 'string') {
        return o != '' && o != '0';
    }
    if (typeof o.bool === 'function') {
        return o.v_bool;
    }
    if (typeof o.length === 'number') {
        return o.length;
    }
    for (var i in o) {
        return true;
    }
    return false;
};

and = function(a, fb) {
    if (bool(a)) {
        return fb();
    }
    return a;
};

or = function(a, fb) {
    if (bool(a)) {
        return a;
    }
    return fb();
};

defined_or = function(a, fb) {
    if (a == null) {
        return fb();
    }
    return a;
};

pop = function(o) {
    if (o.length == null) {
        return null;
    }
    return o.pop();
};

shift = function(o) {
    if (o.length == null) {
        return null;
    }
    return o.shift();
};

push = function(o, v) {
    return o.push(v);
};

unshift = function(o, v) {
    return o.unshift(v);
};

index = function(o, s) {
    return o.indexOf(s);
};

chars = function(o) {
    if (typeof o.string === 'function') {
        return o.string().length;
    }
    return o.length;
};

// regex primitives
if (typeof Perlito$Grammar !== 'object') {
    Perlito$Grammar = function() {};
    Perlito$Grammar = new Perlito$Grammar;
}

Perlito$Grammar.word = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\w/) != null
    };
    tmp.__proto__ = Perlito$Match;
    return tmp;
};

Perlito$Grammar.digit = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\d/) != null
    };
    tmp.__proto__ = Perlito$Match;
    return tmp;
};

Perlito$Grammar.space = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\s/) != null
    };
    tmp.__proto__ = Perlito$Match;
    return tmp;
};


// class GLOBAL
if (typeof GLOBAL !== 'object') {
  GLOBAL = function() {};
  GLOBAL = new GLOBAL;
  GLOBAL.isa = function (s) { return s == 'GLOBAL'; };
  GLOBAL.perl = function () { return 'GLOBAL.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = GLOBAL;
    // use v6
;// class Perlito::Match
if (typeof Perlito$Match !== 'object') {
  Perlito$Match = function() {};
  Perlito$Match = new Perlito$Match;
  Perlito$Match.isa = function (s) { return s == 'Perlito::Match'; };
  Perlito$Match.perl = function () { return 'Perlito::Match.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Match;
  // accessor from
  Perlito$Match.v_from = null;
  Perlito$Match.from = function () { return this.v_from; };
  // accessor to
  Perlito$Match.v_to = null;
  Perlito$Match.to = function () { return this.v_to; };
  // accessor str
  Perlito$Match.v_str = null;
  Perlito$Match.str = function () { return this.v_str; };
  // accessor bool
  Perlito$Match.v_bool = null;
  Perlito$Match.bool = function () { return this.v_bool; };
  // accessor capture
  Perlito$Match.v_capture = null;
  Perlito$Match.capture = function () { return this.v_capture; };
  // method scalar
  Perlito$Match.scalar = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_bool) ) { return (function () {
                if ( bool((v_self.v_capture != null)) ) { (function () {
                    throw(v_self.v_capture);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((v_self.v_str || "").substr(v_self.v_from, ((v_self.v_to - v_self.v_from))));
            })(); }
            else { return (function () {
                throw('');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Match.scalar;  // v8 bug workaround
  // method string
  Perlito$Match.string = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_bool) ) { return (function () {
                if ( bool((v_self.v_capture != null)) ) { (function () {
                    throw(v_self.v_capture);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((v_self.v_str || "").substr(v_self.v_from, ((v_self.v_to - v_self.v_from))));
            })(); }
            else { return (function () {
                throw('');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Match.string;  // v8 bug workaround
})()
;// class Pair
if (typeof Pair !== 'object') {
  Pair = function() {};
  Pair = new Pair;
  Pair.isa = function (s) { return s == 'Pair'; };
  Pair.perl = function () { return 'Pair.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Pair;
  // accessor key
  Pair.v_key = null;
  Pair.key = function () { return this.v_key; };
  // accessor value
  Pair.v_value = null;
  Pair.value = function () { return this.v_value; };
  // method perl
  Pair.perl = function () {
    var v_self = this;
        try {
            throw((string(v_self.v_key) + string(' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ') + string(perl(v_self.v_value))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Pair.perl;  // v8 bug workaround
})()
;// class Main
if (typeof Main !== 'object') {
  Main = function() {};
  Main = new Main;
  Main.isa = function (s) { return s == 'Main'; };
  Main.perl = function () { return 'Main.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Main;
  // sub to_lisp_identifier
  Main.to_lisp_identifier = function (v_ident) {
        try {
            throw((string('sv-') + string(v_ident)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_lisp_identifier;  // v8 bug workaround
  // sub lisp_dump_object
  Main.lisp_dump_object = function (v_class_name, v_data) {
        try {
            throw((string(v_class_name) + string(String.fromCharCode(40) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( perl(a_[i]) ) } return out; })(v_data)).join(', ')) + string(' ' + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.lisp_dump_object;  // v8 bug workaround
})()
;    // use v6
;// class Javascript
if (typeof Javascript !== 'object') {
  Javascript = function() {};
  Javascript = new Javascript;
  Javascript.isa = function (s) { return s == 'Javascript'; };
  Javascript.perl = function () { return 'Javascript.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Javascript;
  var Hash_reserved = {};
  // sub tab
  Javascript.tab = function (v_level) {
        try {
            var v_s = null;

            var v_count = null;

(v_s = '');
(v_count = v_level);
            for ( ; bool((v_count > 0));  ) { (function () { (v_s = (string(v_s) + string((string('    ')))));
(v_count = (v_count - 1));; })() };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Javascript.tab;  // v8 bug workaround
  // sub escape_string
  Javascript.escape_string = function (v_s) {
        try {
            var List_out = [];

            var v_tmp = null;

(v_tmp = '');
            if ( bool((v_s == '')) ) { (function () {
                throw((string(String.fromCharCode(39) + String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_i) {                 var v_c = null;

(v_c = (v_s || "").substr(v_i, 1));
                if ( bool(or(or(or(or(or(or(or(or(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= 'A')), function () { return ((v_c <= 'Z')); })); }), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return ((v_c == '_')); }), function () { return ((v_c == ',')); }), function () { return ((v_c == '.')); }), function () { return ((v_c == ':')); }), function () { return ((v_c == '-')); }), function () { return ((v_c == '+')); }), function () { return ((v_c == '*')); }), function () { return ((v_c == ' ')); })) ) { (function () {
(v_tmp = (string(v_tmp) + string(v_c)));;
                })(); }
                else { (function () {
                    if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
List_out.push((string('String.fromCharCode' + String.fromCharCode(40)) + string((function () { 
    return((v_c).charCodeAt(0));
})()) + string(String.fromCharCode(41))));
(v_tmp = '');;
                })(); };; })(a_[i_]) } })((function (a) { for (var i=0, l=(chars(v_s) - 1); i<=l; ++i){ a.push(i) }; return a })([]));
            if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(List_out.join(' + '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Javascript.escape_string;  // v8 bug workaround
  // sub escape_function
  Javascript.escape_function = function (v_s) {
        try {
            if ( bool((Hash_reserved).hasOwnProperty(v_s)) ) { (function () {
                throw((string('f_') + string(v_s)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Javascript.escape_function;  // v8 bug workaround
(Hash_reserved = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['print']  = 1); })();
    return(Hash_a);
})());})()
;// class Perlito::Javascript::LexicalBlock
if (typeof Perlito$Javascript$LexicalBlock !== 'object') {
  Perlito$Javascript$LexicalBlock = function() {};
  Perlito$Javascript$LexicalBlock = new Perlito$Javascript$LexicalBlock;
  Perlito$Javascript$LexicalBlock.isa = function (s) { return s == 'Perlito::Javascript::LexicalBlock'; };
  Perlito$Javascript$LexicalBlock.perl = function () { return 'Perlito::Javascript::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Javascript$LexicalBlock;
  // accessor block
  Perlito$Javascript$LexicalBlock.v_block = null;
  Perlito$Javascript$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito$Javascript$LexicalBlock.v_needs_return = null;
  Perlito$Javascript$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito$Javascript$LexicalBlock.v_top_level = null;
  Perlito$Javascript$LexicalBlock.top_level = function () { return this.v_top_level; };
  // method emit_javascript
  Perlito$Javascript$LexicalBlock.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Javascript$LexicalBlock.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Perlito$Javascript$LexicalBlock.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var List_block = [];

            var List_str = [];

            var v_last_statement = null;

            if ( bool(v_self.v_top_level) ) { (function () {
                var v_block = null;

(v_block = (function () { var tmp = {v_block: v_self.block(),v_needs_return: v_self.needs_return(),v_top_level: 0}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
                throw((string(Javascript.tab(v_level)) + string('try ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string('catch' + String.fromCharCode(40) + 'err' + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 1))) + string('if ' + String.fromCharCode(40) + ' err instanceof Error ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 2))) + string('throw' + String.fromCharCode(40) + 'err' + String.fromCharCode(41) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 1))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 1))) + string('else ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 2))) + string('return' + String.fromCharCode(40) + 'err' + String.fromCharCode(41) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(add(v_level, 1))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_block, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(( bool(List_block) ? false : true)) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string('null' + String.fromCharCode(59))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return (v_decl.decl() == 'my'); })) ) { (function () {
List_str.push((string(Javascript.tab(v_level)) + string(v_decl.emit_javascript_init())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62)); })) ) { (function () {
                    var v_var = null;

(v_var = v_decl.arguments()[0]);
                    if ( bool(and(isa(v_var, 'Decl'), function () { return (v_var.decl() == 'my'); })) ) { (function () {
List_str.push((string(Javascript.tab(v_level)) + string(v_var.emit_javascript_init())));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_block);
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(List_block));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(( bool((and(isa(v_decl, 'Decl'), function () { return (v_decl.decl() == 'my'); }))) ? false : true)) ) { (function () {
List_str.push((string(v_decl.emit_javascript_indented(v_level)) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_block);
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_body = null;

                    var v_otherwise = null;

(v_cond = v_last_statement.cond());
(v_body = v_last_statement.body());
(v_otherwise = v_last_statement.otherwise());
                    if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_body = (function () { var tmp = {v_block: v_body.stmts(),v_needs_return: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
List_str.push((string(Javascript.tab(v_level)) + string('if ' + String.fromCharCode(40) + ' ') + string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string(v_cond.emit_javascript()) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return ' + String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41) + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));
                    if ( bool(v_otherwise) ) { (function () {
(v_otherwise = (function () { var tmp = {v_block: v_otherwise.stmts(),v_needs_return: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
List_str.push((string(Javascript.tab(v_level)) + string('else ' + String.fromCharCode(123) + ' return ' + String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_otherwise.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41) + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    if ( bool(or(and(isa(v_last_statement, 'Apply'), function () { return (v_last_statement.code() == 'return'); }), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
List_str.push(v_last_statement.emit_javascript_indented(v_level));;
                    })(); }
                    else { (function () {
List_str.push((string(Javascript.tab(v_level)) + string('return' + String.fromCharCode(40)) + string(v_last_statement.emit_javascript()) + string(String.fromCharCode(41))));;
                    })(); };;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(List_str.join((string(String.fromCharCode(10))))) + string(String.fromCharCode(59))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Javascript$LexicalBlock.emit_javascript_indented;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor name
  CompUnit.v_name = null;
  CompUnit.name = function () { return this.v_name; };
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // accessor body
  CompUnit.v_body = null;
  CompUnit.body = function () { return this.v_body; };
  // method emit_javascript
  CompUnit.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  CompUnit.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_class_name = null;

            var v_str = null;

(v_class_name = Main.to_javascript_namespace(v_self.v_name));
(v_str = (string(String.fromCharCode(47) + String.fromCharCode(47) + ' class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('if ' + String.fromCharCode(40) + 'typeof ') + string(v_class_name) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(39) + 'object' + String.fromCharCode(39) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' function' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' new ') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function('isa')) + string(' ' + String.fromCharCode(61) + ' function ' + String.fromCharCode(40) + 's' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return s ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(39)) + string(v_self.v_name) + string(String.fromCharCode(39) + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function('perl')) + string(' ' + String.fromCharCode(61) + ' function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return ' + String.fromCharCode(39)) + string(v_self.v_name) + string('.new' + String.fromCharCode(40) + String.fromCharCode(39) + ' + Main._dump' + String.fromCharCode(40) + 'this' + String.fromCharCode(41) + ' + ' + String.fromCharCode(39) + String.fromCharCode(41) + String.fromCharCode(39) + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  var v__NAMESPACE ' + String.fromCharCode(61) + ' ') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string(v_decl.emit_javascript_init())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62)); })) ) { (function () {
                    var v_var = null;

(v_var = v_decl.arguments()[0]);
                    if ( bool(and(isa(v_var, 'Decl'), function () { return (v_var.decl() == 'my'); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string(v_var.emit_javascript_init())));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' accessor ') + string(v_decl.var().name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.v_') + string(v_decl.var().name()) + string(' ' + String.fromCharCode(61) + ' null' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function(v_decl.var().name())) + string(' ' + String.fromCharCode(61) + ' function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return this.v_') + string(v_decl.var().name()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Method')) ) { (function () {
                    var v_sig = null;

                    var v_pos = null;

                    var v_invocant = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_pos = v_sig.positional());
(v_invocant = v_sig.invocant());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function(v_decl.name())) + string(' ' + String.fromCharCode(61) + ' function ' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos)).join(', ')) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('    var ') + string(v_invocant.emit_javascript()) + string(' ' + String.fromCharCode(61) + ' this' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function(v_decl.name())) + string(String.fromCharCode(59) + '  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' v8 bug workaround') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                    var v_sig = null;

                    var v_pos = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_pos = v_sig.positional());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' sub ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function(v_decl.name())) + string(' ' + String.fromCharCode(61) + ' function ' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos)).join(', ')) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Javascript.escape_function(v_decl.name())) + string(String.fromCharCode(59) + '  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' v8 bug workaround') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(and((( bool((and(isa(v_decl, 'Decl'), function () { return (or(((v_decl.decl() == 'has')), function () { return ((v_decl.decl() == 'my')); })); }))) ? false : true)), function () { return (( bool((isa(v_decl, 'Method'))) ? false : true)); }), function () { return (( bool((isa(v_decl, 'Sub'))) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_javascript_indented(add(v_level, 1))) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            return((v_str = (string(v_str) + string(String.fromCharCode(125)) + string(String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41)) + string((string(String.fromCharCode(10)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript_indented;  // v8 bug workaround
  // sub emit_javascript_program
  CompUnit.emit_javascript_program = function (v_comp_units) {
        try {
            var v_str = null;

(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_javascript())));; })(a_[i_]) } })(((v_comp_units)));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // accessor int
  Val$Int.v_int = null;
  Val$Int.int = function () { return this.v_int; };
  // method emit_javascript
  Val$Int.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Int.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // accessor bit
  Val$Bit.v_bit = null;
  Val$Bit.bit = function () { return this.v_bit; };
  // method emit_javascript
  Val$Bit.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Bit.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string((( bool(v_self.v_bit) ? 'true' : 'false')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // accessor num
  Val$Num.v_num = null;
  Val$Num.num = function () { return this.v_num; };
  // method emit_javascript
  Val$Num.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Num.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // accessor buf
  Val$Buf.v_buf = null;
  Val$Buf.buf = function () { return this.v_buf; };
  // method emit_javascript
  Val$Buf.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Buf.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(Javascript.escape_string(v_self.v_buf))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // accessor sig
  Lit$Block.v_sig = null;
  Lit$Block.sig = function () { return this.v_sig; };
  // accessor stmts
  Lit$Block.v_stmts = null;
  Lit$Block.stmts = function () { return this.v_stmts; };
  // method emit_javascript
  Lit$Block.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Block.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

(v_sig = 'v__');
            if ( bool(v_self.v_sig) ) { (function () {
(v_sig = v_self.v_sig.emit_javascript_indented(add(v_level, 1)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Javascript.tab(v_level)) + string((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40)) + string(v_sig) + string(String.fromCharCode(41) + ' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_stmts,v_needs_return: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // accessor array1
  Lit$Array.v_array1 = null;
  Lit$Array.array1 = function () { return this.v_array1; };
  // method emit_javascript
  Lit$Array.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Array.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_javascript_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // accessor hash1
  Lit$Hash.v_hash1 = null;
  Lit$Hash.hash1 = function () { return this.v_hash1; };
  // method emit_javascript
  Lit$Hash.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Hash.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_javascript_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_javascript_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // accessor obj
  Index.v_obj = null;
  Index.obj = function () { return this.v_obj; };
  // accessor index_exp
  Index.v_index_exp = null;
  Index.index_exp = function () { return this.v_index_exp; };
  // method emit_javascript
  Index.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Index.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(v_self.v_obj.emit_javascript()) + string(String.fromCharCode(91)) + string(v_self.v_index_exp.emit_javascript()) + string(String.fromCharCode(93))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // accessor obj
  Lookup.v_obj = null;
  Lookup.obj = function () { return this.v_obj; };
  // accessor index_exp
  Lookup.v_index_exp = null;
  Lookup.index_exp = function () { return this.v_index_exp; };
  // method emit_javascript
  Lookup.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lookup.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_str = null;

            var v_var = null;

            var v_var_js = null;

            var v_index_js = null;

(v_str = '');
(v_var = v_self.v_obj);
            if ( bool(isa(v_var, 'Lookup')) ) { (function () {
                var v_var1 = null;

                var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string(String.fromCharCode(91)) + string(v_var.index_exp().emit_javascript()) + string(String.fromCharCode(93))));;
            })(); }
            else { (function () {
(v_var_js = v_var.emit_javascript());;
            })(); };
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_self.v_index_exp.emit_javascript());
(v_str = (string(v_str) + string('return ' + String.fromCharCode(40)) + string(v_var_js) + string(String.fromCharCode(91)) + string(v_index_js) + string(String.fromCharCode(93) + ' ') + string(String.fromCharCode(41) + String.fromCharCode(59) + ' ')));
            throw((string(Javascript.tab(v_level)) + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_javascript_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // accessor sigil
  Var.v_sigil = null;
  Var.sigil = function () { return this.v_sigil; };
  // accessor twigil
  Var.v_twigil = null;
  Var.twigil = function () { return this.v_twigil; };
  // accessor namespace
  Var.v_namespace = null;
  Var.namespace = function () { return this.v_namespace; };
  // accessor name
  Var.v_name = null;
  Var.name = function () { return this.v_name; };
  // method emit_javascript
  Var.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Var.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_javascript_namespace(v_self.v_namespace)) + string('.')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('v_self.v_') + string(v_self.v_name) + string(''))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_javascript_indented;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('.') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // accessor name
  Proto.v_name = null;
  Proto.name = function () { return this.v_name; };
  // method emit_javascript
  Proto.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Proto.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(Main.to_javascript_namespace(v_self.v_name))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_javascript_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // accessor invocant
  Call.v_invocant = null;
  Call.invocant = function () { return this.v_invocant; };
  // accessor hyper
  Call.v_hyper = null;
  Call.hyper = function () { return this.v_hyper; };
  // accessor method
  Call.v_method = null;
  Call.method = function () { return this.v_method; };
  // accessor arguments
  Call.v_arguments = null;
  Call.arguments = function () { return this.v_arguments; };
  // method emit_javascript
  Call.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Call.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

(v_invocant = v_self.v_invocant.emit_javascript());
            if ( bool((v_invocant == 'self')) ) { (function () {
(v_invocant = 'v_self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'new')) ) { (function () {
                var v_str = null;

(v_str = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                     if ( bool(and(isa(v_field, 'Apply'), function () { return (v_field.code() == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62)); })) ) { (function () {
v_str.push((string('v_') + string(v_field.arguments()[0].buf()) + string(': ') + string(v_field.arguments()[1].emit_javascript())));;
                    })(); }
                    else { (function () {
                        die('Error in constructor, field: ', perl(v_field));;
                    })(); };; })(a_[i_]) } })(v_self.v_arguments);
                throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('var tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123)) + string(v_str.join(',')) + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('tmp.__proto__ ' + String.fromCharCode(61) + ' ') + string(Main.to_javascript_namespace(v_invocant)) + string(String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(or(or(or(or(or(or(or(or(((v_self.v_method == 'perl')), function () { return ((v_self.v_method == 'isa')); }), function () { return ((v_self.v_method == 'id')); }), function () { return ((v_self.v_method == 'scalar')); }), function () { return ((v_self.v_method == 'keys')); }), function () { return ((v_self.v_method == 'values')); }), function () { return ((v_self.v_method == 'pairs')); }), function () { return ((v_self.v_method == 'elems')); }), function () { return ((v_self.v_method == 'say')); }), function () { return ((v_self.v_method == 'chars')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + 'a_' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('var out ' + String.fromCharCode(61) + ' ' + String.fromCharCode(91) + String.fromCharCode(93) + String.fromCharCode(59) + ' ') + string('if ' + String.fromCharCode(40) + ' a_ ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return out' + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('for' + String.fromCharCode(40) + 'var i ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i ' + String.fromCharCode(60) + ' a_.length' + String.fromCharCode(59) + ' i++' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('out.push' + String.fromCharCode(40) + ' ') + string(Javascript.escape_function(v_self.v_method)) + string(String.fromCharCode(40) + 'a_' + String.fromCharCode(91) + 'i' + String.fromCharCode(93) + String.fromCharCode(41) + ' ' + String.fromCharCode(41) + ' ' + String.fromCharCode(125) + ' return out' + String.fromCharCode(59)) + string(' ' + String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40)) + string(v_invocant) + string(String.fromCharCode(41))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Javascript.escape_function(v_self.v_method)) + string(String.fromCharCode(40)) + string(v_invocant) + string((( bool(v_self.v_arguments) ? (string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', '))) : ''))) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(or(or(or(or(((v_self.v_method == 'join')), function () { return ((v_self.v_method == 'split')); }), function () { return ((v_self.v_method == 'shift')); }), function () { return ((v_self.v_method == 'unshift')); }), function () { return ((v_self.v_method == 'push')); }), function () { return ((v_self.v_method == 'pop')); })) ) { (function () {
                throw((string(v_invocant) + string('.') + string(v_self.v_method) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_self.v_hyper)) ) { (function () {
                throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + 'a_' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('var out ' + String.fromCharCode(61) + ' ' + String.fromCharCode(91) + String.fromCharCode(93) + String.fromCharCode(59) + ' ') + string('if ' + String.fromCharCode(40) + ' a_ ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return out' + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('for' + String.fromCharCode(40) + 'var i ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i ' + String.fromCharCode(60) + ' a_.length' + String.fromCharCode(59) + ' i++' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('out.push' + String.fromCharCode(40) + ' a_' + String.fromCharCode(91) + 'i' + String.fromCharCode(93) + '.') + string(Javascript.escape_function(v_meth)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(41) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return out' + String.fromCharCode(59)) + string(' ' + String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40)) + string(v_invocant) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_meth == 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(v_invocant) + string(String.fromCharCode(41) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Javascript.tab(v_level)) + string(v_invocant) + string('.') + string(Javascript.escape_function(v_meth)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_javascript_indented;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // accessor code
  Apply.v_code = null;
  Apply.code = function () { return this.v_code; };
  // accessor arguments
  Apply.v_arguments = null;
  Apply.arguments = function () { return this.v_arguments; };
  // accessor namespace
  Apply.v_namespace = null;
  Apply.namespace = function () { return this.v_namespace; };
  // method emit_javascript
  Apply.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Apply.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_apply = null;

            var v_code = null;

(v_apply = v_self.op_assign());
            if ( bool(v_apply) ) { (function () {
                throw(v_apply.emit_javascript_indented(v_level));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string(Javascript.tab(v_level)) + string(String.fromCharCode(40)) + string(v_self.v_code.emit_javascript()) + string(String.fromCharCode(41) + '-' + String.fromCharCode(62) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string('v_self')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string('null')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string(String.fromCharCode(40) + 'v_MATCH.v_capture ' + String.fromCharCode(61) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' null' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string(String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ' + String.fromCharCode(34) + String.fromCharCode(34) + String.fromCharCode(41) + '.substr' + String.fromCharCode(40)) + string((v_self.v_arguments[1]).emit_javascript()) + string(', ') + string((v_self.v_arguments[2]).emit_javascript()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'chr')) ) { (function () {
                throw((string('String.fromCharCode' + String.fromCharCode(40)) + string(Javascript.escape_function('num')) + string(String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ord')) ) { (function () {
                throw((string(String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41) + '.charCodeAt' + String.fromCharCode(40) + '0' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('parseInt' + String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('parseFloat' + String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62))) ) { (function () {
                throw((string(Javascript.escape_function('string')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(33) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40) + ' ') + string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(63) + ' false : true' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(63) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40) + ' ') + string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(63) + ' true : false' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(36) + String.fromCharCode(62))) ) { (function () {
                throw((string(Javascript.escape_function('scalar')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(37) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + '.') + string(Javascript.escape_function('hash')) + string(String.fromCharCode(40) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:' + String.fromCharCode(60) + '++' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + '++')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:' + String.fromCharCode(60) + '--' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + '--')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + '++' + String.fromCharCode(62))) ) { (function () {
                throw((string('++' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + '--' + String.fromCharCode(62))) ) { (function () {
                throw((string('--' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(Javascript.escape_function('string')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join((string(String.fromCharCode(41) + ' + ') + string(Javascript.escape_function('string')) + string(String.fromCharCode(40))))) + string(String.fromCharCode(41) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '+' + String.fromCharCode(62))) ) { (function () {
                throw((string(Javascript.escape_function('add')) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '-' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' - ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '*' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' * ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(47) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(62) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(62) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(60) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(60) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(62) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(62) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(60) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '..' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + 'a' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('for ' + String.fromCharCode(40) + 'var i' + String.fromCharCode(61)) + string(v_self.v_arguments[0].emit_javascript()) + string(', l' + String.fromCharCode(61)) + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ') + string('i' + String.fromCharCode(60) + String.fromCharCode(61) + 'l' + String.fromCharCode(59) + ' ++i' + String.fromCharCode(41)) + string(String.fromCharCode(123) + ' ') + string('a.push' + String.fromCharCode(40) + 'i' + String.fromCharCode(41) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return a ') + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(91) + String.fromCharCode(93) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(62)), function () { return (v_code == 'infix:' + String.fromCharCode(60) + 'and' + String.fromCharCode(62)); })) ) { (function () {
                throw((string(Javascript.escape_function('and')) + string(String.fromCharCode(40)) + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(62)), function () { return (v_code == 'infix:' + String.fromCharCode(60) + 'or' + String.fromCharCode(62)); })) ) { (function () {
                throw((string(Javascript.escape_function('or')) + string(String.fromCharCode(40)) + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(62))) ) { (function () {
                throw((string(Javascript.escape_function('defined_or')) + string(String.fromCharCode(40)) + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'eq' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'ne' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'ge' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(62) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'le' + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(60) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(33) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(Javascript.escape_function('id')) + string(String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string(Javascript.escape_function('id')) + string(String.fromCharCode(40)) + string((v_self.v_arguments[1]).emit_javascript()) + string(String.fromCharCode(41) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string(String.fromCharCode(40)) + string((v_arg.obj()).emit_javascript()) + string(String.fromCharCode(41) + '.hasOwnProperty' + String.fromCharCode(40)) + string((v_arg.index_exp()).emit_javascript()) + string(String.fromCharCode(41))));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:' + String.fromCharCode(60) + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40) + ' ') + string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_javascript()) + string(String.fromCharCode(41)) + string(' ' + String.fromCharCode(63) + ' ') + string((v_self.v_arguments[1]).emit_javascript()) + string(' : ') + string((v_self.v_arguments[2]).emit_javascript()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62))) ) { (function () {
                throw((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw(v__NAMESPACE.emit_javascript_bind(v_self.v_arguments[0], v_self.v_arguments[1]));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                throw((string(Javascript.tab(v_level)) + string('throw' + String.fromCharCode(40)) + string((( bool(v_self.v_arguments) ? v_self.v_arguments[0].emit_javascript() : 'null'))) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_namespace) ) { (function () {
(v_code = (string(Main.to_javascript_namespace(v_self.v_namespace)) + string('.') + string(Javascript.escape_function(v_code))));;
            })(); }
            else { (function () {
                if ( bool(and(and(and(and(and(and(and(and(and(((v_code != 'index')), function () { return ((v_code != 'die')); }), function () { return ((v_code != 'shift')); }), function () { return ((v_code != 'unshift')); }), function () { return ((v_code != 'push')); }), function () { return ((v_code != 'pop')); }), function () { return ((v_code != 'chr')); }), function () { return ((v_code != 'say')); }), function () { return ((v_code != 'print')); }), function () { return ((v_code != 'warn')); })) ) { (function () {
(v_code = (string('v__NAMESPACE.') + string(Javascript.escape_function(v_code))));;
                })(); }
                else { (function () {
(v_code = Javascript.escape_function(v_self.v_code));;
                })(); };;
            })(); };
            return((string(Javascript.tab(v_level)) + string(v_code) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript_indented;  // v8 bug workaround
  // sub emit_javascript_bind
  Apply.emit_javascript_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Lit::Array')) ) { (function () {
                var v_a = null;

                var v_str = null;

                var v_i = null;

(v_a = v_parameters.array1());
(v_str = 'do ' + String.fromCharCode(123) + ' ');
(v_i = 0);
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_str = (string(v_str) + string(' ') + string(v__NAMESPACE.emit_javascript_bind(v_var, (function () { var tmp = {v_obj: v_arguments,v_index_exp: (function () { var tmp = {v_int: v_i}; tmp.__proto__ = Val$Int; return tmp; })()}; tmp.__proto__ = Index; return tmp; })())) + string(String.fromCharCode(59) + ' ')));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_a));
                throw((string(v_str) + string(v_parameters.emit_javascript()) + string(' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lit::Hash')) ) { (function () {
                var v_a = null;

                var v_b = null;

                var v_str = null;

                var v_i = null;

                var v_arg = null;

(v_a = v_parameters.hash1());
(v_b = v_arguments.hash1());
(v_str = 'do ' + String.fromCharCode(123) + ' ');
(v_i = 0);
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_arg = (function () { var tmp = {v_code: 'Mu'}; tmp.__proto__ = Apply; return tmp; })());
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var2) {                         if ( bool(((v_var2[0]).buf() == (v_var[0]).buf())) ) { (function () {
(v_arg = v_var2[1]);;
                        })(); }
                        else { (function () {
                            null;
                        })(); };; })(a_[i_]) } })((v_b));
(v_str = (string(v_str) + string(' ') + string(v__NAMESPACE.emit_javascript_bind(v_var[1], v_arg)) + string(String.fromCharCode(59) + ' ')));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_a));
                throw((string(v_str) + string(v_parameters.emit_javascript()) + string(' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                throw((string(String.fromCharCode(40)) + string((v_parameters.invocant()).emit_javascript()) + string('.v_') + string(v_parameters.method()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lookup')) ) { (function () {
                var v_str = null;

                var v_var = null;

                var v_var_js = null;

                var v_index_js = null;

(v_str = '');
(v_var = v_parameters.obj());
                if ( bool(isa(v_var, 'Lookup')) ) { (function () {
                    var v_var1 = null;

                    var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string(String.fromCharCode(91)) + string(v_var.index_exp().emit_javascript()) + string(String.fromCharCode(93))));;
                })(); }
                else { (function () {
(v_var_js = v_var.emit_javascript());;
                })(); };
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_parameters.index_exp().emit_javascript());
(v_str = (string(v_str) + string('return ' + String.fromCharCode(40)) + string(v_var_js) + string(String.fromCharCode(91)) + string(v_index_js) + string(String.fromCharCode(93) + ' ') + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(String.fromCharCode(41) + String.fromCharCode(59) + ' ')));
                throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Index')) ) { (function () {
                var v_str = null;

                var v_var = null;

                var v_var_js = null;

                var v_index_js = null;

(v_str = '');
(v_var = v_parameters.obj());
                if ( bool(isa(v_var, 'Index')) ) { (function () {
                    var v_var1 = null;

                    var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(91) + String.fromCharCode(93) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string(String.fromCharCode(91)) + string(v_var.index_exp().emit_javascript()) + string(String.fromCharCode(93))));;
                })(); }
                else { (function () {
(v_var_js = v_var.emit_javascript());;
                })(); };
(v_str = (string(v_str) + string('if ' + String.fromCharCode(40)) + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(91) + String.fromCharCode(93) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_parameters.index_exp().emit_javascript());
(v_str = (string(v_str) + string('return ' + String.fromCharCode(40)) + string(v_var_js) + string(String.fromCharCode(91)) + string(v_index_js) + string(String.fromCharCode(93) + ' ') + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(String.fromCharCode(41) + String.fromCharCode(59) + ' ')));
                throw((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            return((string(String.fromCharCode(40)) + string(v_parameters.emit_javascript()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript_bind;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // accessor cond
  If.v_cond = null;
  If.cond = function () { return this.v_cond; };
  // accessor body
  If.v_body = null;
  If.body = function () { return this.v_body; };
  // accessor otherwise
  If.v_otherwise = null;
  If.otherwise = function () { return this.v_otherwise; };
  // method emit_javascript
  If.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  If.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_body = null;

            var v_s = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
(v_s = (string(Javascript.tab(v_level)) + string('if ' + String.fromCharCode(40) + ' ') + string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string(v_cond.emit_javascript()) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41) + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));
            if ( bool(v_self.v_otherwise) ) { (function () {
                var v_otherwise = null;

(v_otherwise = (function () { var tmp = {v_block: v_self.v_otherwise.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
(v_s = (string(v_s) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_otherwise.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41) + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_javascript_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // accessor init
  While.v_init = null;
  While.init = function () { return this.v_init; };
  // accessor cond
  While.v_cond = null;
  While.cond = function () { return this.v_cond; };
  // accessor continue
  While.v_continue = null;
  While.continue = function () { return this.v_continue; };
  // accessor body
  While.v_body = null;
  While.body = function () { return this.v_body; };
  // method emit_javascript
  While.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  While.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body = null;

(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
            throw((string(Javascript.tab(v_level)) + string('for ' + String.fromCharCode(40) + ' ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_javascript()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_cond) ? (string(Javascript.escape_function('bool')) + string(String.fromCharCode(40)) + string(v_self.v_cond.emit_javascript()) + string(String.fromCharCode(41) + String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_javascript()) + string(' ')) : ' '))) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(v_body.emit_javascript_indented(add(v_level, 1))) + string(' ' + String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41)) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_javascript_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // accessor cond
  For.v_cond = null;
  For.cond = function () { return this.v_cond; };
  // accessor body
  For.v_body = null;
  For.body = function () { return this.v_body; };
  // method emit_javascript
  For.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  For.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_body = null;

            var v_sig = null;

(v_cond = v_self.v_cond);
            if ( bool(( bool((and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); }))) ? false : true)) ) { (function () {
(v_cond = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })());
(v_sig = 'v__');
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_sig = v_self.v_body.sig().emit_javascript_indented(add(v_level, 1)));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Javascript.tab(v_level)) + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + 'a_' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' for ' + String.fromCharCode(40) + 'var i_ ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i_ ' + String.fromCharCode(60) + ' a_.length ' + String.fromCharCode(59) + ' i_++' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40)) + string(v_sig) + string(String.fromCharCode(41) + ' ') + string(String.fromCharCode(123)) + string(' '))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string(' ' + String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + 'a_' + String.fromCharCode(91) + 'i_' + String.fromCharCode(93) + String.fromCharCode(41) + ' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(41)) + string(String.fromCharCode(40)) + string(v_cond.emit_javascript()) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_javascript_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // accessor decl
  Decl.v_decl = null;
  Decl.decl = function () { return this.v_decl; };
  // accessor type
  Decl.v_type = null;
  Decl.type = function () { return this.v_type; };
  // accessor var
  Decl.v_var = null;
  Decl.var = function () { return this.v_var; };
  // method emit_javascript
  Decl.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Decl.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(v_self.v_var.emit_javascript())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript_indented;  // v8 bug workaround
  // method emit_javascript_init
  Decl.emit_javascript_init = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_decl == 'my')) ) { return (function () {
                var v_str = null;

(v_str = '');
(v_str = (string(v_str) + string('var ') + string((v_self.v_var).emit_javascript()) + string(' ' + String.fromCharCode(61) + ' ')));
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string(String.fromCharCode(123) + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string(String.fromCharCode(91) + String.fromCharCode(93) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
(v_str = (string(v_str) + string('null' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); };;
                })(); };
                throw(v_str);
            })(); }
            else { return (function () {
                return(die((string('not implemented: Decl ' + String.fromCharCode(39)) + string(v_self.v_decl) + string((string(String.fromCharCode(39)))))));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript_init;  // v8 bug workaround
})()
;// class Sig
if (typeof Sig !== 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.isa = function (s) { return s == 'Sig'; };
  Sig.perl = function () { return 'Sig.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sig;
  // accessor invocant
  Sig.v_invocant = null;
  Sig.invocant = function () { return this.v_invocant; };
  // accessor positional
  Sig.v_positional = null;
  Sig.positional = function () { return this.v_positional; };
  // accessor named
  Sig.v_named = null;
  Sig.named = function () { return this.v_named; };
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // accessor name
  Method.v_name = null;
  Method.name = function () { return this.v_name; };
  // accessor sig
  Method.v_sig = null;
  Method.sig = function () { return this.v_sig; };
  // accessor block
  Method.v_block = null;
  Method.block = function () { return this.v_block; };
  // method emit_javascript
  Method.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Method.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos).join(', '));
            return((string(Javascript.tab(v_level)) + string('function ') + string(v_self.v_name) + string(String.fromCharCode(40)) + string(v_str) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_javascript_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // accessor name
  Sub.v_name = null;
  Sub.name = function () { return this.v_name; };
  // accessor sig
  Sub.v_sig = null;
  Sub.sig = function () { return this.v_sig; };
  // accessor block
  Sub.v_block = null;
  Sub.block = function () { return this.v_block; };
  // method emit_javascript
  Sub.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Sub.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_str = null;

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_str = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos).join(', '));
            return((string(Javascript.tab(v_level)) + string('function ') + string(v_self.v_name) + string(String.fromCharCode(40)) + string(v_str) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_javascript_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // accessor block
  Do.v_block = null;
  Do.block = function () { return this.v_block; };
  // method emit_javascript
  Do.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Do.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_block = null;

(v_block = v_self.simplify().block());
            throw((string(Javascript.tab(v_level)) + string(String.fromCharCode(40) + 'function ' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_block,v_needs_return: 1}; tmp.__proto__ = Perlito$Javascript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Javascript.tab(v_level)) + string(String.fromCharCode(125) + String.fromCharCode(41) + String.fromCharCode(40) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_javascript_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // accessor mod
  Use.v_mod = null;
  Use.mod = function () { return this.v_mod; };
  // method emit_javascript
  Use.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Use.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Javascript.tab(v_level)) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' use ') + string(v_self.v_mod) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_javascript_indented;  // v8 bug workaround
})()
;    // use v6
;// class Perlito::Precedence
if (typeof Perlito$Precedence !== 'object') {
  Perlito$Precedence = function() {};
  Perlito$Precedence = new Perlito$Precedence;
  Perlito$Precedence.isa = function (s) { return s == 'Perlito::Precedence'; };
  Perlito$Precedence.perl = function () { return 'Perlito::Precedence.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Precedence;
  var v_Operator = null;
  var v_Precedence = null;
  var v_Assoc = null;
  var v_Allow_space_before = null;
  var v_Op1 = null;
  var v_Op2 = null;
  var v_Op3 = null;
  var v_End_token = null;
  var v_prec = null;
  // accessor get_token
  Perlito$Precedence.v_get_token = null;
  Perlito$Precedence.get_token = function () { return this.v_get_token; };
  // accessor reduce
  Perlito$Precedence.v_reduce = null;
  Perlito$Precedence.reduce = function () { return this.v_reduce; };
  // accessor end_token
  Perlito$Precedence.v_end_token = null;
  Perlito$Precedence.end_token = function () { return this.v_end_token; };
  // sub is_assoc_type
  Perlito$Precedence.is_assoc_type = function (v_assoc_type, v_op_name) {
        try {
            throw((function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc[v_assoc_type] == null) { v_Assoc[v_assoc_type] = {} }; return (v_Assoc[v_assoc_type][v_op_name] ); })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.is_assoc_type;  // v8 bug workaround
  // sub is_fixity_type
  Perlito$Precedence.is_fixity_type = function (v_fixity_type, v_op_name) {
        try {
            throw((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator[v_fixity_type] == null) { v_Operator[v_fixity_type] = {} }; return (v_Operator[v_fixity_type][v_op_name] ); })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.is_fixity_type;  // v8 bug workaround
  // sub is_term
  Perlito$Precedence.is_term = function (v_token) {
        try {
            return(or(((v_token[0] == 'term')), function () { return ((v_token[0] == 'postfix_or_term')); }));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.is_term;  // v8 bug workaround
  // sub is_ident_middle
  Perlito$Precedence.is_ident_middle = function (v_c) {
        try {
            return(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return ((v_c == '_')); }));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.is_ident_middle;  // v8 bug workaround
  // method op_parse
  Perlito$Precedence.op_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_from = null;

            var v_c01 = null;

            var v_c02 = null;

            var v_hyper_left = null;

            var v_hyper_right = null;

            var v_op3 = null;

            var v_op2 = null;

            var v_op1 = null;

(v_from = v_pos);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_tok) {                 var v_l = null;

                var v_s = null;

(v_l = chars(v_tok));
(v_s = (v_str || "").substr(v_pos, v_l));
                if ( bool((v_s == v_tok)) ) { (function () {
                    var v_c1 = null;

                    var v_c2 = null;

(v_c1 = (v_str || "").substr((add(v_pos, v_l) - 1), 1));
(v_c2 = (v_str || "").substr(add(v_pos, v_l), 1));
                    if ( bool(and(v__NAMESPACE.is_ident_middle(v_c1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == String.fromCharCode(40)); })); })) ) { (function () {
                        null;
                    })(); }
                    else { (function () {
                        throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: add(v_pos, 2),v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push(v_s);
    return(List_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((v_End_token)));
(v_c01 = (v_str || "").substr(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));
(v_hyper_left = 0);
(v_hyper_right = 0);
            if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_left = v_c01);
(v_pos = add(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));;
            })(); }
            else { (function () {
                if ( bool(or(((v_c02 == String.fromCharCode(60) + String.fromCharCode(60))), function () { return ((v_c02 == String.fromCharCode(62) + String.fromCharCode(62))); })) ) { (function () {
(v_hyper_left = v_c02);
(v_pos = add(v_pos, 2));
(v_c02 = (v_str || "").substr(v_pos, 2));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
(v_op3 = (v_str || "").substr(v_pos, 3));
            if ( bool((v_Op3).hasOwnProperty(v_op3)) ) { (function () {
                var v_c1 = null;

                var v_c2 = null;

(v_c1 = (v_str || "").substr(add(v_pos, 2), 1));
(v_c2 = (v_str || "").substr(add(v_pos, 3), 1));
                if ( bool(and(v__NAMESPACE.is_ident_middle(v_c1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == String.fromCharCode(40)); })); })) ) { (function () {
                    null;
                })(); }
                else { (function () {
                    var v_c01 = null;

                    var v_c02 = null;

(v_pos = add(v_pos, 3));
(v_c01 = (v_str || "").substr(v_pos, 2));
(v_c02 = (v_str || "").substr(v_pos, 3));
                    if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_right = v_c01);
(v_pos = add(v_pos, 1));;
                    })(); }
                    else { (function () {
                        if ( bool(or(((v_c02 == String.fromCharCode(60) + String.fromCharCode(60))), function () { return ((v_c02 == String.fromCharCode(62) + String.fromCharCode(62))); })) ) { (function () {
(v_hyper_right = v_c02);
(v_pos = add(v_pos, 2));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };;
                    })(); };
                    throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: v_pos,v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(v_op3);
List_a.push((function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_left']  = v_hyper_left); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_right']  = v_hyper_right); })();
    return(Hash_a);
})());
    return(List_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_op2 = v_c02);
            if ( bool((v_Op2).hasOwnProperty(v_op2)) ) { (function () {
                var v_c1 = null;

                var v_c2 = null;

(v_c1 = (v_str || "").substr(add(v_pos, 1), 1));
(v_c2 = (v_str || "").substr(add(v_pos, 2), 1));
                if ( bool(and(v__NAMESPACE.is_ident_middle(v_c1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == String.fromCharCode(40)); })); })) ) { (function () {
                    null;
                })(); }
                else { (function () {
                    var v_c01 = null;

                    var v_c02 = null;

(v_pos = add(v_pos, 2));
(v_c01 = (v_str || "").substr(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));
                    if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_right = v_c01);
(v_pos = add(v_pos, 1));;
                    })(); }
                    else { (function () {
                        if ( bool(or(((v_c02 == String.fromCharCode(60) + String.fromCharCode(60))), function () { return ((v_c02 == String.fromCharCode(62) + String.fromCharCode(62))); })) ) { (function () {
(v_hyper_right = v_c02);
(v_pos = add(v_pos, 2));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };;
                    })(); };
                    throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: v_pos,v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(v_op2);
List_a.push((function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_left']  = v_hyper_left); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_right']  = v_hyper_right); })();
    return(Hash_a);
})());
    return(List_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_op1 = (v_str || "").substr(v_pos, 1));
            if ( bool((v_Op1).hasOwnProperty(v_op1)) ) { (function () {
                var v_c2 = null;

(v_c2 = (v_str || "").substr(add(v_pos, 1), 1));
                if ( bool(and(v__NAMESPACE.is_ident_middle(v_op1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == String.fromCharCode(40)); })); })) ) { (function () {
                    null;
                })(); }
                else { (function () {
                    var v_c01 = null;

                    var v_c02 = null;

(v_pos = add(v_pos, 1));
(v_c01 = (v_str || "").substr(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));
                    if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_right = v_c01);
(v_pos = add(v_pos, 1));;
                    })(); }
                    else { (function () {
                        if ( bool(or(((v_c02 == String.fromCharCode(60) + String.fromCharCode(60))), function () { return ((v_c02 == String.fromCharCode(62) + String.fromCharCode(62))); })) ) { (function () {
(v_hyper_right = v_c02);
(v_pos = add(v_pos, 2));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };;
                    })(); };
                    throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: v_pos,v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(v_op1);
List_a.push((function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_left']  = v_hyper_left); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_right']  = v_hyper_right); })();
    return(Hash_a);
})());
    return(List_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_bool: 0}; tmp.__proto__ = Perlito$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.op_parse;  // v8 bug workaround
  // sub add_op
  Perlito$Precedence.add_op = function (v_fixity, v_name, v_precedence, v_param) {
        try {
            var v_assoc = null;

            if ( bool(( bool(((v_param != null))) ? false : true)) ) { (function () {
(v_param = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_assoc = or((function () { if (v_param == null) { v_param = {} }; return (v_param['assoc'] ); })(), function () { return 'left'; }));
(function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator[v_fixity] == null) { v_Operator[v_fixity] = {} }; return (v_Operator[v_fixity][v_name]  = 1); })();
(function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_name]  = v_precedence); })();
(function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc[v_assoc] == null) { v_Assoc[v_assoc] = {} }; return (v_Assoc[v_assoc][v_name]  = 1); })();
(function () { if (v_Allow_space_before == null) { v_Allow_space_before = {} }; if (v_Allow_space_before[v_fixity] == null) { v_Allow_space_before[v_fixity] = {} }; return (v_Allow_space_before[v_fixity][v_name]  = ( bool((function () { if (v_param == null) { v_param = {} }; return (v_param['no_space_before'] ); })()) ? false : true)); })();
            if ( bool(((chars(v_name)) == 1)) ) { return (function () {
                return((function () { if (v_Op1 == null) { v_Op1 = {} }; return (v_Op1[v_name]  = 1); })());
            })(); }
            else { return (function () {
                if ( bool(((chars(v_name)) == 2)) ) { return (function () {
                    return((function () { if (v_Op2 == null) { v_Op2 = {} }; return (v_Op2[v_name]  = 1); })());
                })(); }
                else { return (function () {
                    if ( bool(((chars(v_name)) == 3)) ) { return (function () {
                        return((function () { if (v_Op3 == null) { v_Op3 = {} }; return (v_Op3[v_name]  = 1); })());
                    })(); }
                    else { return (function () {
                        null;
                    })(); };
                })(); };
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.add_op;  // v8 bug workaround
  // method precedence_parse
  Perlito$Precedence.precedence_parse = function () {
    var v_self = this;
        try {
            var v_get_token = null;

            var v_reduce = null;

            var v_last_end_token = null;

            var v_op_stack = null;

            var v_num_stack = null;

            var v_last = null;

            var v_last_has_space = null;

            var v_token = null;

(v_get_token = v_self.get_token());
(v_reduce = v_self.reduce());
(v_last_end_token = v_End_token);
(v_End_token = v_self.end_token());
(v_op_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_num_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_last = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('*start*');
    return(List_a);
})());
(v_last_has_space = false);
(v_token = (v_get_token)());
            if ( bool(((v_token[0]) == 'space')) ) { (function () {
(v_token = (v_get_token)());;
            })(); }
            else { (function () {
                null;
            })(); };
            for ( ; bool(and(((v_token != null)), function () { return ((v_token[0] != 'end')); }));  ) { (function () {                 if ( bool(and(((v_token[1] == ',')), function () { return (or(((v_last[1] == '*start*')), function () { return ((v_last[1] == ',')); })); })) ) { (function () {
v_num_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(null);
    return(List_a);
})());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['prefix'] == null) { v_Operator['prefix'] = {} }; return (v_Operator['prefix'][v_token[1]] ); })(), function () { return (or(((v_last[1] == '*start*')), function () { return ( bool((v__NAMESPACE.is_term(v_last))) ? false : true); })); })) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'prefix'); })();
v_op_stack.unshift(v_token);;
                })(); }
                else { (function () {
                    if ( bool(and(and((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['postfix'] == null) { v_Operator['postfix'] = {} }; return (v_Operator['postfix'][v_token[1]] ); })(), function () { return v__NAMESPACE.is_term(v_last); }), function () { return (or((function () { if (v_Allow_space_before == null) { v_Allow_space_before = {} }; if (v_Allow_space_before['postfix'] == null) { v_Allow_space_before['postfix'] = {} }; return (v_Allow_space_before['postfix'][v_token[1]] ); })(), function () { return ( bool((v_last_has_space)) ? false : true); })); })) ) { (function () {
                        var v_pr = null;

(v_pr = (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })());
                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr <= (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
                        if ( bool(((v_token[0]) != 'postfix_or_term')) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'postfix'); })();;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
v_op_stack.unshift(v_token);;
                    })(); }
                    else { (function () {
                        if ( bool(and(and(((v_token[1] == 'block')), function () { return v__NAMESPACE.is_term(v_last); }), function () { return v_last_has_space; })) ) { (function () {
                            for ( ; bool(elems(v_op_stack));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
v_num_stack.push(v_token);
(v_End_token = v_last_end_token);
                            throw(v_num_stack);;
                        })(); }
                        else { (function () {
                            if ( bool(v__NAMESPACE.is_term(v_token)) ) { (function () {
                                if ( bool(v__NAMESPACE.is_term(v_last)) ) { (function () {
                                    say((string(String.fromCharCode(35) + '      last:  ')), perl(v_last));
                                    say((string(String.fromCharCode(35) + '      token: ')), perl(v_token));
                                    say((string(String.fromCharCode(35) + '      space: ')), v_last_has_space);
                                    die((string('Value tokens must be separated by an operator')));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'term'); })();
v_num_stack.push(v_token);;
                            })(); }
                            else { (function () {
                                if ( bool((function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })()) ) { (function () {
                                    var v_pr = null;

(v_pr = (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })());
                                    if ( bool((function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc['right'] == null) { v_Assoc['right'] = {} }; return (v_Assoc['right'][v_token[1]] ); })()) ) { (function () {
                                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr < (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };;
                                    })(); }
                                    else { (function () {
                                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr <= (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };;
                                    })(); };
                                    if ( bool((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['ternary'] == null) { v_Operator['ternary'] = {} }; return (v_Operator['ternary'][v_token[1]] ); })()) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'ternary'); })();;
                                    })(); }
                                    else { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'infix'); })();;
                                    })(); };
v_op_stack.unshift(v_token);;
                                })(); }
                                else { (function () {
                                    die((string('Unknown token: ' + String.fromCharCode(39))), v_token[1], (string(String.fromCharCode(39))));;
                                })(); };;
                            })(); };;
                        })(); };;
                    })(); };;
                })(); };
(v_last = v_token);
(v_token = (v_get_token)());
                if ( bool((v_token[0] == 'space')) ) { (function () {
(v_token = (v_get_token)());
(v_last_has_space = true);;
                })(); }
                else { (function () {
(v_last_has_space = false);;
                })(); };; })() };
            if ( bool(and((v_token != null), function () { return ((v_token[0] != 'end')); })) ) { (function () {
                die((string('Unexpected end token: ')), perl(v_token));;
            })(); }
            else { (function () {
                null;
            })(); };
            for ( ; bool(elems(v_op_stack));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
(v_End_token = v_last_end_token);
            throw(v_num_stack);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Precedence.precedence_parse;  // v8 bug workaround
(v_Operator = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Precedence = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Assoc = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Allow_space_before = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_prec = 100);        v__NAMESPACE.add_op('postfix', '.' + String.fromCharCode(40) + ' ' + String.fromCharCode(41), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '.' + String.fromCharCode(91) + ' ' + String.fromCharCode(93), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', String.fromCharCode(40) + ' ' + String.fromCharCode(41), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', String.fromCharCode(91) + ' ' + String.fromCharCode(93), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'funcall', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'funcall_no_params', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'methcall', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'methcall_no_params', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'block', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'hash', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', '++', v_prec);        v__NAMESPACE.add_op('prefix', '--', v_prec);        v__NAMESPACE.add_op('postfix', '++', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '--', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '**', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', '+', v_prec);        v__NAMESPACE.add_op('prefix', '-', v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(36), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(64), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(37), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(33), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(63), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '*', v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(47), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '+', v_prec);        v__NAMESPACE.add_op('infix', '-', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(126), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(126), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(38), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(38), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(124), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(124), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62), v_prec);        v__NAMESPACE.add_op('infix', 'leg', v_prec);        v__NAMESPACE.add_op('infix', 'cmp', v_prec);        v__NAMESPACE.add_op('infix', 'does', v_prec);        v__NAMESPACE.add_op('infix', 'but', v_prec);        v__NAMESPACE.add_op('infix', '..', v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(94) + '..', v_prec);        v__NAMESPACE.add_op('infix', '..' + String.fromCharCode(94), v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(94) + '..' + String.fromCharCode(94), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'ne', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'eq', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'lt', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'le', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'gt', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'ge', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(60) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(62) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(33) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(60), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(62), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(126) + String.fromCharCode(126), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(38), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(124), v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(47), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('ternary', String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', ':' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '+' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '-' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '*' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(126) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', 'not', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + String.fromCharCode(62), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('list', ',', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', 'and', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', 'or', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '*start*', v_prec);})()
;    // use v6
;// class Perl5
if (typeof Perl5 !== 'object') {
  Perl5 = function() {};
  Perl5 = new Perl5;
  Perl5.isa = function (s) { return s == 'Perl5'; };
  Perl5.perl = function () { return 'Perl5.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perl5;
  // sub tab
  Perl5.tab = function (v_level) {
        try {
            var v_s = null;

            var v_count = null;

(v_s = '');
(v_count = v_level);
            for ( ; bool((v_count > 0));  ) { (function () { (v_s = (string(v_s) + string((string('    ')))));
(v_count = (v_count - 1));; })() };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perl5.tab;  // v8 bug workaround
  // sub escape_string
  Perl5.escape_string = function (v_s) {
        try {
            var List_out = [];

            var v_tmp = null;

(v_tmp = '');
            if ( bool((v_s == '')) ) { (function () {
                throw((string(String.fromCharCode(39) + String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_i) {                 var v_c = null;

(v_c = (v_s || "").substr(v_i, 1));
                if ( bool(or(or(or(or(or(or(or(or(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= 'A')), function () { return ((v_c <= 'Z')); })); }), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return ((v_c == '_')); }), function () { return ((v_c == ',')); }), function () { return ((v_c == '.')); }), function () { return ((v_c == ':')); }), function () { return ((v_c == '-')); }), function () { return ((v_c == '+')); }), function () { return ((v_c == '*')); }), function () { return ((v_c == ' ')); })) ) { (function () {
(v_tmp = (string(v_tmp) + string(v_c)));;
                })(); }
                else { (function () {
                    if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
List_out.push((string('chr' + String.fromCharCode(40)) + string((function () { 
    return((v_c).charCodeAt(0));
})()) + string(String.fromCharCode(41))));
(v_tmp = '');;
                })(); };; })(a_[i_]) } })((function (a) { for (var i=0, l=(chars(v_s) - 1); i<=l; ++i){ a.push(i) }; return a })([]));
            if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(List_out.join(' . '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perl5.escape_string;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor name
  CompUnit.v_name = null;
  CompUnit.name = function () { return this.v_name; };
  // accessor body
  CompUnit.v_body = null;
  CompUnit.body = function () { return this.v_body; };
  // method emit_perl5
  CompUnit.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  CompUnit.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var List_body = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_body, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            return((string(Perl5.tab(v_level)) + string((string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string('package ') + string(v_self.v_name) + string((string(String.fromCharCode(59)))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(add(v_level, 1))) + string('sub new ' + String.fromCharCode(123) + ' shift' + String.fromCharCode(59) + ' bless ' + String.fromCharCode(123) + ' ' + String.fromCharCode(64) + '_ ' + String.fromCharCode(125) + ', ' + String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34) + ' ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(List_body)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)) + string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5_indented;  // v8 bug workaround
  // sub emit_perl5_program
  CompUnit.emit_perl5_program = function (v_comp_units) {
        try {
            var v_str = null;

(v_str = (string('') + string((string('use v5' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use utf8' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use strict' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use warnings' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('no warnings ' + String.fromCharCode(40) + String.fromCharCode(39) + 'redefine' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'once' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'void' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'uninitialized' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'misc' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'recursion' + String.fromCharCode(39) + String.fromCharCode(41) + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use Perlito::Perl5::Runtime' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use Perlito::Perl5::Prelude' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('our ') + string(String.fromCharCode(36)) + string('MATCH ' + String.fromCharCode(61) + ' Perlito::Match-' + String.fromCharCode(62) + 'new' + String.fromCharCode(40) + String.fromCharCode(41) + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_perl5_indented(0))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('1' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // accessor int
  Val$Int.v_int = null;
  Val$Int.int = function () { return this.v_int; };
  // method emit_perl5
  Val$Int.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Int.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // accessor bit
  Val$Bit.v_bit = null;
  Val$Bit.bit = function () { return this.v_bit; };
  // method emit_perl5
  Val$Bit.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Bit.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_bit)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // accessor num
  Val$Num.v_num = null;
  Val$Num.num = function () { return this.v_num; };
  // method emit_perl5
  Val$Num.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Num.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // accessor buf
  Val$Buf.v_buf = null;
  Val$Buf.buf = function () { return this.v_buf; };
  // method emit_perl5
  Val$Buf.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Buf.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(Perl5.escape_string(v_self.v_buf))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // accessor sig
  Lit$Block.v_sig = null;
  Lit$Block.sig = function () { return this.v_sig; };
  // accessor stmts
  Lit$Block.v_stmts = null;
  Lit$Block.stmts = function () { return this.v_stmts; };
  // method emit_perl5
  Lit$Block.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Block.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string((string('sub ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_stmts).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // accessor array1
  Lit$Array.v_array1 = null;
  Lit$Array.array1 = function () { return this.v_array1; };
  // method emit_perl5
  Lit$Array.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Array.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_perl5_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // accessor hash1
  Lit$Hash.v_hash1 = null;
  Lit$Hash.hash1 = function () { return this.v_hash1; };
  // method emit_perl5
  Lit$Hash.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Hash.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_perl5_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_perl5_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // accessor obj
  Index.v_obj = null;
  Index.obj = function () { return this.v_obj; };
  // accessor index_exp
  Index.v_index_exp = null;
  Index.index_exp = function () { return this.v_index_exp; };
  // method emit_perl5
  Index.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Index.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(v_self.v_obj.emit_perl5_indented(v_level)) + string('-' + String.fromCharCode(62) + String.fromCharCode(91)) + string(v_self.v_index_exp.emit_perl5()) + string(String.fromCharCode(93))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // accessor obj
  Lookup.v_obj = null;
  Lookup.obj = function () { return this.v_obj; };
  // accessor index_exp
  Lookup.v_index_exp = null;
  Lookup.index_exp = function () { return this.v_index_exp; };
  // method emit_perl5
  Lookup.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lookup.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(v_self.v_obj.emit_perl5_indented(v_level)) + string('-' + String.fromCharCode(62) + String.fromCharCode(123)) + string(v_self.v_index_exp.emit_perl5()) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_perl5_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // accessor sigil
  Var.v_sigil = null;
  Var.sigil = function () { return this.v_sigil; };
  // accessor twigil
  Var.v_twigil = null;
  Var.twigil = function () { return this.v_twigil; };
  // accessor namespace
  Var.v_namespace = null;
  Var.namespace = function () { return this.v_namespace; };
  // accessor name
  Var.v_name = null;
  Var.name = function () { return this.v_name; };
  // method emit_perl5
  Var.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Var.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = String.fromCharCode(36)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = String.fromCharCode(36) + 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = String.fromCharCode(36) + 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = String.fromCharCode(36) + 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(v_self.v_namespace) + string('::')));;
            })(); }
            else { (function () {
                if ( bool(and(and(((v_self.v_sigil == String.fromCharCode(64))), function () { return ((v_self.v_twigil == '*')); }), function () { return ((v_self.v_name == 'ARGS')); })) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + String.fromCharCode(92) + String.fromCharCode(64) + 'ARGV' + String.fromCharCode(41))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_self.v_twigil == '.')) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + 'self-' + String.fromCharCode(62) + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_self.v_name == String.fromCharCode(47))) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            throw((string(Perl5.tab(v_level)) + string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_perl5_indented;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('::') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // accessor name
  Proto.v_name = null;
  Proto.name = function () { return this.v_name; };
  // method emit_perl5
  Proto.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Proto.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_perl5_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // accessor invocant
  Call.v_invocant = null;
  Call.invocant = function () { return this.v_invocant; };
  // accessor hyper
  Call.v_hyper = null;
  Call.hyper = function () { return this.v_hyper; };
  // accessor method
  Call.v_method = null;
  Call.method = function () { return this.v_method; };
  // accessor arguments
  Call.v_arguments = null;
  Call.arguments = function () { return this.v_arguments; };
  // method emit_perl5
  Call.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Call.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

            var v_call = null;

(v_invocant = v_self.v_invocant.emit_perl5());
            if ( bool((v_invocant == 'self')) ) { (function () {
(v_invocant = String.fromCharCode(36) + 'self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(((v_self.v_method == 'values')), function () { return ((v_self.v_method == 'keys')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    die((string('not implemented')));;
                })(); }
                else { (function () {
                    throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(91)) + string(v_self.v_method) + string(String.fromCharCode(40) + ' ' + String.fromCharCode(37) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41)) + string(String.fromCharCode(93))));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(or(or(or(or(or(or(or(((v_self.v_method == 'perl')), function () { return ((v_self.v_method == 'id')); }), function () { return ((v_self.v_method == 'yaml')); }), function () { return ((v_self.v_method == 'say')); }), function () { return ((v_self.v_method == 'join')); }), function () { return ((v_self.v_method == 'split')); }), function () { return ((v_self.v_method == 'chars')); }), function () { return ((v_self.v_method == 'isa')); }), function () { return ((v_self.v_method == 'pairs')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(91) + ' map ' + String.fromCharCode(123) + ' Main::') + string(v_self.v_method) + string(String.fromCharCode(40) + ' ' + String.fromCharCode(36) + '_, ') + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41)) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(64) + String.fromCharCode(123) + String.fromCharCode(40) + ' ') + string(v_invocant) + string(' ' + String.fromCharCode(41) + String.fromCharCode(125) + ' ' + String.fromCharCode(93))));;
                })(); }
                else { (function () {
                    throw((string(Perl5.tab(v_level)) + string('Main::') + string(v_self.v_method) + string(String.fromCharCode(40)) + string(v_invocant) + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'push')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('push' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'unshift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('unshift' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'pop')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('pop' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'shift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('shift' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'elems')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('scalar' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62))) ) { (function () {
(v_meth = '');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_call = (string('-' + String.fromCharCode(62)) + string(v_meth) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));
            if ( bool((v_self.v_hyper)) ) { return (function () {
                if ( bool(( bool((and(isa(v_self.v_invocant, 'Apply'), function () { return (v_self.v_invocant.code() == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62)); }))) ? false : true)) ) { (function () {
(v_invocant = (string(String.fromCharCode(64) + String.fromCharCode(123) + String.fromCharCode(40) + ' ') + string(v_invocant) + string(' ' + String.fromCharCode(41) + String.fromCharCode(125))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(91) + ' map ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + '_') + string(v_call) + string(' ' + String.fromCharCode(125) + ' ') + string(v_invocant) + string(' ' + String.fromCharCode(93))));
            })(); }
            else { return (function () {
                return((string(v_invocant) + string(v_call)));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_perl5_indented;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // accessor code
  Apply.v_code = null;
  Apply.code = function () { return this.v_code; };
  // accessor arguments
  Apply.v_arguments = null;
  Apply.arguments = function () { return this.v_arguments; };
  // accessor namespace
  Apply.v_namespace = null;
  Apply.namespace = function () { return this.v_namespace; };
  // method emit_perl5
  Apply.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Apply.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_apply = null;

            var v_ns = null;

            var v_code = null;

(v_apply = v_self.op_assign());
            if ( bool(v_apply) ) { (function () {
                throw(v_apply.emit_perl5_indented(v_level));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(v_self.v_namespace) + string('::')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = (string(v_ns) + string(v_self.v_code)));
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(v_self.v_code.emit_perl5()) + string(String.fromCharCode(41) + '-' + String.fromCharCode(62) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + 'self')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('undef' + String.fromCharCode(40) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + String.fromCharCode(36) + 'MATCH-' + String.fromCharCode(62) + String.fromCharCode(123) + 'capture' + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('Main::say' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('Main::print' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'warn')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('warn' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('pop' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('push' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string((v_self.v_arguments[0]).emit_perl5()) + string(String.fromCharCode(125) + ', ') + string((v_self.v_arguments[1]).emit_perl5()) + string(' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('shift' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'unshift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('unshift' + String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + '0+') + string((v_self.v_arguments[0]).emit_perl5()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + '0+') + string((v_self.v_arguments[0]).emit_perl5()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'bool')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(33) + String.fromCharCode(33) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + String.fromCharCode(34) + String.fromCharCode(34) + ' . ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(33) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(33) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(63) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(33) + String.fromCharCode(33) + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(36) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(37) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(37) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:' + String.fromCharCode(60) + '++' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + '++')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:' + String.fromCharCode(60) + '--' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41) + '--')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + '++' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('++' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:' + String.fromCharCode(60) + '--' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('--' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' . ')) + string('')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '+' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' + ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '-' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' - ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '*' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' * ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(47) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(62) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(62) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(60) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(60) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(62) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(62) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(60) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'x' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' x ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'and' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' and ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'or' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' or ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(47) + String.fromCharCode(47) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'eq' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' eq ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'ne' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ne ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'le' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' le ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + 'ge' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ge ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(33) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + '..' + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + 'bless ' + String.fromCharCode(91)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' .. ')) + string((string(String.fromCharCode(93) + ', ' + String.fromCharCode(39) + 'ARRAY' + String.fromCharCode(39) + String.fromCharCode(41))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40) + 'Main::id' + String.fromCharCode(40)) + string((v_self.v_arguments[0]).emit_perl5()) + string(String.fromCharCode(41) + ' eq Main::id' + String.fromCharCode(40)) + string((v_self.v_arguments[1]).emit_perl5()) + string(String.fromCharCode(41) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:' + String.fromCharCode(60) + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + String.fromCharCode(62))) ) { (function () {
                var v_cond = null;

(v_cond = v_self.v_arguments[0]);
                if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(v_cond.emit_perl5()) + string(' ' + String.fromCharCode(63) + ' ') + string((v_self.v_arguments[1]).emit_perl5()) + string(' : ') + string((v_self.v_arguments[2]).emit_perl5()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62))) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(v__NAMESPACE.emit_perl5_bind(v_self.v_arguments[0], v_self.v_arguments[1]))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                if ( bool(and(v_self.v_arguments, function () { return (elems(v_self.v_arguments) == 1); })) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string('return scalar ' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perl5.tab(v_level)) + string('return ' + String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string(v_code) + string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5_indented;  // v8 bug workaround
  // sub emit_perl5_bind
  Apply.emit_perl5_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                var v_a = null;

(v_a = v_parameters);
                throw((string(String.fromCharCode(40) + String.fromCharCode(40)) + string((v_a.invocant()).emit_perl5()) + string(String.fromCharCode(41) + '-' + String.fromCharCode(62) + String.fromCharCode(123)) + string(v_a.method()) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_perl5()) + string(String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lit::Array')) ) { (function () {
                var v_a = null;

                var v_str = null;

                var v_i = null;

(v_a = v_parameters.array1());
(v_str = 'do ' + String.fromCharCode(123) + ' ');
(v_i = 0);
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_str = (string(v_str) + string((string(' ') + string(v__NAMESPACE.emit_perl5_bind(v_var, (function () { var tmp = {v_obj: v_arguments,v_index_exp: (function () { var tmp = {v_int: v_i}; tmp.__proto__ = Val$Int; return tmp; })()}; tmp.__proto__ = Index; return tmp; })())) + string(String.fromCharCode(59) + ' ')))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_a));
                throw((string(v_str) + string(v_parameters.emit_perl5()) + string(' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lit::Hash')) ) { (function () {
                var v_a = null;

                var v_b = null;

                var v_str = null;

                var v_i = null;

                var v_arg = null;

(v_a = v_parameters.hash1());
(v_b = v_arguments.hash1());
(v_str = 'do ' + String.fromCharCode(123) + ' ');
(v_i = 0);
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_arg = (function () { var tmp = {v_code: 'Mu',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var2) {                         if ( bool(((v_var2[0]).buf() == (v_var[0]).buf())) ) { (function () {
(v_arg = v_var2[1]);;
                        })(); }
                        else { (function () {
                            null;
                        })(); };; })(a_[i_]) } })((v_b));
(v_str = (string(v_str) + string((string(' ') + string(v__NAMESPACE.emit_perl5_bind(v_var[1], v_arg)) + string(String.fromCharCode(59) + ' ')))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_a));
                throw((string(v_str) + string(v_parameters.emit_perl5()) + string(' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            return((string(String.fromCharCode(40)) + string(v_parameters.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_perl5()) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5_bind;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // accessor cond
  If.v_cond = null;
  If.cond = function () { return this.v_cond; };
  // accessor body
  If.v_body = null;
  If.body = function () { return this.v_body; };
  // accessor otherwise
  If.v_otherwise = null;
  If.otherwise = function () { return this.v_otherwise; };
  // method emit_perl5
  If.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  If.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            throw((string(Perl5.tab(v_level)) + string('if ' + String.fromCharCode(40)) + string(v_self.v_cond.emit_perl5()) + string((string(String.fromCharCode(41) + ' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((( bool(v_self.v_body) ? (string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10))))) : ''))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)))) + string((( bool(and(v_self.v_otherwise, function () { return elems(v_self.v_otherwise.stmts()); })) ? ((string(String.fromCharCode(10)) + string(Perl5.tab(v_level)) + string((string('else ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_otherwise.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)))))) : '')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_perl5_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // accessor init
  While.v_init = null;
  While.init = function () { return this.v_init; };
  // accessor cond
  While.v_cond = null;
  While.cond = function () { return this.v_cond; };
  // accessor continue
  While.v_continue = null;
  While.continue = function () { return this.v_continue; };
  // accessor body
  While.v_body = null;
  While.body = function () { return this.v_body; };
  // method emit_perl5
  While.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  While.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string('for ' + String.fromCharCode(40) + ' ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_perl5()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_cond) ? (string(v_cond.emit_perl5()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_perl5()) + string(' ')) : ' '))) + string(String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_perl5_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // accessor cond
  For.v_cond = null;
  For.cond = function () { return this.v_cond; };
  // accessor body
  For.v_body = null;
  For.body = function () { return this.v_body; };
  // method emit_perl5
  For.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  For.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_sig = null;

(v_cond = v_self.v_cond);
            if ( bool(( bool((and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); }))) ? false : true)) ) { (function () {
(v_cond = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_sig = (string('my ') + string(v_self.v_body.sig().emit_perl5()) + string(' ')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Perl5.tab(v_level)) + string('for ') + string(v_sig) + string(String.fromCharCode(40) + ' ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_cond.emit_perl5()) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_perl5_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // accessor decl
  Decl.v_decl = null;
  Decl.decl = function () { return this.v_decl; };
  // accessor type
  Decl.v_type = null;
  Decl.type = function () { return this.v_type; };
  // accessor var
  Decl.v_var = null;
  Decl.var = function () { return this.v_var; };
  // method emit_perl5
  Decl.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Decl.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

            var v_str = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.plain_name());
            if ( bool((v_decl == 'has')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('sub ') + string(v_name) + string(' ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + '_' + String.fromCharCode(91) + '0' + String.fromCharCode(93) + '-' + String.fromCharCode(62) + String.fromCharCode(123)) + string(v_name) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(String.fromCharCode(40)) + string(v_self.v_decl) + string(' ') + string(v_self.v_type) + string(' ') + string(v_self.v_var.emit_perl5())));
            if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string(' ' + String.fromCharCode(61) + ' bless ' + String.fromCharCode(123) + String.fromCharCode(125) + ', ' + String.fromCharCode(39) + 'HASH' + String.fromCharCode(39) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string(' ' + String.fromCharCode(61) + ' bless ' + String.fromCharCode(91) + String.fromCharCode(93) + ', ' + String.fromCharCode(39) + 'ARRAY' + String.fromCharCode(39) + String.fromCharCode(41))));;
                })(); }
                else { (function () {
(v_str = (string(v_str) + string(String.fromCharCode(41))));;
                })(); };;
            })(); };
            throw((string(Perl5.tab(v_level)) + string(v_str)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_perl5_indented;  // v8 bug workaround
})()
;// class Sig
if (typeof Sig !== 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.isa = function (s) { return s == 'Sig'; };
  Sig.perl = function () { return 'Sig.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sig;
  // accessor invocant
  Sig.v_invocant = null;
  Sig.invocant = function () { return this.v_invocant; };
  // accessor positional
  Sig.v_positional = null;
  Sig.positional = function () { return this.v_positional; };
  // accessor named
  Sig.v_named = null;
  Sig.named = function () { return this.v_named; };
  // method emit_perl5
  Sig.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Sig.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return(' print ' + String.fromCharCode(39) + 'Signature - TODO' + String.fromCharCode(39) + String.fromCharCode(59) + ' die ' + String.fromCharCode(39) + 'Signature - TODO' + String.fromCharCode(39) + String.fromCharCode(59) + ' ');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_perl5_indented;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // accessor name
  Method.v_name = null;
  Method.name = function () { return this.v_name; };
  // accessor sig
  Method.v_sig = null;
  Method.sig = function () { return this.v_sig; };
  // accessor block
  Method.v_block = null;
  Method.block = function () { return this.v_block; };
  // method emit_perl5
  Method.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Method.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string((string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_field.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_' + String.fromCharCode(91)) + string(v_i) + string(String.fromCharCode(93) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            return((string(Perl5.tab(v_level)) + string('sub ') + string(v_self.v_name) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_invocant.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_' + String.fromCharCode(91) + '0' + String.fromCharCode(93) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(v_str) + string(string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10)))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_perl5_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // accessor name
  Sub.v_name = null;
  Sub.name = function () { return this.v_name; };
  // accessor sig
  Sub.v_sig = null;
  Sub.sig = function () { return this.v_sig; };
  // accessor block
  Sub.v_block = null;
  Sub.block = function () { return this.v_block; };
  // method emit_perl5
  Sub.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Sub.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string((string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_field.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_' + String.fromCharCode(91)) + string(v_i) + string(String.fromCharCode(93) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            return((string(Perl5.tab(v_level)) + string('sub ') + string(v_self.v_name) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(v_str) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_perl5_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // accessor block
  Do.v_block = null;
  Do.block = function () { return this.v_block; };
  // method emit_perl5
  Do.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Do.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_block = null;

(v_block = v_self.simplify().block());
            return((string(Perl5.tab(v_level)) + string((string('do ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_perl5_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // accessor mod
  Use.v_mod = null;
  Use.mod = function () { return this.v_mod; };
  // method emit_perl5
  Use.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Use.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            if ( bool((v_self.v_mod == 'v6')) ) { (function () {
                throw((string(String.fromCharCode(10)) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(35) + ' use ') + string(v_self.v_mod) + string(' ') + string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string('use ') + string(v_self.v_mod)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_perl5_indented;  // v8 bug workaround
})()
;// class Perlito::Expression
if (typeof Perlito$Expression !== 'object') {
  Perlito$Expression = function() {};
  Perlito$Expression = new Perlito$Expression;
  Perlito$Expression.isa = function (s) { return s == 'Perlito::Expression'; };
  Perlito$Expression.perl = function () { return 'Perlito::Expression.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Expression;
  var v_reduce_to_ast = null;
  // sub expand_list
  Perlito$Expression.expand_list = function (v_param_list) {
        try {
            if ( bool(and((isa(v_param_list, 'Apply')), function () { return (((v_param_list.code()) == 'list:' + String.fromCharCode(60) + ',' + String.fromCharCode(62))); })) ) { return (function () {
                var v_args = null;

(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_v) {                     if ( bool((v_v != null)) ) { (function () {
v_args.push(v_v);;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_param_list.arguments())));
                throw(v_args);
            })(); }
            else { return (function () {
                if ( bool((v_param_list == '*undef*')) ) { return (function () {
                    throw((function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                })(); }
                else { return (function () {
                    throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_param_list);
    return(List_a);
})());
                })(); };
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.expand_list;  // v8 bug workaround
  // sub block_or_hash
  Perlito$Expression.block_or_hash = function (v_o) {
        try {
            var v_stmts = null;

            var v_stmt = null;

            if ( bool((v_o.sig() != null)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_stmts = v_o.stmts());
            if ( bool(or((( bool(((v_stmts != null))) ? false : true)), function () { return (((elems(v_stmts)) == 0)); })) ) { (function () {
                throw((function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((elems(v_stmts)) != 1)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_stmt = v_stmts[0]);
            if ( bool(( bool((isa(v_stmt, 'Apply'))) ? false : true)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((v_stmt.code()) == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62))) ) { (function () {
                throw((function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_stmt);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((v_stmt.code()) != 'list:' + String.fromCharCode(60) + ',' + String.fromCharCode(62))) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return ((v_item.code()) == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62)); })) ) { (function () {
                    throw((function () { var tmp = {v_hash1: v__NAMESPACE.expand_list(v_stmt)}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((v_stmt.arguments())));
            throw(v_o);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.block_or_hash;  // v8 bug workaround
  // sub pop_term
  Perlito$Expression.pop_term = function (v_num_stack) {
        try {
            var v_v = null;

(v_v = v_num_stack.pop());
            if ( bool(isa(v_v, 'Array')) ) { (function () {
                if ( bool((v_v[1] == 'methcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: null,v_method: v_v[2],v_hyper: v_v[3]}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'funcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_code: v_v[3],v_namespace: v_v[2]}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'methcall')) ) { (function () {
                    var v_param_list = null;

                    if ( bool((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['end_block'] ); })()) ) { (function () {
v_num_stack.unshift((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['end_block'] ); })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['exp'] ); })()));
(v_v = (function () { var tmp = {v_invocant: null,v_method: v_v[2],v_arguments: v_param_list,v_hyper: v_v[4]}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'funcall')) ) { (function () {
                    var v_param_list = null;

                    if ( bool((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['end_block'] ); })()) ) { (function () {
v_num_stack.unshift((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['end_block'] ); })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['exp'] ); })()));
(v_v = (function () { var tmp = {v_code: v_v[3],v_arguments: v_param_list,v_namespace: v_v[2]}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == String.fromCharCode(40) + ' ' + String.fromCharCode(41))) ) { (function () {
                    var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_code: 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_arguments: v_param_list,v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == String.fromCharCode(91) + ' ' + String.fromCharCode(93))) ) { (function () {
                    var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_array1: v_param_list}; tmp.__proto__ = Lit$Array; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'block')) ) { (function () {
(v_v = (function () { var tmp = {v_stmts: v_v[2],v_sig: v_v[3]}; tmp.__proto__ = Lit$Block; return tmp; })());
(v_v = v__NAMESPACE.block_or_hash(v_v));
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.' + String.fromCharCode(40) + ' ' + String.fromCharCode(41))) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: null,v_method: 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.' + String.fromCharCode(91) + ' ' + String.fromCharCode(93))) ) { (function () {
(v_v = (function () { var tmp = {v_obj: null,v_index_exp: v_v[2]}; tmp.__proto__ = Index; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125))) ) { (function () {
(v_v = (function () { var tmp = {v_obj: null,v_index_exp: v_v[2]}; tmp.__proto__ = Lookup; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa((v_v[1]), 'Array'), function () { return (((elems((v_v[1]))) == 2)); })) ) { (function () {
(v_v = (function () { var tmp = {v_code: 'pair',v_arguments: v_v[1],v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw(v_v[1]);;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_v);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.pop_term;  // v8 bug workaround
  // sub reduce_postfix
  Perlito$Expression.reduce_postfix = function (v_op, v_value) {
        try {
            var v_v = null;

(v_v = v_op);
            if ( bool((v_v[1] == 'methcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: v_v[2],v_hyper: v_v[3]}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'funcall_no_params')) ) { (function () {
                die((string('unexpected function call')));
                push(v_v, v_value);
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'methcall')) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['exp'] ); })()));
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: v_v[2],v_arguments: v_param_list,v_hyper: v_v[4]}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'funcall')) ) { (function () {
                die((string('unexpected function call')));
                push(v_v, v_value);
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == String.fromCharCode(40) + ' ' + String.fromCharCode(41))) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
                if ( bool(and(isa(v_value, 'Apply'), function () { return ( bool(((v_value.arguments() != null))) ? false : true); })) ) { (function () {
(v_value.v_arguments = v_param_list);
                    throw(v_value);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_value, 'Call'), function () { return ( bool(((v_value.arguments() != null))) ? false : true); })) ) { (function () {
(v_value.v_arguments = v_param_list);
                    throw(v_value);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_arguments: v_param_list,v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == String.fromCharCode(91) + ' ' + String.fromCharCode(93))) ) { (function () {
(v_v = (function () { var tmp = {v_obj: v_value,v_index_exp: v_v[2]}; tmp.__proto__ = Index; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'block')) ) { (function () {
(v_v = (function () { var tmp = {v_obj: v_value,v_index_exp: (v_v[2])[0]}; tmp.__proto__ = Lookup; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.' + String.fromCharCode(40) + ' ' + String.fromCharCode(41))) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_arguments: v_param_list,v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.' + String.fromCharCode(91) + ' ' + String.fromCharCode(93))) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(91) + ' ' + String.fromCharCode(93) + String.fromCharCode(62),v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125))) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(123) + ' ' + String.fromCharCode(125) + String.fromCharCode(62),v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            push(v_op, v_value);
            throw(v_op);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.reduce_postfix;  // v8 bug workaround
  // method capture_name
  Perlito$Expression.capture_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito::Grammar.ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.capture_name;  // v8 bug workaround
  // method hyper_op
  Perlito$Expression.hyper_op = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(62) + String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.hyper_op;  // v8 bug workaround
  // method operator
  Perlito$Expression.operator = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and(and(and((and(('.' + String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.paren_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('.' + String.fromCharCode(40) + ' ' + String.fromCharCode(41));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' + String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.square_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('.' + String.fromCharCode(91) + ' ' + String.fromCharCode(93));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' + String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.curly_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['curly_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['curly_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.paren_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push(String.fromCharCode(40) + ' ' + String.fromCharCode(41));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.square_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push(String.fromCharCode(91) + ' ' + String.fromCharCode(93));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(('.' + String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })());
    return(List_a);
})());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('-' + String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_block = null;

(v_block = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()))['end_block'] ); })());
    if ( bool(v_block.sig()) ) { (function () {
        die((string('Signature error in block')));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(v_block.stmts());
List_a.push((function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()))['exp'] ); })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.exp_stmts'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('method' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.method_def(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.method_def']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.method_def'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('sub' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.sub_def(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.sub_def']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.sub_def'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('token' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.token(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.token']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.token'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('do' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.statement_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse'] ); })())}; tmp.__proto__ = Do; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(63) + String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ternary_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ternary_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(33) + String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ternary_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_ident'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(36) + String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.capture_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['capture_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_obj: (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: String.fromCharCode(47)}; tmp.__proto__ = Var; return tmp; })(),v_index_exp: (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['capture_name'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Precedence.op_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Precedence.op_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Precedence.op_parse'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(61) + String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('True' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('False' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_bit: 0}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('and' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('and');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('not' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('not');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and(('use' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('-' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito::Grammar.ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_mod: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.full_ident'] ); })())}; tmp.__proto__ = Use; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(('package' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('class' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('grammar' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('role' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.grammar(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.grammar']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.grammar'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.declarator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.declarator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_type(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.opt_type']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_decl: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.declarator'] ); })()),v_type: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.opt_type'] ); })()),v_var: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_ident'] ); })())}; tmp.__proto__ = Decl; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.hyper_op(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('methcall');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('methcall_no_params');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.optional_namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.optional_namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('funcall');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.optional_namespace_before_ident'] ); })()));
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (or(((function () { 
    var v_namespace = null;

    var v_name = null;

(v_namespace = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.optional_namespace_before_ident'] ); })()));
(v_name = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()));
    if ( bool(v_namespace) ) { (function () {
(v_name = (string(v_namespace) + string('::') + string(v_name)));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_name: v_name}; tmp.__proto__ = Proto; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('funcall_no_params');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.optional_namespace_before_ident'] ); })()));
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.ident'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.val_num(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_num']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_num'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.val_buf(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_buf']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_buf'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('space');
List_a.push(' ');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.operator;  // v8 bug workaround
  // method has_newline_after
  Perlito$Expression.has_newline_after = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(35) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.space(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.has_newline_after(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.has_newline_after;  // v8 bug workaround
  // method has_no_comma_or_colon_after
  Perlito$Expression.has_no_comma_or_colon_after = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((',' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.has_no_comma_or_colon_after;  // v8 bug workaround
  // method list_parse
  Perlito$Expression.list_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_is_first_token = null;

            var v_lexer_stack = null;

            var v_terminated = null;

            var v_last_token_was_space = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

            var v_block = null;

            var v_result = null;

(v_last_pos = v_pos);
(v_is_first_token = true);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_terminated = 0);
(v_last_token_was_space = 1);
(v_get_token = function () {
    try {
        var v_v = null;

        if ( bool(elems(v_lexer_stack)) ) { (function () {
(v_v = v_lexer_stack.pop());
            if ( bool(and(and(v_is_first_token, function () { return ((v_v[0] == 'op')); }), function () { return ( bool((Perlito$Precedence.is_fixity_type('prefix', v_v[1]))) ? false : true); })) ) { (function () {
(function () { if (v_v == null) { v_v = [] }; return (v_v[0]  = 'end'); })();;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            var v_m = null;

(v_m = v_self.operator(v_str, v_last_pos));
            if ( bool(( bool(v_m) ? false : true)) ) { (function () {
                throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_v = scalar(v_m));
            if ( bool(and(and(v_is_first_token, function () { return ((v_v[0] == 'op')); }), function () { return ( bool((Perlito$Precedence.is_fixity_type('prefix', v_v[1]))) ? false : true); })) ) { (function () {
(function () { if (v_v == null) { v_v = [] }; return (v_v[0]  = 'end'); })();;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); };
        if ( bool(and(and((((v_v[0]) == 'postfix_or_term')), function () { return (((v_v[1]) == 'block')); }), function () { return v_last_token_was_space; })) ) { (function () {
            if ( bool(v_self.has_newline_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                if ( bool(v_self.has_no_comma_or_colon_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };
(v_last_token_was_space = ((v_v[0] == 'space')));
(v_is_first_token = false);
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('and');
List_a.push('or');
List_a.push(String.fromCharCode(33) + String.fromCharCode(33));
List_a.push(String.fromCharCode(93));
List_a.push(String.fromCharCode(41));
List_a.push(String.fromCharCode(125));
List_a.push(String.fromCharCode(59));
List_a.push('if');
List_a.push('else');
List_a.push('elsif');
List_a.push('unless');
List_a.push('when');
List_a.push('for');
List_a.push('while');
List_a.push('loop');
    return(List_a);
})()}; tmp.__proto__ = Perlito$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
            if ( bool((elems(v_res) == 0)) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = '*undef*'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = null); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = null); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((elems(v_res) > 1)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_result = v__NAMESPACE.pop_term(v_res));
            if ( bool((elems(v_res) > 0)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = v_result); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = v_block); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = v_terminated); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.list_parse;  // v8 bug workaround
  // method circumfix_parse
  Perlito$Expression.circumfix_parse = function (v_str, v_pos, v_delimiter) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

(v_last_pos = v_pos);
(v_get_token = function () {
    try {
        var v_m = null;

        var v_v = null;

(v_m = v_self.operator(v_str, v_last_pos));
        if ( bool(( bool(v_m) ? false : true)) ) { (function () {
            die((string('Expected closing delimiter: ')), ((v_delimiter)), ' near ', v_last_pos);;
        })(); }
        else { (function () {
            null;
        })(); };
(v_v = scalar(v_m));
        if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
        })(); }
        else { (function () {
            null;
        })(); };
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: v_delimiter}; tmp.__proto__ = Perlito$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
(v_res = v__NAMESPACE.pop_term(v_res));
            if ( bool(( bool(((v_res != null))) ? false : true)) ) { (function () {
(v_res = '*undef*');;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: v_res}; tmp.__proto__ = Perlito$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.circumfix_parse;  // v8 bug workaround
  // method ternary_parse
  Perlito$Expression.ternary_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(33) + String.fromCharCode(33));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.ternary_parse;  // v8 bug workaround
  // method curly_parse
  Perlito$Expression.curly_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(125));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.curly_parse;  // v8 bug workaround
  // method square_parse
  Perlito$Expression.square_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(93));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.square_parse;  // v8 bug workaround
  // method paren_parse
  Perlito$Expression.paren_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(41));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.paren_parse;  // v8 bug workaround
  // method exp_parse
  Perlito$Expression.exp_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_lexer_stack = null;

            var v_terminated = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

            var v_block = null;

            var v_result = null;

(v_last_pos = v_pos);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_terminated = 0);
(v_get_token = function () {
    try {
        var v_v = null;

        if ( bool(elems(v_lexer_stack)) ) { (function () {
(v_v = v_lexer_stack.pop());;
        })(); }
        else { (function () {
            var v_m = null;

(v_m = v_self.operator(v_str, v_last_pos));
            if ( bool(( bool(v_m) ? false : true)) ) { (function () {
                throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_v = scalar(v_m));
            if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); };
        if ( bool(or(or(or(or((and((((v_v[0]) == 'postfix_or_term')), function () { return (((v_v[1]) == 'block')); })), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Sub')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Method')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Do')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'CompUnit')); })); })) ) { (function () {
            if ( bool(v_self.has_newline_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(93));
List_a.push(String.fromCharCode(41));
List_a.push(String.fromCharCode(125));
List_a.push(String.fromCharCode(59));
List_a.push('if');
List_a.push('else');
List_a.push('elsif');
List_a.push('unless');
List_a.push('when');
List_a.push('for');
List_a.push('while');
List_a.push('loop');
    return(List_a);
})()}; tmp.__proto__ = Perlito$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
            if ( bool((elems(v_res) == 0)) ) { (function () {
                throw((function () { var tmp = {v_bool: 0}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((elems(v_res) > 1)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_result = v__NAMESPACE.pop_term(v_res));
            if ( bool((elems(v_res) > 0)) ) { (function () {
(v_block = v_res.pop());
                if ( bool(( bool((isa(v_block, 'Lit::Block'))) ? false : true)) ) { (function () {
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = v_result); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = v_block); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = v_terminated); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.exp_parse;  // v8 bug workaround
  // method exp_stmt
  Perlito$Expression.exp_stmt = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.if(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.if']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.if'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.unless(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.unless']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.unless'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.when(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.when']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.when'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.for(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.for']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.for'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.while(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.while']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.while'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.loop(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.loop']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.loop'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.exp_stmt;  // v8 bug workaround
  // method statement_modifier
  Perlito$Expression.statement_modifier = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and(('if' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('unless' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('when' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('for' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('while' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('loop' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.statement_modifier;  // v8 bug workaround
  // method delimited_statement
  Perlito$Expression.delimited_statement = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(59) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.statement_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(59) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.delimited_statement;  // v8 bug workaround
  // method statement_parse
  Perlito$Expression.statement_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_lexer_stack = null;

            var v_res = null;

            var v_modifier = null;

            var v_modifier_exp = null;

(v_last_pos = v_pos);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_res = v_self.exp_stmt(v_str, v_pos));
            if ( bool(v_res) ) { (function () {
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_res = v_self.exp_parse(v_str, v_pos));
            if ( bool(( bool((v_res)) ? false : true)) ) { (function () {
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })(), 'Lit::Block')) ) { (function () {
(function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp']  = (function () { var tmp = {v_block: (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })()}; tmp.__proto__ = Do; return tmp; })()); })();;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['end_block'] ); })()) ) { (function () {
                die((string('Unexpected block after expression near ')), v_pos);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['terminated'] ); })()) ) { (function () {
(v_res.v_capture = (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier = v_self.statement_modifier(v_str, v_res.to()));
            if ( bool(( bool((v_modifier)) ? false : true)) ) { (function () {
(v_res.v_capture = (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier_exp = v_self.exp_parse(v_str, v_modifier.to()));
            if ( bool(( bool((v_modifier_exp)) ? false : true)) ) { (function () {
                die((string('Expected expression after ' + String.fromCharCode(39))), v_modifier, (string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['end_block'] ); })()) ) { (function () {
                die((string('Unexpected block after expression near ')), v_modifier.to());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier = string(v_modifier));
            if ( bool((v_modifier == 'if')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'unless')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'while')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = While; return tmp; })()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'for')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = For; return tmp; })()}; tmp.__proto__ = Perlito$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            return(die((string('Unexpected statement modifier ' + String.fromCharCode(39)) + string(v_modifier) + string(String.fromCharCode(39)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Expression.statement_parse;  // v8 bug workaround
        // use Perlito::Precedence
;        // use Perlito::Grammar
;        // use Perlito::Perl5::Emitter
;(v_reduce_to_ast = function (v_op_stack, v_num_stack) {
    try {
        var v_last_op = null;

(v_last_op = v_op_stack.shift());
        if ( bool((v_last_op[0] == 'prefix')) ) { return (function () {
            return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('prefix:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
        })(); }
        else { return (function () {
            if ( bool((v_last_op[0] == 'postfix')) ) { return (function () {
                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('postfix:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
            })(); }
            else { return (function () {
                if ( bool((v_last_op[0] == 'postfix_or_term')) ) { return (function () {
                    return(v_num_stack.push(v__NAMESPACE.reduce_postfix(v_last_op, v__NAMESPACE.pop_term(v_num_stack))));
                })(); }
                else { return (function () {
                    if ( bool(Perlito$Precedence.is_assoc_type('list', v_last_op[1])) ) { return (function () {
                        var v_arg = null;

                        if ( bool((elems(v_num_stack) < 2)) ) { (function () {
                            var v_v2 = null;

(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                            if ( bool(and((isa(v_v2, 'Apply')), function () { return ((v_v2.code() == ((string('list:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62)))))); })) ) { (function () {
(v_v2.arguments()).push(null);
v_num_stack.push(v_v2);;
                            })(); }
                            else { (function () {
                                push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('list:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_v2);
List_a.push(null);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                            })(); };
                            throw(null);;
                        })(); }
                        else { (function () {
                            var v_v2 = null;

(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
(v_arg = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})());;
                        })(); };
                        if ( bool(and(and((isa((v_arg[0]), 'Apply')), function () { return ((v_last_op[0] == 'infix')); }), function () { return (((v_arg[0]).code() == ((string('list:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62)))))); })) ) { (function () {
                            push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (v_arg[0]).code(),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

(List_v = (((v_arg[0]).arguments())));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push(v_arg[1]);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());
                            throw(null);;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
                        return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('list:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: v_arg}; tmp.__proto__ = Apply; return tmp; })()));
                    })(); }
                    else { return (function () {
                        if ( bool(Perlito$Precedence.is_assoc_type('chain', v_last_op[1])) ) { return (function () {
                            var v_v2 = null;

                            var v_arg = null;

                            if ( bool((elems(v_num_stack) < 2)) ) { (function () {
                                die((string('Missing value after operator ') + string(v_last_op[1])));;
                            })(); }
                            else { (function () {
                                null;
                            })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
(v_arg = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})());
                            return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('infix:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: v_arg}; tmp.__proto__ = Apply; return tmp; })()));
                        })(); }
                        else { return (function () {
                            if ( bool((v_last_op[0] == 'ternary')) ) { return (function () {
                                var v_v2 = null;

                                if ( bool(((elems(v_num_stack) < 2))) ) { (function () {
                                    die((string('Missing value after ternary operator')));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('ternary:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_last_op[2]);
List_a.push(v_v2);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
                            })(); }
                            else { return (function () {
                                var v_v2 = null;

                                if ( bool(((elems(v_num_stack) < 2))) ) { (function () {
                                    die((string('missing value after operator ' + String.fromCharCode(39)) + string(v_last_op[1]) + string((string(String.fromCharCode(39))))));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('infix:' + String.fromCharCode(60)) + string(v_last_op[1]) + string(String.fromCharCode(62))),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
                            })(); };
                        })(); };
                    })(); };
                })(); };
            })(); };
        })(); };;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});})()
;    // use v6
;// class Perlito::Grammar::Regex
if (typeof Perlito$Grammar$Regex !== 'object') {
  Perlito$Grammar$Regex = function() {};
  Perlito$Grammar$Regex = new Perlito$Grammar$Regex;
  Perlito$Grammar$Regex.isa = function (s) { return s == 'Perlito::Grammar::Regex'; };
  Perlito$Grammar$Regex.perl = function () { return 'Perlito::Grammar::Regex.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Grammar$Regex;
  var Hash_rule_terms = {};
  // method ws
  Perlito$Grammar$Regex.ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.ws;  // v8 bug workaround
  // method rule_ident
  Perlito$Grammar$Regex.rule_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digit']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.rule_ident;  // v8 bug workaround
  // method any
  Perlito$Grammar$Regex.any = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.any;  // v8 bug workaround
  // method literal
  Perlito$Grammar$Regex.literal = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.literal;  // v8 bug workaround
  // method metasyntax_exp
  Perlito$Grammar$Regex.metasyntax_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.metasyntax_exp;  // v8 bug workaround
  // method char_range
  Perlito$Grammar$Regex.char_range = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.char_range;  // v8 bug workaround
  // method char_class
  Perlito$Grammar$Regex.char_class = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_range(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.char_class;  // v8 bug workaround
  // method string_code
  Perlito$Grammar$Regex.string_code = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.string_code;  // v8 bug workaround
  // method parsed_code
  Perlito$Grammar$Regex.parsed_code = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string(v_MATCH)));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.parsed_code;  // v8 bug workaround
  // method named_capture_body
  Perlito$Grammar$Regex.named_capture_body = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['capturing_group']  = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())); })();
    return(Hash_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 1}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('invalid alias syntax'));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.named_capture_body;  // v8 bug workaround
  // method variables
  Perlito$Grammar$Regex.variables = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(36) + String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(36) + String.fromCharCode(47) + String.fromCharCode(123)) + string(String.fromCharCode(39)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_ident'] ); })()) + string(String.fromCharCode(39)) + string(String.fromCharCode(125)))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_sigil'] ); })()) + string(String.fromCharCode(47) + String.fromCharCode(91)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int'] ); })()) + string(String.fromCharCode(93)))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_twigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_sigil'] ); })()),v_twigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.var_twigil'] ); })()),v_name: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.full_ident'] ); })())}; tmp.__proto__ = Rul$Var; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.variables;  // v8 bug workaround
  // method rule_terms
  Perlito$Grammar$Regex.rule_terms = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$Capture; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(60) + String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) + String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$CaptureResult; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and((String.fromCharCode(60) + 'after' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$After; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and((String.fromCharCode(60) + 'before' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$Before; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and((String.fromCharCode(60) + String.fromCharCode(33) + 'before' == (v_str || "").substr(v_MATCH.to(), 8)), function () { return ((v_MATCH.v_to = add(8, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$NotBefore; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(60) + String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['negate']  = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['metasyntax']  = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })())); })();
    return(Hash_a);
})()); })();
    return(Hash_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(60) + '+' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_class(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_chars: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class'] ); })())}; tmp.__proto__ = Rul$CharClass; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(60) + '-' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_class(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_chars: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class'] ); })())}; tmp.__proto__ = Rul$NegateCharClass; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and((String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(60) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.variables(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_var: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())}; tmp.__proto__ = Rul$InterpolateVar; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 1}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.parsed_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['parsed_code']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_closure: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['parsed_code'] ); })())}; tmp.__proto__ = Rul$Block; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and(and((and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.digits'] ); })()))}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.digits'] ); })()))}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_char: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any'] ); })())}; tmp.__proto__ = Rul$SpecialChar; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {}; tmp.__proto__ = Rul$Dot; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.rule_terms;  // v8 bug workaround
  // method rule_term
  Perlito$Grammar$Regex.rule_term = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.variables(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(61) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.named_capture_body(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['named_capture_body']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['named_capture_body'] ); })()),v_capture_ident: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())}; tmp.__proto__ = Rul$NamedCapture; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_terms(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_terms']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_terms'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(62) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(38) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(47) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.rule_term;  // v8 bug workaround
  // method quant_exp
  Perlito$Grammar$Regex.quant_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and(('**' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.val_int'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_term(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.quant_exp;  // v8 bug workaround
  // method greedy_exp
  Perlito$Grammar$Regex.greedy_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.greedy_exp;  // v8 bug workaround
  // method quantifier
  Perlito$Grammar$Regex.quantifier = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_term(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_ws2(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.quant_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quant_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.greedy_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['greedy_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar.opt_ws3(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_term: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })()),v_quant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quant_exp'] ); })()),v_greedy: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['greedy_exp'] ); })()),v_ws1: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.opt_ws'] ); })()),v_ws2: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.opt_ws2'] ); })()),v_ws3: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar.opt_ws3'] ); })())}; tmp.__proto__ = Rul$Quantifier; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })())));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.quantifier;  // v8 bug workaround
  // method concat_list
  Perlito$Grammar$Regex.concat_list = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.quantifier(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_list(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier'] ); })()));
(List_v = ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list'] ); })()))));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.concat_list;  // v8 bug workaround
  // method concat_exp
  Perlito$Grammar$Regex.concat_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_list(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_concat: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list'] ); })())}; tmp.__proto__ = Rul$Concat; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.concat_exp;  // v8 bug workaround
  // method or_list_exp
  Perlito$Grammar$Regex.or_list_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.or_list_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp'] ); })()));
(List_v = ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp'] ); })()))));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.or_list_exp;  // v8 bug workaround
  // method rule
  Perlito$Grammar$Regex.rule = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.or_list_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_or_list: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp'] ); })())}; tmp.__proto__ = Rul$Or; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar$Regex.rule;  // v8 bug workaround
})()
;    // use v6
;// class Perlito::Grammar
if (typeof Perlito$Grammar !== 'object') {
  Perlito$Grammar = function() {};
  Perlito$Grammar = new Perlito$Grammar;
  Perlito$Grammar.isa = function (s) { return s == 'Perlito::Grammar'; };
  Perlito$Grammar.perl = function () { return 'Perlito::Grammar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Grammar;
  // method unless
  Perlito$Grammar.unless = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and((and(('u' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'unless' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: v_body}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.unless;  // v8 bug workaround
  // method if
  Perlito$Grammar.if = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and((and(('i' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('f' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp2(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

    var v_otherwise = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
(v_otherwise = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })()))['exp'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    if ( bool(( bool(((v_otherwise != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'else' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    if ( bool(isa(v_otherwise, 'Lit::Hash')) ) { (function () {
(v_otherwise = (function () { var tmp = {v_stmts: v_otherwise.hash1()}; tmp.__proto__ = Lit$Block; return tmp; })());;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: v_otherwise}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.if(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['if']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['if'] ); })()));
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.if;  // v8 bug workaround
  // method when
  Perlito$Grammar.when = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and((and(('w' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('h' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'when' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_parameters: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body}; tmp.__proto__ = When; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.when;  // v8 bug workaround
  // method for
  Perlito$Grammar.for = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and((and(('f' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('r' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'when' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_topic: null,v_body: v_body}; tmp.__proto__ = For; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.for;  // v8 bug workaround
  // method while
  Perlito$Grammar.while = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and((and(('w' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('h' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('i' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'while' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body}; tmp.__proto__ = While; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.while;  // v8 bug workaround
  // method loop
  Perlito$Grammar.loop = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and((and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('p' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { return (function () {
(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })());
        if ( bool(isa(v_body, 'Lit::Block')) ) { return (function () {
            return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })(),v_body: v_body}; tmp.__proto__ = While; return tmp; })()));
        })(); }
        else { return (function () {
            return(die((string('Missing code block in ' + String.fromCharCode(39) + 'loop' + String.fromCharCode(39)))));
        })(); };
    })(); }
    else { return (function () {
        return(die((string(String.fromCharCode(39) + 'loop' + String.fromCharCode(39) + ' with parameters is not implemented'))));
    })(); };
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.loop;  // v8 bug workaround
})()
;// class Perlito::Grammar
if (typeof Perlito$Grammar !== 'object') {
  Perlito$Grammar = function() {};
  Perlito$Grammar = new Perlito$Grammar;
  Perlito$Grammar.isa = function (s) { return s == 'Perlito::Grammar'; };
  Perlito$Grammar.perl = function () { return 'Perlito::Grammar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito$Grammar;
  // method is_newline
  Perlito$Grammar.is_newline = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(10) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(13) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(13) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(10) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.is_newline;  // v8 bug workaround
  // method not_newline
  Perlito$Grammar.not_newline = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.not_newline;  // v8 bug workaround
  // method ident
  Perlito$Grammar.ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.ident;  // v8 bug workaround
  // method full_ident
  Perlito$Grammar.full_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.full_ident;  // v8 bug workaround
  // method namespace_before_ident
  Perlito$Grammar.namespace_before_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.namespace_before_ident;  // v8 bug workaround
  // method optional_namespace_before_ident
  Perlito$Grammar.optional_namespace_before_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['namespace_before_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = ''));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.optional_namespace_before_ident;  // v8 bug workaround
  // method pod_begin
  Perlito$Grammar.pod_begin = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((String.fromCharCode(61) + 'end' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.pod_begin;  // v8 bug workaround
  // method ws
  Perlito$Grammar.ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((and((String.fromCharCode(35) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((and((String.fromCharCode(61) + 'begin' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(61) + 'for' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.space(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.ws;  // v8 bug workaround
  // method opt_ws
  Perlito$Grammar.opt_ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_ws;  // v8 bug workaround
  // method opt_ws2
  Perlito$Grammar.opt_ws2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_ws2;  // v8 bug workaround
  // method opt_ws3
  Perlito$Grammar.opt_ws3 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_ws3;  // v8 bug workaround
  // method grammar
  Perlito$Grammar.grammar = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident'] ); })()),v_body: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = CompUnit; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.grammar;  // v8 bug workaround
  // method declarator
  Perlito$Grammar.declarator = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(('my' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('state' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('has' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.declarator;  // v8 bug workaround
  // method exp_stmts2
  Perlito$Grammar.exp_stmts2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.exp_stmts2;  // v8 bug workaround
  // method exp
  Perlito$Grammar.exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.exp_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.exp_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.exp_parse'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.exp;  // v8 bug workaround
  // method exp2
  Perlito$Grammar.exp2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.exp_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.exp_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.exp_parse'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.exp2;  // v8 bug workaround
  // method opt_ident
  Perlito$Grammar.opt_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = 'postcircumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62)));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_ident;  // v8 bug workaround
  // method opt_type
  Perlito$Grammar.opt_type = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = ''));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_type;  // v8 bug workaround
  // method var_sigil
  Perlito$Grammar.var_sigil = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(38) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.var_sigil;  // v8 bug workaround
  // method var_twigil
  Perlito$Grammar.var_twigil = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(94) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.var_twigil;  // v8 bug workaround
  // method var_name
  Perlito$Grammar.var_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(47) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digit']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.var_name;  // v8 bug workaround
  // method var_ident
  Perlito$Grammar.var_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_twigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.optional_namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['optional_namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_sigil'] ); })()),v_twigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_twigil'] ); })()),v_namespace: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['optional_namespace_before_ident'] ); })()),v_name: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_name'] ); })())}; tmp.__proto__ = Var; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.var_ident;  // v8 bug workaround
  // method exponent
  Perlito$Grammar.exponent = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('E' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('-' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.exponent;  // v8 bug workaround
  // method val_num
  Perlito$Grammar.val_num = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); })));
})()); }));
})()); })));
})()); }));
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_num: string(v_MATCH)}; tmp.__proto__ = Val$Num; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.val_num;  // v8 bug workaround
  // method char_any
  Perlito$Grammar.char_any = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.char_any;  // v8 bug workaround
  // method char_any_single_quote
  Perlito$Grammar.char_any_single_quote = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.char_any_single_quote;  // v8 bug workaround
  // method single_quoted_unescape
  Perlito$Grammar.single_quoted_unescape = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(92)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(39)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(92)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any_single_quote(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_single_quote']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_single_quote'] ); })()) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.single_quoted_unescape;  // v8 bug workaround
  // method char_any_double_quote
  Perlito$Grammar.char_any_double_quote = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.char_any_double_quote;  // v8 bug workaround
  // method double_quoted_unescape
  Perlito$Grammar.double_quoted_unescape = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(10)))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('t' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num(9))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and((String.fromCharCode(91) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any_double_quote(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_double_quote']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_double_quote'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.double_quoted_unescape;  // v8 bug workaround
  // method double_quoted_buf
  Perlito$Grammar.double_quoted_buf = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(91) + String.fromCharCode(93) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) + String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_block: (function () { var tmp = {v_stmts: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.double_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_unescape'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.double_quoted_buf;  // v8 bug workaround
  // method val_buf
  Perlito$Grammar.val_buf = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and((and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.double_quoted_buf(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('double_quoted_buf')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }), function () { return (and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    var v_args = null;

(v_args = (function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })());
    if ( bool(( bool(v_args) ? false : true)) ) { return (function () {
        return((v_MATCH.v_capture = (function () { var tmp = {v_buf: ''}; tmp.__proto__ = Val$Buf; return tmp; })()));
    })(); }
    else { return (function () {
        return((v_MATCH.v_capture = (function () { var tmp = {v_namespace: '',v_code: 'list:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62),v_arguments: (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].capture() ) }; return out; })(((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })()))}; tmp.__proto__ = Apply; return tmp; })()));
    })(); };
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.val_buf;  // v8 bug workaround
  // method digits
  Perlito$Grammar.digits = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.digits;  // v8 bug workaround
  // method val_int
  Perlito$Grammar.val_int = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_int: string(v_MATCH)}; tmp.__proto__ = Val$Int; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.val_int;  // v8 bug workaround
  // method exp_stmts
  Perlito$Grammar.exp_stmts = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.delimited_statement(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito::Expression.delimited_statement')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.delimited_statement'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.delimited_statement']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].capture() ) }; return out; })((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.delimited_statement'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.exp_stmts;  // v8 bug workaround
  // method opt_name
  Perlito$Grammar.opt_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.opt_name;  // v8 bug workaround
  // method var_invocant
  Perlito$Grammar.var_invocant = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: 'self'}; tmp.__proto__ = Var; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.var_invocant;  // v8 bug workaround
  // method args_sig
  Perlito$Grammar.args_sig = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_invocant(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_invocant']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Expression.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_invocant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_invocant'] ); })()),v_positional: Perlito$Expression.expand_list((function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Expression.list_parse'] ); })()))['exp'] ); })()),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.args_sig;  // v8 bug workaround
  // method method_sig
  Perlito$Grammar.method_sig = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((String.fromCharCode(40) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.args_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['args_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(41) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['args_sig'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_invocant: (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: 'self'}; tmp.__proto__ = Var; return tmp; })(),v_positional: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.method_sig;  // v8 bug workaround
  // method method_def
  Perlito$Grammar.method_def = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.method_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('Syntax Error in method ' + String.fromCharCode(39) + '.', scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['name'] ); })()), String.fromCharCode(39) + ' near pos' + String.fromCharCode(61), v_MATCH.to()));
})()), function () { return 1; }))));
})()); }));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()),v_sig: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig'] ); })()),v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Method; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.method_def;  // v8 bug workaround
  // method sub_def
  Perlito$Grammar.sub_def = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.method_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('Syntax Error in sub ' + String.fromCharCode(39), scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['name'] ); })()), String.fromCharCode(39)));
})()), function () { return 1; }))));
})()); }));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()),v_sig: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig'] ); })()),v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Sub; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.sub_def;  // v8 bug workaround
  // method token
  Perlito$Grammar.token = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito$Grammar$Regex.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar::Regex.rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    var v_source = null;

    var v_ast = null;

(v_source = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()) + string(' ' + String.fromCharCode(40) + ' ' + String.fromCharCode(36) + 'grammar: ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'pos ' + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ' + String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito::Match.new' + String.fromCharCode(40) + ' str ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'str, from ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'pos, to ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'pos, bool ' + String.fromCharCode(61) + String.fromCharCode(62) + ' 1 ' + String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ' + String.fromCharCode(40) + ' ') + string((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito::Grammar::Regex.rule'] ); })())).emit_perl6()) + string(String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(125))));
(v_ast = Perlito$Grammar.method_def(v_source, 0));
    return((v_MATCH.v_capture = scalar(v_ast)));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito$Grammar.token;  // v8 bug workaround
        // use Perlito::Expression
;        // use Perlito::Grammar::Regex
;        // use Perlito::Grammar::Control
;})()
;    // use v6
;// class Rul
if (typeof Rul !== 'object') {
  Rul = function() {};
  Rul = new Rul;
  Rul.isa = function (s) { return s == 'Rul'; };
  Rul.perl = function () { return 'Rul.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul;
  // sub constant
  Rul.constant = function (v_str) {
        try {
            var v_len = null;

(v_len = chars(v_str));
            if ( bool((v_str == String.fromCharCode(92))) ) { (function () {
(v_str = String.fromCharCode(92) + String.fromCharCode(92));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_str == String.fromCharCode(39))) ) { (function () {
(v_str = String.fromCharCode(92) + String.fromCharCode(39));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_len)) ) { return (function () {
                return((string(String.fromCharCode(40) + ' ' + String.fromCharCode(39)) + string(v_str) + string(String.fromCharCode(39) + ' eq substr' + String.fromCharCode(40) + ' ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to, ') + string(v_len) + string(String.fromCharCode(41) + ' ') + string(String.fromCharCode(38) + String.fromCharCode(38) + ' ' + String.fromCharCode(40) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ') + string(v_len) + string(' + ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(41)) + string(String.fromCharCode(41))));
            })(); }
            else { return (function () {
                throw('1');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul.constant;  // v8 bug workaround
})()
;// class Rul::Quantifier
if (typeof Rul$Quantifier !== 'object') {
  Rul$Quantifier = function() {};
  Rul$Quantifier = new Rul$Quantifier;
  Rul$Quantifier.isa = function (s) { return s == 'Rul::Quantifier'; };
  Rul$Quantifier.perl = function () { return 'Rul::Quantifier.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Quantifier;
  // accessor term
  Rul$Quantifier.v_term = null;
  Rul$Quantifier.term = function () { return this.v_term; };
  // accessor quant
  Rul$Quantifier.v_quant = null;
  Rul$Quantifier.quant = function () { return this.v_quant; };
  // accessor greedy
  Rul$Quantifier.v_greedy = null;
  Rul$Quantifier.greedy = function () { return this.v_greedy; };
  // accessor ws1
  Rul$Quantifier.v_ws1 = null;
  Rul$Quantifier.ws1 = function () { return this.v_ws1; };
  // accessor ws2
  Rul$Quantifier.v_ws2 = null;
  Rul$Quantifier.ws2 = function () { return this.v_ws2; };
  // accessor ws3
  Rul$Quantifier.v_ws3 = null;
  Rul$Quantifier.ws3 = function () { return this.v_ws3; };
  // method emit_perl6
  Rul$Quantifier.emit_perl6 = function () {
    var v_self = this;
        try {
            if ( bool(and(((v_self.v_quant == '')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                throw(v_self.v_term.emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == '+')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'count ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('while ') + string(v_self.v_term.emit_perl6()) + string(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ' + String.fromCharCode(40) + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(60) + ' 2' + String.fromCharCode(41) + ' ') + string(String.fromCharCode(123) + ' ') + string('if ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_match_null + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'count ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'count + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'count ' + String.fromCharCode(62) + ' 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == '*')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('while ') + string(v_self.v_term.emit_perl6()) + string(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ' + String.fromCharCode(40) + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(60) + ' 2' + String.fromCharCode(41) + ' ') + string(String.fromCharCode(123) + ' ') + string('if ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(40) + String.fromCharCode(41) + ' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_match_null + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == String.fromCharCode(63))), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('if ' + String.fromCharCode(33) + String.fromCharCode(40) + 'do ' + String.fromCharCode(123)) + string(v_self.v_term.emit_perl6()) + string(String.fromCharCode(125) + String.fromCharCode(41) + ' ') + string(String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + String.fromCharCode(41))));;
            })(); }
            else { (function () {
                null;
            })(); };
            warn((string('Rul::Quantifier: ') + string(perl(v_self, string((string(' not implemented')))))));
            return(v_self.v_term.emit_perl6());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Quantifier.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Quantifier.set_captures_to_array = function () {
    var v_self = this;
        try {
            return(v_self.v_term.set_captures_to_array());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Quantifier.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Or
if (typeof Rul$Or !== 'object') {
  Rul$Or = function() {};
  Rul$Or = new Rul$Or;
  Rul$Or.isa = function (s) { return s == 'Rul::Or'; };
  Rul$Or.perl = function () { return 'Rul::Or.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Or;
  // accessor or_list
  Rul$Or.v_or_list = null;
  Rul$Or.or_list = function () { return this.v_or_list; };
  // method emit_perl6
  Rul$Or.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'pos1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ' + String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl6() ) }; return out; })(v_self.v_or_list)).join(String.fromCharCode(125) + String.fromCharCode(41) + ' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ' + String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'pos1' + String.fromCharCode(59) + ' ')) + string(String.fromCharCode(125) + String.fromCharCode(41) + ' ' + String.fromCharCode(125) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Or.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Or.set_captures_to_array = function () {
    var v_self = this;
        try {
            return((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].set_captures_to_array() ) }; return out; })(v_self.v_or_list));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Or.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Concat
if (typeof Rul$Concat !== 'object') {
  Rul$Concat = function() {};
  Rul$Concat = new Rul$Concat;
  Rul$Concat.isa = function (s) { return s == 'Rul::Concat'; };
  Rul$Concat.perl = function () { return 'Rul::Concat.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Concat;
  // accessor concat
  Rul$Concat.v_concat = null;
  Rul$Concat.concat = function () { return this.v_concat; };
  // method emit_perl6
  Rul$Concat.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl6() ) }; return out; })(v_self.v_concat)).join(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ')) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Concat.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Concat.set_captures_to_array = function () {
    var v_self = this;
        try {
            return((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].set_captures_to_array() ) }; return out; })(v_self.v_concat));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Concat.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Subrule
if (typeof Rul$Subrule !== 'object') {
  Rul$Subrule = function() {};
  Rul$Subrule = new Rul$Subrule;
  Rul$Subrule.isa = function (s) { return s == 'Rul::Subrule'; };
  Rul$Subrule.perl = function () { return 'Rul::Subrule.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Subrule;
  // accessor metasyntax
  Rul$Subrule.v_metasyntax = null;
  Rul$Subrule.metasyntax = function () { return this.v_metasyntax; };
  // accessor captures
  Rul$Subrule.v_captures = null;
  Rul$Subrule.captures = function () { return this.v_captures; };
  // method emit_perl6
  Rul$Subrule.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_meth = null;

            var v_code = null;

(v_meth = ( bool((add(1, index(v_self.v_metasyntax, '.')))) ? v_self.v_metasyntax : ((string(String.fromCharCode(36) + 'grammar.') + string(v_self.v_metasyntax)))));
            if ( bool((v_self.v_captures == 1)) ) { (function () {
(v_code = (string('if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2' + String.fromCharCode(59) + ' 1 ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));;
            })(); }
            else { (function () {
                if ( bool((v_self.v_captures > 1)) ) { (function () {
(v_code = (string('if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' ') + string('if exists ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(40) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + String.fromCharCode(41) + '.push' + String.fromCharCode(40) + ' ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(91) + ' ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(93) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));;
                })(); }
                else { (function () {
(v_code = 'if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' 1 ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ');;
                })(); };;
            })(); };
            return((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(61) + ' ') + string(v_meth) + string(String.fromCharCode(40) + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(v_code) + string(String.fromCharCode(125) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Subrule.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Subrule.set_captures_to_array = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_captures > 0)) ) { return (function () {
                return((v_self.v_captures = add(v_self.v_captures, 1)));
            })(); }
            else { return (function () {
                null;
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Subrule.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Var
if (typeof Rul$Var !== 'object') {
  Rul$Var = function() {};
  Rul$Var = new Rul$Var;
  Rul$Var.isa = function (s) { return s == 'Rul::Var'; };
  Rul$Var.perl = function () { return 'Rul::Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Var;
  // accessor sigil
  Rul$Var.v_sigil = null;
  Rul$Var.sigil = function () { return this.v_sigil; };
  // accessor twigil
  Rul$Var.v_twigil = null;
  Rul$Var.twigil = function () { return this.v_twigil; };
  // accessor name
  Rul$Var.v_name = null;
  Rul$Var.name = function () { return this.v_name; };
  // method emit_perl6
  Rul$Var.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_table = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = String.fromCharCode(36)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = String.fromCharCode(36) + 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = String.fromCharCode(36) + 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = String.fromCharCode(36) + 'Code_'); })();
    return(Hash_a);
})());
            return((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Var.emit_perl6;  // v8 bug workaround
})()
;// class Rul::Constant
if (typeof Rul$Constant !== 'object') {
  Rul$Constant = function() {};
  Rul$Constant = new Rul$Constant;
  Rul$Constant.isa = function (s) { return s == 'Rul::Constant'; };
  Rul$Constant.perl = function () { return 'Rul::Constant.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Constant;
  // accessor constant
  Rul$Constant.v_constant = null;
  Rul$Constant.constant = function () { return this.v_constant; };
  // method emit_perl6
  Rul$Constant.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_str = null;

(v_str = v_self.v_constant);
            return(Rul.constant(v_str));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Constant.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Constant.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Constant.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Dot
if (typeof Rul$Dot !== 'object') {
  Rul$Dot = function() {};
  Rul$Dot = new Rul$Dot;
  Rul$Dot.isa = function (s) { return s == 'Rul::Dot'; };
  Rul$Dot.perl = function () { return 'Rul::Dot.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Dot;
  // method emit_perl6
  Rul$Dot.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40) + ' ' + String.fromCharCode(39) + String.fromCharCode(39) + ' ne substr' + String.fromCharCode(40) + ' ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to, 1 ' + String.fromCharCode(41) + ' ') + string(String.fromCharCode(38) + String.fromCharCode(38) + ' ' + String.fromCharCode(40) + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' 1 + ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(41)) + string(String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Dot.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Dot.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Dot.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::SpecialChar
if (typeof Rul$SpecialChar !== 'object') {
  Rul$SpecialChar = function() {};
  Rul$SpecialChar = new Rul$SpecialChar;
  Rul$SpecialChar.isa = function (s) { return s == 'Rul::SpecialChar'; };
  Rul$SpecialChar.perl = function () { return 'Rul::SpecialChar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$SpecialChar;
  // accessor char
  Rul$SpecialChar.v_char = null;
  Rul$SpecialChar.char = function () { return this.v_char; };
  // method emit_perl6
  Rul$SpecialChar.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_char = null;

(v_char = v_self.v_char);
            if ( bool((v_char == 'n')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'is_newline',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 'N')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'not_newline',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 'd')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'digit',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 's')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'space',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 't')) ) { (function () {
                throw(Rul.constant(String.fromCharCode(num(9))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(Rul.constant(v_char));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$SpecialChar.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$SpecialChar.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$SpecialChar.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Block
if (typeof Rul$Block !== 'object') {
  Rul$Block = function() {};
  Rul$Block = new Rul$Block;
  Rul$Block.isa = function (s) { return s == 'Rul::Block'; };
  Rul$Block.perl = function () { return 'Rul::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Block;
  // accessor closure
  Rul$Block.v_closure = null;
  Rul$Block.closure = function () { return this.v_closure; };
  // method emit_perl6
  Rul$Block.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40) + String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string(v_self.v_closure) + string(' ' + String.fromCharCode(125) + String.fromCharCode(41) + ' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' 1' + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Block.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Block.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Block.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::InterpolateVar
if (typeof Rul$InterpolateVar !== 'object') {
  Rul$InterpolateVar = function() {};
  Rul$InterpolateVar = new Rul$InterpolateVar;
  Rul$InterpolateVar.isa = function (s) { return s == 'Rul::InterpolateVar'; };
  Rul$InterpolateVar.perl = function () { return 'Rul::InterpolateVar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$InterpolateVar;
  // accessor var
  Rul$InterpolateVar.v_var = null;
  Rul$InterpolateVar.var = function () { return this.v_var; };
  // method emit_perl6
  Rul$InterpolateVar.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string(String.fromCharCode(35) + ' TODO: interpolate var ') + string(v_self.v_var.emit_perl6()) + string('')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$InterpolateVar.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$InterpolateVar.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$InterpolateVar.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NamedCapture
if (typeof Rul$NamedCapture !== 'object') {
  Rul$NamedCapture = function() {};
  Rul$NamedCapture = new Rul$NamedCapture;
  Rul$NamedCapture.isa = function (s) { return s == 'Rul::NamedCapture'; };
  Rul$NamedCapture.perl = function () { return 'Rul::NamedCapture.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NamedCapture;
  // accessor rule_exp
  Rul$NamedCapture.v_rule_exp = null;
  Rul$NamedCapture.rule_exp = function () { return this.v_rule_exp; };
  // accessor capture_ident
  Rul$NamedCapture.v_capture_ident = null;
  Rul$NamedCapture.capture_ident = function () { return this.v_capture_ident; };
  // method emit_perl6
  Rul$NamedCapture.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string(String.fromCharCode(35) + ' TODO: named capture ') + string(v_self.v_capture_ident) + string(' ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string('')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NamedCapture.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$NamedCapture.set_captures_to_array = function () {
    var v_self = this;
        try {
            return(say(String.fromCharCode(35) + ' TODO: named capture '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NamedCapture.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Before
if (typeof Rul$Before !== 'object') {
  Rul$Before = function() {};
  Rul$Before = new Rul$Before;
  Rul$Before.isa = function (s) { return s == 'Rul::Before'; };
  Rul$Before.perl = function () { return 'Rul::Before.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Before;
  // accessor rule_exp
  Rul$Before.v_rule_exp = null;
  Rul$Before.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$Before.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito::Match.new' + String.fromCharCode(40) + ' ' + String.fromCharCode(39) + 'str' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(39) + 'from' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'to' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'bool' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' 1  ' + String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'tmp.bool ' + String.fromCharCode(61) + ' ' + String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Before.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Before.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Before.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NotBefore
if (typeof Rul$NotBefore !== 'object') {
  Rul$NotBefore = function() {};
  Rul$NotBefore = new Rul$NotBefore;
  Rul$NotBefore.isa = function (s) { return s == 'Rul::NotBefore'; };
  Rul$NotBefore.perl = function () { return 'Rul::NotBefore.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NotBefore;
  // accessor rule_exp
  Rul$NotBefore.v_rule_exp = null;
  Rul$NotBefore.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$NotBefore.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(40) + 'do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito::Match.new' + String.fromCharCode(40) + ' ' + String.fromCharCode(39) + 'str' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(39) + 'from' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'to' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'bool' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + String.fromCharCode(62) + ' 1  ' + String.fromCharCode(41) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'tmp.bool ' + String.fromCharCode(61) + ' ' + String.fromCharCode(33) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(41))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NotBefore.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$NotBefore.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NotBefore.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NegateCharClass
if (typeof Rul$NegateCharClass !== 'object') {
  Rul$NegateCharClass = function() {};
  Rul$NegateCharClass = new Rul$NegateCharClass;
  Rul$NegateCharClass.isa = function (s) { return s == 'Rul::NegateCharClass'; };
  Rul$NegateCharClass.perl = function () { return 'Rul::NegateCharClass.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NegateCharClass;
  // accessor chars
  Rul$NegateCharClass.v_chars = null;
  Rul$NegateCharClass.chars = function () { return this.v_chars; };
  // method emit_perl6
  Rul$NegateCharClass.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO NegateCharClass')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NegateCharClass.emit_perl6;  // v8 bug workaround
})()
;// class Rul::CharClass
if (typeof Rul$CharClass !== 'object') {
  Rul$CharClass = function() {};
  Rul$CharClass = new Rul$CharClass;
  Rul$CharClass.isa = function (s) { return s == 'Rul::CharClass'; };
  Rul$CharClass.perl = function () { return 'Rul::CharClass.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$CharClass;
  // accessor chars
  Rul$CharClass.v_chars = null;
  Rul$CharClass.chars = function () { return this.v_chars; };
  // method emit_perl6
  Rul$CharClass.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO CharClass')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$CharClass.emit_perl6;  // v8 bug workaround
})()
;// class Rul::Capture
if (typeof Rul$Capture !== 'object') {
  Rul$Capture = function() {};
  Rul$Capture = new Rul$Capture;
  Rul$Capture.isa = function (s) { return s == 'Rul::Capture'; };
  Rul$Capture.perl = function () { return 'Rul::Capture.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Capture;
  // accessor rule_exp
  Rul$Capture.v_rule_exp = null;
  Rul$Capture.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$Capture.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO RulCapture')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Capture.emit_perl6;  // v8 bug workaround
})()
;// class Rul::CaptureResult
if (typeof Rul$CaptureResult !== 'object') {
  Rul$CaptureResult = function() {};
  Rul$CaptureResult = new Rul$CaptureResult;
  Rul$CaptureResult.isa = function (s) { return s == 'Rul::CaptureResult'; };
  Rul$CaptureResult.perl = function () { return 'Rul::CaptureResult.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$CaptureResult;
  // accessor rule_exp
  Rul$CaptureResult.v_rule_exp = null;
  Rul$CaptureResult.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$CaptureResult.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO Rul::CaptureResult')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$CaptureResult.emit_perl6;  // v8 bug workaround
})()
;// class Rul::After
if (typeof Rul$After !== 'object') {
  Rul$After = function() {};
  Rul$After = new Rul$After;
  Rul$After.isa = function (s) { return s == 'Rul::After'; };
  Rul$After.perl = function () { return 'Rul::After.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$After;
  // accessor rule_exp
  Rul$After.v_rule_exp = null;
  Rul$After.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$After.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO Rul::After')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$After.emit_perl6;  // v8 bug workaround
})()
;    // use v6
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // accessor array1
  Lit$Array.v_array1 = null;
  Lit$Array.array1 = function () { return this.v_array1; };
  // method expand_interpolation
  Lit$Array.expand_interpolation = function () {
    var v_self = this;
        try {
            var v_needs_interpolation = null;

            var List_items = [];

            var List_s = [];

(v_needs_interpolation = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62)), function () { return (v_item.code() == 'list:' + String.fromCharCode(60) + ',' + String.fromCharCode(62)); })); })) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { List_items.push(v_arg);; })(a_[i_]) } })(((v_item.arguments())));;
                })(); }
                else { (function () {
List_items.push(v_item);;
                })(); };; })(a_[i_]) } })(v_self.v_array1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62)), function () { return (v_item.code() == 'infix:' + String.fromCharCode(60) + '..' + String.fromCharCode(62)); })); }); })) ) { (function () {
(v_needs_interpolation = 1);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_items);
            if ( bool(and(v_needs_interpolation, function () { return (elems(List_items) == 1); })) ) { (function () {
                throw(List_items[0]);;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62)), function () { return (v_item.code() == 'infix:' + String.fromCharCode(60) + '..' + String.fromCharCode(62)); })); }); })) ) { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
List_a.push(v_item);
    return(List_a);
})(),v_code: 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    push(List_s, (function () { var tmp = {v_body: (function () { var tmp = {v_sig: (function () { var tmp = {v_name: 'x',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: (function () { var tmp = {v_name: 'x',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_obj: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Index; return tmp; })());
    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'push'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_cond: (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_int: 0}; tmp.__proto__ = Val$Int; return tmp; })());
List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'elems'}; tmp.__proto__ = Call; return tmp; })());
List_a.push((function () { var tmp = {v_int: 1}; tmp.__proto__ = Val$Int; return tmp; })());
    return(List_a);
})(),v_code: 'infix:' + String.fromCharCode(60) + '-' + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'infix:' + String.fromCharCode(60) + '..' + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })(),v_topic: null}; tmp.__proto__ = For; return tmp; })());;
                })(); }
                else { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_item);
    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'push'}; tmp.__proto__ = Call; return tmp; })());;
                })(); };; })(a_[i_]) } })(List_items);
            throw((function () { var tmp = {v_block: (function () { var tmp = {v_sig: null,v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
(List_v = List_s);
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push((function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.expand_interpolation;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // accessor hash1
  Lit$Hash.v_hash1 = null;
  Lit$Hash.hash1 = function () { return this.v_hash1; };
  // method expand_interpolation
  Lit$Hash.expand_interpolation = function () {
    var v_self = this;
        try {
            var List_items = [];

            var List_s = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62)), function () { return (v_item.code() == 'list:' + String.fromCharCode(60) + ',' + String.fromCharCode(62)); })); })) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { List_items.push(v_arg);; })(a_[i_]) } })(((v_item.arguments())));;
                })(); }
                else { (function () {
List_items.push(v_item);;
                })(); };; })(a_[i_]) } })(v_self.v_hash1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (v_item.code() == 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62) + String.fromCharCode(62)); })) ) { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: v_item.arguments()[0],v_obj: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
List_a.push(v_item.arguments()[1]);
    return(List_a);
})(),v_code: 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());;
                })(); }
                else { (function () {
                    if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_item, 'Apply'), function () { return (v_item.code() == 'prefix:' + String.fromCharCode(60) + String.fromCharCode(37) + String.fromCharCode(62)); }); })) ) { (function () {
                        push(List_s, (function () { var tmp = {v_body: (function () { var tmp = {v_sig: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: (function () { var tmp = {v_arguments: null,v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'key'}; tmp.__proto__ = Call; return tmp; })(),v_obj: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'value'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})(),v_code: 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_cond: (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: null,v_hyper: '',v_invocant: v_item,v_method: 'pairs'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})(),v_code: 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'prefix:' + String.fromCharCode(60) + String.fromCharCode(64) + String.fromCharCode(62),v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })(),v_topic: null}; tmp.__proto__ = For; return tmp; })());;
                    })(); }
                    else { (function () {
                        die('Error in hash composer: ', perl(v_item));;
                    })(); };;
                })(); };; })(a_[i_]) } })(List_items);
            throw((function () { var tmp = {v_block: (function () { var tmp = {v_sig: null,v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
(List_v = List_s);
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push((function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.expand_interpolation;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  var Hash_op = {};
  // method op_assign
  Apply.op_assign = function () {
    var v_self = this;
        try {
            var v_code = null;

(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw(0);;
            })(); };
            if ( bool((Hash_op).hasOwnProperty(v_code)) ) { (function () {
                throw((function () { var tmp = {v_code: 'infix:' + String.fromCharCode(60) + String.fromCharCode(61) + String.fromCharCode(62),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[0]);
List_a.push((function () { var tmp = {v_code: (function () { if (Hash_op == null) { Hash_op = {} }; return (Hash_op[v_code] ); })(),v_arguments: v_self.v_arguments}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(0);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.op_assign;  // v8 bug workaround
(Hash_op = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + '+' + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + '+' + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + '-' + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + '-' + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + '*' + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + '*' + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(124) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(38) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'infix:' + String.fromCharCode(60) + String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(62)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(61) + String.fromCharCode(62)]  = 'list:' + String.fromCharCode(60) + String.fromCharCode(126) + String.fromCharCode(62)); })();
    return(Hash_a);
})());})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method simplify
  Do.simplify = function () {
    var v_self = this;
        try {
            var v_block = null;

            if ( bool(isa(v_self.v_block, 'Lit::Block')) ) { (function () {
(v_block = v_self.v_block.stmts());;
            })(); }
            else { (function () {
(v_block = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_block);
    return(List_a);
})());;
            })(); };
            if ( bool((elems(v_block) == 1)) ) { (function () {
                var v_stmt = null;

(v_stmt = v_block[0]);
                if ( bool(and(isa(v_stmt, 'Apply'), function () { return (v_stmt.code() == 'circumfix:' + String.fromCharCode(60) + String.fromCharCode(40) + ' ' + String.fromCharCode(41) + String.fromCharCode(62)); })) ) { (function () {
                    var v_args = null;

(v_args = v_stmt.arguments());
                    throw((function () { var tmp = {v_block: v_args[0]}; tmp.__proto__ = Do; return tmp; })().simplify());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_stmt, 'Do')) ) { (function () {
                    throw(v_stmt.simplify());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_block: v_block}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.simplify;  // v8 bug workaround
})()
;// class Perlito
if (typeof Perlito !== 'object') {
  Perlito = function() {};
  Perlito = new Perlito;
  Perlito.isa = function (s) { return s == 'Perlito'; };
  Perlito.perl = function () { return 'Perlito.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito;
  // sub compile_p6_to_js
  Perlito.compile_p6_to_js = function (v_s) {
        try {
            var v_ast = null;

(v_ast = Perlito$Grammar.exp_stmts(v_s, 0));
            return((function () { var tmp = {v_name: 'GLOBAL',v_body: scalar(v_ast)}; tmp.__proto__ = CompUnit; return tmp; })().emit_javascript());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito.compile_p6_to_js;  // v8 bug workaround
        // use Perlito::Javascript::Emitter
;        // use Perlito::Grammar
;        // use Perlito::Grammar::Control
;        // use Perlito::Grammar::Regex
;        // use Perlito::Emitter::Token
;        // use Perlito::Precedence
;        // use Perlito::Expression
;        // use Perlito::Macro
;})()
;})()
