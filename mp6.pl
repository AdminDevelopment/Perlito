package main;

use lib 'lib5';
use strict;

BEGIN {
    $::_V6_COMPILER_NAME    = 'MiniPerl6';
    $::_V6_COMPILER_VERSION = '2.0';
}

use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package Main;
use MiniPerl6::Grammar;
use MiniPerl6::Grammar::Regex;
use MiniPerl6::Emitter::Token;

my ( @switch_e, $source, $source_filename, $backend );
my $tmp_filename = 'tmp';
my $execute = 1;
my @args = @ARGV;
while (@args) {
    if ( $args[0] eq '-C' ) {
        if ( @args > 1 ) {
            $args[1] = $args[0] . $args[1];
            shift @args;
        }
    } 
    if ( $args[0] eq '-e' ) {
        my ($switch, $source) = (shift @args, shift @args);
        push @switch_e, $source;
        redo;
    }
    if ( $args[0] eq '-Cperl5' ) {
        my $switch = shift @args;
        $backend = 'perl5';
        $execute = 0;
        require MiniPerl6::Perl5::Emitter;
        redo;
    }
    if ( $args[0] eq '-Clisp' ) {
        my $switch = shift @args;
        $backend = 'lisp';
        $execute = 0;
        require MiniPerl6::Lisp::Emitter;
        redo;
    }
    if ( $args[0] eq '-Cjs' ) {
        my $switch = shift @args;
        $backend = 'js';
        $execute = 0;
        require MiniPerl6::Javascript::Emitter;
        redo;
    }
    if ( $args[0] eq '-Cgo' ) {
        die "not implemented";
        my $switch = shift @args;
        $backend = 'go';
        $execute = 0;
        require MiniPerl6::Go::Emitter;
        redo;
    }
    last;
}
if ( !$backend ) {
    die "please specify a target backend: -Cperl5, -Clisp, -Cjs, ...\n";
}
$source_filename = shift @args if @args;

if (@switch_e) {
    $source = join('; ', @switch_e);
}
elsif ($source_filename) {
    open FILE, $source_filename
      or die "Cannot read $source_filename\n";
    local $/ = undef;
    $source = <FILE>;
    close FILE;
}
else {
    local $/ = undef;
    $source = <STDIN>;
}

my $pos = 0;

if ( $backend eq 'lisp' ) {
    say( "# Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    while ( $pos < length( $source ) ) {
        my $p = MiniPerl6::Grammar->comp_unit($source, $pos);
        say( join( "", (map { $_->emit_lisp() } ($$p) )));
        $pos = $p->to;
    }
}
if ( $backend eq 'js' ) {
    say( "// Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    while ( $pos < length( $source ) ) {
        my $p = MiniPerl6::Grammar->comp_unit($source, $pos);
        say( join( "", (map { $_->emit_javascript() } ($$p) )));
        $pos = $p->to;
    }
}
if ( $backend eq 'perl5' ) {
    say( "# Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    say( "use v5;" );
    say( "use strict;" );
    say( "use MiniPerl6::Perl5::Runtime;" );
    say( "use MiniPerl6::Perl5::Match;" );
    while ( $pos < length( $source ) ) {
        my $p = MiniPerl6::Grammar->comp_unit($source, $pos);
        say( "{\n" . join( "", (map { $_->emit() } ($$p) )) . "}\n" );
        $pos = $p->to;
    }
}

