package main;

use FindBin '$Bin';
use lib ("$Bin/lib5");
use strict;

BEGIN {
    $::_V6_COMPILER_NAME    = 'MiniPerl6';
    $::_V6_COMPILER_VERSION = '2.0';
}

use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package Main;
use MiniPerl6::Grammar;
use MiniPerl6::Grammar::Regex;
use MiniPerl6::Emitter::Token;

my ( @switch_e, $source, $source_filename, $backend );
my @comp_unit;
my $tmp_filename = 'tmp';
my $execute = 1;
my @args = @ARGV;
while (@args) {
    if ( $args[0] eq '-C' ) {
        if ( @args > 1 ) {
            $args[1] = $args[0] . $args[1];
            shift @args;
        }
    } 
    if ( $args[0] eq '-e' ) {
        my ($switch, $source) = (shift @args, shift @args);
        push @switch_e, $source;
        redo;
    }
    if ( $args[0] eq '-Cperl5' ) {
        my $switch = shift @args;
        $backend = 'perl5';
        $execute = 0;
        require MiniPerl6::Perl5::Emitter;
        redo;
    }
    if ( $args[0] eq '-Clisp' ) {
        my $switch = shift @args;
        $backend = 'lisp';
        $execute = 0;
        require MiniPerl6::Lisp::Emitter;
        redo;
    }
    if ( $args[0] eq '-Cjs' ) {
        my $switch = shift @args;
        $backend = 'js';
        $execute = 0;
        require MiniPerl6::Javascript::Emitter;
        redo;
    }
    if ( $args[0] eq '-Cgo' ) {
        my $switch = shift @args;
        $backend = 'go';
        $execute = 0;
        require MiniPerl6::Go::Emitter;
        redo;
    }
    if ( $args[0] eq '-Cast-perl5' ) {
        my $switch = shift @args;
        $backend = 'ast-perl5';
        $execute = 0;
        require MiniPerl6::Perl5::Emitter;
        redo;
    }
    last;
}
if ( !$backend ) {
    $backend = 'perl5';
    $execute = 0;
    require MiniPerl6::Perl5::Emitter;
}
$source_filename = shift @args if @args;

if (@switch_e) {
    $source = join('; ', @switch_e);
}
elsif ($source_filename) {
    open FILE, $source_filename
      or die "Cannot read $source_filename\n";
    local $/ = undef;
    $source = <FILE>;
    close FILE;
}
else {
    local $/ = undef;
    $source = <STDIN>;
}

if ( $source_filename =~ /\.p5ast$/ ) {
    # source code was precompiled to AST, dumped as a perl5 structure
    @comp_unit = @{ eval $source };
}
else {
    # Kludge - make an implicit Main explicit.
    $source = "class Main { $source }" if $source !~ /class/;
    my $pos = 0;
    while ( $pos < length($source) ) {
        my $p = MiniPerl6::Grammar->comp_unit( $source, $pos );
        push @comp_unit, $$p;
        $pos = $p->to;
    }
}

if ( $backend eq 'lisp' ) {
    say( ";; Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    for my $p ( @comp_unit ) {
        say( $p->emit_lisp() );
    }
}
if ( $backend eq 'js' ) {
    say( "// Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    for my $p ( @comp_unit ) {
        say( $p->emit_javascript() );
    }
}
if ( $backend eq 'go' ) {
    say( "// Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );

    my $lib_source_filename = 'lib/MiniPerl6/Go/Runtime.go';
    say("// include file: $lib_source_filename");
    open FILE, $lib_source_filename
      or die "Cannot read $lib_source_filename\n";
    local $/ = undef;
    print <FILE>;
    close FILE;
    say("// end include file: $lib_source_filename");

    print CompUnit::emit_go_program( \@comp_unit );
}
if ( $backend eq 'perl5' ) {
    say( "# Do not edit this file - Generated by $::_V6_COMPILER_NAME $::_V6_COMPILER_VERSION" );
    say( "use v5;" );
    say( "use strict;" );
    say( "use MiniPerl6::Perl5::Runtime;" );
    say( "use MiniPerl6::Perl5::Match;" );
    for my $p ( @comp_unit ) {
        say( "{\n" . $p->emit() . "}\n" );
    }
    say( "1;" );
}
if ( $backend eq 'ast-perl5' ) {
    require Data::Dumper;
    local $Data::Dumper::Terse    = 1;
    local $Data::Dumper::Sortkeys = 1;
    local $Data::Dumper::Indent   = 1;
    say( Data::Dumper::Dumper( \@comp_unit ) );
}

