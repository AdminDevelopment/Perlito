// Do not edit this file - Generated by MiniPerl6 2.0
// class MiniPerl6::Match
if (typeof MiniPerl6$Match != 'object') {
  MiniPerl6$Match = function() {};
  MiniPerl6$Match = new MiniPerl6$Match;
  MiniPerl6$Match.f_isa = function (s) { return s == 'MiniPerl6::Match' };
  MiniPerl6$Match.f_perl = function () { return '::MiniPerl6::Match(' + Main._dump(this) + ')' };
}
(function () {
  // accessor from
  MiniPerl6$Match.v_from = null;
  MiniPerl6$Match.f_from = function () { return this.v_from }
  // accessor to
  MiniPerl6$Match.v_to = null;
  MiniPerl6$Match.f_to = function () { return this.v_to }
  // accessor str
  MiniPerl6$Match.v_str = null;
  MiniPerl6$Match.f_str = function () { return this.v_str }
  // accessor bool
  MiniPerl6$Match.v_bool = null;
  MiniPerl6$Match.f_bool = function () { return this.v_bool }
  // accessor capture
  MiniPerl6$Match.v_capture = null;
  MiniPerl6$Match.f_capture = function () { return this.v_capture }
  // method scalar
  MiniPerl6$Match.f_scalar = function () {
    var v_self = this;
    try { if ( f_bool(this.v_bool) ) { if ( f_bool((this.v_capture != null)) ) { throw(this.v_capture) } else {  };throw((this.v_str).substr(this.v_from, (this.v_to - this.v_from))) } else { throw("") } } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  MiniPerl6$Match.f_scalar;  // v8 bug workaround
  // method string
  MiniPerl6$Match.f_string = function () {
    var v_self = this;
    try { if ( f_bool(this.v_bool) ) { if ( f_bool((this.v_capture != null)) ) { throw(this.v_capture) } else {  };throw((this.v_str).substr(this.v_from, (this.v_to - this.v_from))) } else { throw("") } } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  MiniPerl6$Match.f_string;  // v8 bug workaround
})();

// class Pair
if (typeof Pair != 'object') {
  Pair = function() {};
  Pair = new Pair;
  Pair.f_isa = function (s) { return s == 'Pair' };
  Pair.f_perl = function () { return '::Pair(' + Main._dump(this) + ')' };
}
(function () {
  // accessor key
  Pair.v_key = null;
  Pair.f_key = function () { return this.v_key }
  // accessor value
  Pair.v_value = null;
  Pair.f_value = function () { return this.v_value }
  // method perl
  Pair.f_perl = function () {
    var v_self = this;
    try { throw(( f_string(this.v_key) + f_string(( f_string(" => ") + f_string(f_perl(this.v_value)) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Pair.f_perl;  // v8 bug workaround
})();

// class Main
if (typeof Main != 'object') {
  Main = function() {};
  Main = new Main;
  Main.f_isa = function (s) { return s == 'Main' };
  Main.f_perl = function () { return '::Main(' + Main._dump(this) + ')' };
}
(function () {
  // sub to_lisp_identifier
  Main.f_to_lisp_identifier = function (v_ident) {
    try { throw(( f_string("sv-") + f_string(v_ident) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub lisp_dump_object
  Main.f_lisp_dump_object = function (v_class_name, v_data) {
    try { throw(( f_string(v_class_name) + f_string(( f_string("( ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( f_perl(a_[i]) ) } return out; })(v_data).join(", ")) + f_string(" )") )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
})();

