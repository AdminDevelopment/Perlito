// Do not edit this file - Generated by MiniPerl6 2.0
// class CompUnit
if (typeof CompUnit != 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.f_isa = function (s) { return s == 'CompUnit' };
  CompUnit.f_perl = function () { return '::CompUnit(' + Main._dump(this) + ')' };
}
(function () {
  // accessor name
  CompUnit.v_name = null;
  CompUnit.f_name = function () { return this.v_name }
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.f_attributes = function () { return this.v_attributes }
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.f_methods = function () { return this.v_methods }
  // accessor body
  CompUnit.v_body = null;
  CompUnit.f_body = function () { return this.v_body }
  // method emit
  CompUnit.f_emit = function () {
    var v_self = this;
    try { return(( f_string("package ") + f_string(( f_string(this.v_name) + f_string(( f_string(";") + f_string(( f_string(Main.f_newline()) + f_string(( f_string("sub new { shift; bless { @_ }, \"") + f_string(( f_string(this.v_name) + f_string(( f_string("\" }") + f_string(( f_string(Main.f_newline()) + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_body).join(( f_string(";") + f_string(Main.f_newline()) ))) + f_string(( f_string(Main.f_newline()) + f_string(Main.f_newline()) )) )) )) )) )) )) )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  CompUnit.f_emit;  // v8 bug workaround
})();

// class Val::Int
if (typeof Val$Int != 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.f_isa = function (s) { return s == 'Val::Int' };
  Val$Int.f_perl = function () { return '::Val::Int(' + Main._dump(this) + ')' };
}
(function () {
  // accessor int
  Val$Int.v_int = null;
  Val$Int.f_int = function () { return this.v_int }
  // method emit
  Val$Int.f_emit = function () {
    var v_self = this;
    try { return(this.v_int) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Int.f_emit;  // v8 bug workaround
})();

// class Val::Bit
if (typeof Val$Bit != 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.f_isa = function (s) { return s == 'Val::Bit' };
  Val$Bit.f_perl = function () { return '::Val::Bit(' + Main._dump(this) + ')' };
}
(function () {
  // accessor bit
  Val$Bit.v_bit = null;
  Val$Bit.f_bit = function () { return this.v_bit }
  // method emit
  Val$Bit.f_emit = function () {
    var v_self = this;
    try { return(this.v_bit) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Bit.f_emit;  // v8 bug workaround
})();

// class Val::Num
if (typeof Val$Num != 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.f_isa = function (s) { return s == 'Val::Num' };
  Val$Num.f_perl = function () { return '::Val::Num(' + Main._dump(this) + ')' };
}
(function () {
  // accessor num
  Val$Num.v_num = null;
  Val$Num.f_num = function () { return this.v_num }
  // method emit
  Val$Num.f_emit = function () {
    var v_self = this;
    try { return(this.v_num) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Num.f_emit;  // v8 bug workaround
})();

// class Val::Buf
if (typeof Val$Buf != 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.f_isa = function (s) { return s == 'Val::Buf' };
  Val$Buf.f_perl = function () { return '::Val::Buf(' + Main._dump(this) + ')' };
}
(function () {
  // accessor buf
  Val$Buf.v_buf = null;
  Val$Buf.f_buf = function () { return this.v_buf }
  // method emit
  Val$Buf.f_emit = function () {
    var v_self = this;
    try { return(( f_string("'") + f_string(( f_string(Main.f_perl_escape_string(this.v_buf)) + f_string("'") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Buf.f_emit;  // v8 bug workaround
})();

// class Val::Undef
if (typeof Val$Undef != 'object') {
  Val$Undef = function() {};
  Val$Undef = new Val$Undef;
  Val$Undef.f_isa = function (s) { return s == 'Val::Undef' };
  Val$Undef.f_perl = function () { return '::Val::Undef(' + Main._dump(this) + ')' };
}
(function () {
  // method emit
  Val$Undef.f_emit = function () {
    var v_self = this;
    try { return("(undef)") } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Undef.f_emit;  // v8 bug workaround
})();

// class Val::Object
if (typeof Val$Object != 'object') {
  Val$Object = function() {};
  Val$Object = new Val$Object;
  Val$Object.f_isa = function (s) { return s == 'Val::Object' };
  Val$Object.f_perl = function () { return '::Val::Object(' + Main._dump(this) + ')' };
}
(function () {
  // accessor class
  Val$Object.v_class = null;
  Val$Object.f_class = function () { return this.v_class }
  // accessor fields
  Val$Object.v_fields = null;
  Val$Object.f_fields = function () { return this.v_fields }
  // method emit
  Val$Object.f_emit = function () {
    var v_self = this;
    try { return(( f_string("bless(") + f_string(( f_string(f_perl(this.v_fields)) + f_string(( f_string(", ") + f_string(( f_string(f_perl(this.v_class)) + f_string(")") )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Val$Object.f_emit;  // v8 bug workaround
})();

// class Lit::Seq
if (typeof Lit$Seq != 'object') {
  Lit$Seq = function() {};
  Lit$Seq = new Lit$Seq;
  Lit$Seq.f_isa = function (s) { return s == 'Lit::Seq' };
  Lit$Seq.f_perl = function () { return '::Lit::Seq(' + Main._dump(this) + ')' };
}
(function () {
  // accessor seq
  Lit$Seq.v_seq = null;
  Lit$Seq.f_seq = function () { return this.v_seq }
  // method emit
  Lit$Seq.f_emit = function () {
    var v_self = this;
    try { return(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_seq).join(", ")) + f_string(")") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Lit$Seq.f_emit;  // v8 bug workaround
})();

// class Lit::Array
if (typeof Lit$Array != 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.f_isa = function (s) { return s == 'Lit::Array' };
  Lit$Array.f_perl = function () { return '::Lit::Array(' + Main._dump(this) + ')' };
}
(function () {
  // accessor array1
  Lit$Array.v_array1 = null;
  Lit$Array.f_array1 = function () { return this.v_array1 }
  // method emit
  Lit$Array.f_emit = function () {
    var v_self = this;
    try { return(( f_string("[") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_array1).join(", ")) + f_string("]") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Lit$Array.f_emit;  // v8 bug workaround
})();

// class Lit::Hash
if (typeof Lit$Hash != 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.f_isa = function (s) { return s == 'Lit::Hash' };
  Lit$Hash.f_perl = function () { return '::Lit::Hash(' + Main._dump(this) + ')' };
}
(function () {
  // accessor hash1
  Lit$Hash.v_hash1 = null;
  Lit$Hash.f_hash1 = function () { return this.v_hash1 }
  // method emit
  Lit$Hash.f_emit = function () {
    var v_self = this;
    try { var v_fields;var v_str;(v_fields = this.v_hash1);(v_str = "");(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = ( f_string(v_str) + f_string(( f_string(v_field[0].f_emit()) + f_string(( f_string(" => ") + f_string(( f_string(v_field[1].f_emit()) + f_string(",") )) )) )) )) })(a_[i_]) } })((v_fields));return(( f_string("{ ") + f_string(( f_string(v_str) + f_string(" }") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Lit$Hash.f_emit;  // v8 bug workaround
})();

// class Lit::Code
if (typeof Lit$Code != 'object') {
  Lit$Code = function() {};
  Lit$Code = new Lit$Code;
  Lit$Code.f_isa = function (s) { return s == 'Lit::Code' };
  Lit$Code.f_perl = function () { return '::Lit::Code(' + Main._dump(this) + ')' };
}
(function () {
})();

// class Lit::Object
if (typeof Lit$Object != 'object') {
  Lit$Object = function() {};
  Lit$Object = new Lit$Object;
  Lit$Object.f_isa = function (s) { return s == 'Lit::Object' };
  Lit$Object.f_perl = function () { return '::Lit::Object(' + Main._dump(this) + ')' };
}
(function () {
  // accessor class
  Lit$Object.v_class = null;
  Lit$Object.f_class = function () { return this.v_class }
  // accessor fields
  Lit$Object.v_fields = null;
  Lit$Object.f_fields = function () { return this.v_fields }
  // method emit
  Lit$Object.f_emit = function () {
    var v_self = this;
    try { var v_fields;var v_str;(v_fields = this.v_fields);(v_str = "");(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = ( f_string(v_str) + f_string(( f_string(v_field[0].f_emit()) + f_string(( f_string(" => ") + f_string(( f_string(v_field[1].f_emit()) + f_string(",") )) )) )) )) })(a_[i_]) } })((v_fields));return(( f_string(this.v_class) + f_string(( f_string("->new( ") + f_string(( f_string(v_str) + f_string(" )") )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Lit$Object.f_emit;  // v8 bug workaround
})();

// class Index
if (typeof Index != 'object') {
  Index = function() {};
  Index = new Index;
  Index.f_isa = function (s) { return s == 'Index' };
  Index.f_perl = function () { return '::Index(' + Main._dump(this) + ')' };
}
(function () {
  // accessor obj
  Index.v_obj = null;
  Index.f_obj = function () { return this.v_obj }
  // accessor index_exp
  Index.v_index_exp = null;
  Index.f_index_exp = function () { return this.v_index_exp }
  // method emit
  Index.f_emit = function () {
    var v_self = this;
    try { return(( f_string(this.v_obj.f_emit()) + f_string(( f_string("->[") + f_string(( f_string(this.v_index_exp.f_emit()) + f_string("]") )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Index.f_emit;  // v8 bug workaround
})();

// class Lookup
if (typeof Lookup != 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.f_isa = function (s) { return s == 'Lookup' };
  Lookup.f_perl = function () { return '::Lookup(' + Main._dump(this) + ')' };
}
(function () {
  // accessor obj
  Lookup.v_obj = null;
  Lookup.f_obj = function () { return this.v_obj }
  // accessor index_exp
  Lookup.v_index_exp = null;
  Lookup.f_index_exp = function () { return this.v_index_exp }
  // method emit
  Lookup.f_emit = function () {
    var v_self = this;
    try { return(( f_string(this.v_obj.f_emit()) + f_string(( f_string("->{") + f_string(( f_string(this.v_index_exp.f_emit()) + f_string("}") )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Lookup.f_emit;  // v8 bug workaround
})();

// class Var
if (typeof Var != 'object') {
  Var = function() {};
  Var = new Var;
  Var.f_isa = function (s) { return s == 'Var' };
  Var.f_perl = function () { return '::Var(' + Main._dump(this) + ')' };
}
(function () {
  // accessor sigil
  Var.v_sigil = null;
  Var.f_sigil = function () { return this.v_sigil }
  // accessor twigil
  Var.v_twigil = null;
  Var.f_twigil = function () { return this.v_twigil }
  // accessor namespace
  Var.v_namespace = null;
  Var.f_namespace = function () { return this.v_namespace }
  // accessor name
  Var.v_name = null;
  Var.f_name = function () { return this.v_name }
  // method emit
  Var.f_emit = function () {
    var v_self = this;
    try { var v_table;var v_ns;(v_table = { "$":"$","@":"$List_","%":"$Hash_","&":"$Code_", });(v_ns = "");if ( f_bool(this.v_namespace) ) { (v_ns = ( f_string(this.v_namespace) + f_string("::") )) } else {  };return(( f_bool((this.v_twigil == ".")) ? ( f_string("$self->{") + f_string(( f_string(this.v_name) + f_string("}") )) ) : ( f_bool((this.v_name == "/")) ? ( f_string(v_table[this.v_sigil]) + f_string("MATCH") ) : ( f_string(v_table[this.v_sigil]) + f_string(( f_string(v_ns) + f_string(this.v_name) )) )))) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Var.f_emit;  // v8 bug workaround
  // method plain_name
  Var.f_plain_name = function () {
    var v_self = this;
    try { if ( f_bool(this.v_namespace) ) { throw(( f_string(this.v_namespace) + f_string(( f_string("::") + f_string(this.v_name) )) )) } else {  };throw(this.v_name) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Var.f_plain_name;  // v8 bug workaround
})();

// class Bind
if (typeof Bind != 'object') {
  Bind = function() {};
  Bind = new Bind;
  Bind.f_isa = function (s) { return s == 'Bind' };
  Bind.f_perl = function () { return '::Bind(' + Main._dump(this) + ')' };
}
(function () {
  // accessor parameters
  Bind.v_parameters = null;
  Bind.f_parameters = function () { return this.v_parameters }
  // accessor arguments
  Bind.v_arguments = null;
  Bind.f_arguments = function () { return this.v_arguments }
  // method emit
  Bind.f_emit = function () {
    var v_self = this;
    try { if ( f_bool(f_isa(this.v_parameters, "Lit::Array")) ) { (v_a = this.v_parameters.f_array1());(v_str = "do { ");(v_i = 0);(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_bind = { __proto__:Bind, v_parameters: v_var,v_arguments: { __proto__:Index, v_obj: this.v_arguments,v_index_exp: { __proto__:Val$Int, v_int: v_i,},},});(v_str = ( f_string(v_str) + f_string(( f_string(" ") + f_string(( f_string(v_bind.f_emit()) + f_string("; ") )) )) ));(v_i = (v_i + 1)) })(a_[i_]) } })((v_a));throw(( f_string(v_str) + f_string(( f_string(this.v_parameters.f_emit()) + f_string(" }") )) )) } else {  };if ( f_bool(f_isa(this.v_parameters, "Lit::Hash")) ) { (v_a = this.v_parameters.f_hash1());(v_b = this.v_arguments.f_hash1());(v_str = "do { ");(v_i = 0);v_arg;(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_arg = { __proto__:Val$Undef, });(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var2) { if ( f_bool((v_var2[0].f_buf() == v_var[0].f_buf())) ) { (v_arg = v_var2[1]) } else {  } })(a_[i_]) } })((v_b));(v_bind = { __proto__:Bind, v_parameters: v_var[1],v_arguments: v_arg,});(v_str = ( f_string(v_str) + f_string(( f_string(" ") + f_string(( f_string(v_bind.f_emit()) + f_string("; ") )) )) ));(v_i = (v_i + 1)) })(a_[i_]) } })((v_a));throw(( f_string(v_str) + f_string(( f_string(this.v_parameters.f_emit()) + f_string(" }") )) )) } else {  };if ( f_bool(f_isa(this.v_parameters, "Lit::Object")) ) { (v_class = this.v_parameters.f_class());(v_a = this.v_parameters.f_fields());(v_b = this.v_arguments);(v_str = "do { ");(v_i = 0);v_arg;(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_var) { (v_bind = { __proto__:Bind, v_parameters: v_var[1],v_arguments: { __proto__:Call, v_invocant: v_b,v_method: v_var[0].f_buf(),v_arguments: [],v_hyper: 0,},});(v_str = ( f_string(v_str) + f_string(( f_string(" ") + f_string(( f_string(v_bind.f_emit()) + f_string("; ") )) )) ));(v_i = (v_i + 1)) })(a_[i_]) } })((v_a));throw(( f_string(v_str) + f_string(( f_string(this.v_parameters.f_emit()) + f_string(" }") )) )) } else {  };return(( f_string("(") + f_string(( f_string(this.v_parameters.f_emit()) + f_string(( f_string(" = ") + f_string(( f_string(this.v_arguments.f_emit()) + f_string(")") )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Bind.f_emit;  // v8 bug workaround
})();

// class Proto
if (typeof Proto != 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.f_isa = function (s) { return s == 'Proto' };
  Proto.f_perl = function () { return '::Proto(' + Main._dump(this) + ')' };
}
(function () {
  // accessor name
  Proto.v_name = null;
  Proto.f_name = function () { return this.v_name }
  // method emit
  Proto.f_emit = function () {
    var v_self = this;
    try { return((this.v_name).f_string()) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Proto.f_emit;  // v8 bug workaround
})();

// class Call
if (typeof Call != 'object') {
  Call = function() {};
  Call = new Call;
  Call.f_isa = function (s) { return s == 'Call' };
  Call.f_perl = function () { return '::Call(' + Main._dump(this) + ')' };
}
(function () {
  // accessor invocant
  Call.v_invocant = null;
  Call.f_invocant = function () { return this.v_invocant }
  // accessor hyper
  Call.v_hyper = null;
  Call.f_hyper = function () { return this.v_hyper }
  // accessor method
  Call.v_method = null;
  Call.f_method = function () { return this.v_method }
  // accessor arguments
  Call.v_arguments = null;
  Call.f_arguments = function () { return this.v_arguments }
  // method emit
  Call.f_emit = function () {
    var v_self = this;
    try { var v_invocant;var v_meth;var v_call;(v_invocant = this.v_invocant.f_emit());if ( f_bool((v_invocant == "self")) ) { (v_invocant = "$self") } else {  };if ( f_bool((this.v_method == "values")) ) { if ( f_bool(this.v_hyper) ) { f_die("not implemented") } else { throw(( f_string("values( %{") + f_string(( f_string(v_invocant) + f_string("} )") )) )) } } else {  };if ( f_bool(( f_bool((this.v_method == "perl")) || f_bool(( f_bool((this.v_method == "yaml")) || f_bool(( f_bool((this.v_method == "say")) || f_bool(( f_bool((this.v_method == "join")) || f_bool(( f_bool((this.v_method == "chars")) || f_bool((this.v_method == "isa")) )) )) )) )) )) ) { if ( f_bool(this.v_hyper) ) { throw(( f_string("[ map { Main::") + f_string(( f_string(this.v_method) + f_string(( f_string("( $_, ") + f_string(( f_string(", ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(( f_string(")") + f_string(( f_string(" } @{ ") + f_string(( f_string(v_invocant) + f_string(" } ]") )) )) )) )) )) )) )) )) } else { throw(( f_string("Main::") + f_string(( f_string(this.v_method) + f_string(( f_string("(") + f_string(( f_string(v_invocant) + f_string(( f_string(", ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) )) )) )) )) } } else {  };(v_meth = this.v_method);if ( f_bool((v_meth == "postcircumfix:<( )>")) ) { (v_meth = "") } else {  };(v_call = ( f_string("->") + f_string(( f_string(v_meth) + f_string(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) )) ));if ( f_bool(this.v_hyper) ) { return(( f_string("[ map { $_") + f_string(( f_string(v_call) + f_string(( f_string(" } @{ ") + f_string(( f_string(v_invocant) + f_string(" } ]") )) )) )) )) } else { return(( f_string(v_invocant) + f_string(v_call) )) } } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Call.f_emit;  // v8 bug workaround
})();

// class Apply
if (typeof Apply != 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.f_isa = function (s) { return s == 'Apply' };
  Apply.f_perl = function () { return '::Apply(' + Main._dump(this) + ')' };
}
(function () {
  // accessor code
  Apply.v_code = null;
  Apply.f_code = function () { return this.v_code }
  // accessor arguments
  Apply.v_arguments = null;
  Apply.f_arguments = function () { return this.v_arguments }
  // accessor namespace
  Apply.v_namespace = null;
  Apply.f_namespace = function () { return this.v_namespace }
  // method emit
  Apply.f_emit = function () {
    var v_self = this;
    try { var v_ns;var v_code;(v_ns = "");if ( f_bool(this.v_namespace) ) { (v_ns = ( f_string(this.v_namespace) + f_string("::") )) } else {  };(v_code = ( f_string(v_ns) + f_string(this.v_code) ));if ( f_bool(f_isa(v_code, "Str")) ) {  } else { throw(( f_string("(") + f_string(( f_string(this.v_code.f_emit()) + f_string(( f_string(")->(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) )) )) };if ( f_bool((v_code == "self")) ) { throw("$self") } else {  };if ( f_bool((v_code == "false")) ) { throw("0") } else {  };if ( f_bool((v_code == "make")) ) { throw(( f_string("($MATCH->capture = (") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string("))") )) )) } else {  };if ( f_bool((v_code == "say")) ) { throw(( f_string("Main::say(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "print")) ) { throw(( f_string("Main::print(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "warn")) ) { throw(( f_string("warn(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "array")) ) { throw(( f_string("@{") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string("}") )) )) } else {  };if ( f_bool((v_code == "pop")) ) { throw(( f_string("pop( @{") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string("} )") )) )) } else {  };if ( f_bool((v_code == "push")) ) { throw(( f_string("push( @{") + f_string(( f_string(this.v_arguments[0].f_emit()) + f_string(( f_string("}, ") + f_string(( f_string(this.v_arguments[1].f_emit()) + f_string(" )") )) )) )) )) } else {  };if ( f_bool((v_code == "prefix:<~>")) ) { throw(( f_string("(\"\" . ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "prefix:<!>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string(" ? 0 : 1)") )) )) } else {  };if ( f_bool((v_code == "prefix:<?>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string(" ? 1 : 0)") )) )) } else {  };if ( f_bool((v_code == "prefix:<$>")) ) { throw(( f_string("${") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string("}") )) )) } else {  };if ( f_bool((v_code == "prefix:<@>")) ) { throw(( f_string("@{") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string("}") )) )) } else {  };if ( f_bool((v_code == "prefix:<%>")) ) { throw(( f_string("%{") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ")) + f_string("}") )) )) } else {  };if ( f_bool((v_code == "infix:<~>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" . ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<+>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" + ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<->")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" - ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<>>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" > ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<x>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" x ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<&&>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" && ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<||>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" || ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<eq>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" eq ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<ne>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" ne ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<==>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" == ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "infix:<!=>")) ) { throw(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(" != ")) + f_string(")") )) )) } else {  };if ( f_bool((v_code == "ternary:<?? !!>")) ) { throw(( f_string("(") + f_string(( f_string(this.v_arguments[0].f_emit()) + f_string(( f_string(" ? ") + f_string(( f_string(this.v_arguments[1].f_emit()) + f_string(( f_string(" : ") + f_string(( f_string(this.v_arguments[2].f_emit()) + f_string(")") )) )) )) )) )) )) } else {  };return(( f_string(v_code) + f_string(( f_string("(") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_arguments).join(", ")) + f_string(")") )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Apply.f_emit;  // v8 bug workaround
})();

// class Return
if (typeof Return != 'object') {
  Return = function() {};
  Return = new Return;
  Return.f_isa = function (s) { return s == 'Return' };
  Return.f_perl = function () { return '::Return(' + Main._dump(this) + ')' };
}
(function () {
  // accessor result
  Return.v_result = null;
  Return.f_result = function () { return this.v_result }
  // method emit
  Return.f_emit = function () {
    var v_self = this;
    try { throw(( f_string("return(") + f_string(( f_string(this.v_result.f_emit()) + f_string(")") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Return.f_emit;  // v8 bug workaround
})();

// class If
if (typeof If != 'object') {
  If = function() {};
  If = new If;
  If.f_isa = function (s) { return s == 'If' };
  If.f_perl = function () { return '::If(' + Main._dump(this) + ')' };
}
(function () {
  // accessor cond
  If.v_cond = null;
  If.f_cond = function () { return this.v_cond }
  // accessor body
  If.v_body = null;
  If.f_body = function () { return this.v_body }
  // accessor otherwise
  If.v_otherwise = null;
  If.f_otherwise = function () { return this.v_otherwise }
  // method emit
  If.f_emit = function () {
    var v_self = this;
    try { var v_cond;(v_cond = this.v_cond);if ( f_bool(( f_bool(f_isa(v_cond, "Apply")) && f_bool((v_cond.f_code() == "prefix:<!>")) )) ) { (v_if = { __proto__:If, v_cond: v_cond.f_arguments()[0],v_body: this.v_otherwise,v_otherwise: this.v_body,});throw(v_if.f_emit()) } else {  };if ( f_bool(( f_bool(f_isa(v_cond, "Var")) && f_bool((v_cond.f_sigil() == "@")) )) ) { (v_cond = { __proto__:Apply, v_code: "prefix:<@>",v_arguments: [v_cond],}) } else {  };return(( f_string("do { if (") + f_string(( f_string(v_cond.f_emit()) + f_string(( f_string(") { ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_body).join(";")) + f_string(( f_string(" } else { ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_otherwise).join(";")) + f_string(" } }") )) )) )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  If.f_emit;  // v8 bug workaround
})();

// class For
if (typeof For != 'object') {
  For = function() {};
  For = new For;
  For.f_isa = function (s) { return s == 'For' };
  For.f_perl = function () { return '::For(' + Main._dump(this) + ')' };
}
(function () {
  // accessor cond
  For.v_cond = null;
  For.f_cond = function () { return this.v_cond }
  // accessor body
  For.v_body = null;
  For.f_body = function () { return this.v_body }
  // accessor topic
  For.v_topic = null;
  For.f_topic = function () { return this.v_topic }
  // method emit
  For.f_emit = function () {
    var v_self = this;
    try { var v_cond;(v_cond = this.v_cond);if ( f_bool(( f_bool(f_isa(v_cond, "Var")) && f_bool((v_cond.f_sigil() == "@")) )) ) { (v_cond = { __proto__:Apply, v_code: "prefix:<@>",v_arguments: [v_cond],}) } else {  };return(( f_string("do { for my ") + f_string(( f_string(this.v_topic.f_emit()) + f_string(( f_string(" ( ") + f_string(( f_string(v_cond.f_emit()) + f_string(( f_string(" ) { ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_body).join(";")) + f_string(" } }") )) )) )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  For.f_emit;  // v8 bug workaround
})();

// class Decl
if (typeof Decl != 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.f_isa = function (s) { return s == 'Decl' };
  Decl.f_perl = function () { return '::Decl(' + Main._dump(this) + ')' };
}
(function () {
  // accessor decl
  Decl.v_decl = null;
  Decl.f_decl = function () { return this.v_decl }
  // accessor type
  Decl.v_type = null;
  Decl.f_type = function () { return this.v_type }
  // accessor var
  Decl.v_var = null;
  Decl.f_var = function () { return this.v_var }
  // method emit
  Decl.f_emit = function () {
    var v_self = this;
    try { var v_decl;var v_name;(v_decl = this.v_decl);(v_name = this.v_var.f_plain_name());return(( f_bool((v_decl == "has")) ? ( f_string("sub ") + f_string(( f_string(v_name) + f_string(( f_string(" { ") + f_string(( f_string("@_ == 1 ") + f_string(( f_string("? ( $_[0]->{") + f_string(( f_string(v_name) + f_string(( f_string("} ) ") + f_string(( f_string(": ( $_[0]->{") + f_string(( f_string(v_name) + f_string(( f_string("} = $_[1] ) ") + f_string("}") )) )) )) )) )) )) )) )) )) ) : ( f_string(this.v_decl) + f_string(( f_string(" ") + f_string(( f_string(this.v_type) + f_string(( f_string(" ") + f_string(this.v_var.f_emit()) )) )) )) ))) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Decl.f_emit;  // v8 bug workaround
})();

// class Sig
if (typeof Sig != 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.f_isa = function (s) { return s == 'Sig' };
  Sig.f_perl = function () { return '::Sig(' + Main._dump(this) + ')' };
}
(function () {
  // accessor invocant
  Sig.v_invocant = null;
  Sig.f_invocant = function () { return this.v_invocant }
  // accessor positional
  Sig.v_positional = null;
  Sig.f_positional = function () { return this.v_positional }
  // accessor named
  Sig.v_named = null;
  Sig.f_named = function () { return this.v_named }
  // method emit
  Sig.f_emit = function () {
    var v_self = this;
    try { return(" print 'Signature - TODO'; die 'Signature - TODO'; ") } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Sig.f_emit;  // v8 bug workaround
})();

// class Method
if (typeof Method != 'object') {
  Method = function() {};
  Method = new Method;
  Method.f_isa = function (s) { return s == 'Method' };
  Method.f_perl = function () { return '::Method(' + Main._dump(this) + ')' };
}
(function () {
  // accessor name
  Method.v_name = null;
  Method.f_name = function () { return this.v_name }
  // accessor sig
  Method.v_sig = null;
  Method.f_sig = function () { return this.v_sig }
  // accessor block
  Method.v_block = null;
  Method.f_block = function () { return this.v_block }
  // method emit
  Method.f_emit = function () {
    var v_self = this;
    try { var v_sig;var v_invocant;var v_pos;var v_str;var v_bind;(v_sig = this.v_sig);(v_invocant = v_sig.f_invocant());(v_pos = v_sig.f_positional());(v_str = "my $List__ = \\@_; ");(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { if ( f_bool(f_isa(v_field, "Lit::Array")) ) { (v_str = ( f_string(v_str) + f_string(( f_string("my (") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(v_field.f_array1()).join(", ")) + f_string("); ") )) )) )) } else { (v_str = ( f_string(v_str) + f_string(( f_string("my ") + f_string(( f_string(v_field.f_emit()) + f_string("; ") )) )) )) } })(a_[i_]) } })((v_pos));(v_bind = { __proto__:Bind, v_parameters: { __proto__:Lit$Array, v_array1: v_sig.f_positional(),},v_arguments: { __proto__:Var, v_sigil: "@",v_twigil: "",v_name: "_",},});(v_str = ( f_string(v_str) + f_string(( f_string(v_bind.f_emit()) + f_string("; ") )) ));return(( f_string("sub ") + f_string(( f_string(this.v_name) + f_string(( f_string(" { ") + f_string(( f_string("my ") + f_string(( f_string(v_invocant.f_emit()) + f_string(( f_string(" = shift; ") + f_string(( f_string(v_str) + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_block).join("; ")) + f_string(" }") )) )) )) )) )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Method.f_emit;  // v8 bug workaround
})();

// class Sub
if (typeof Sub != 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.f_isa = function (s) { return s == 'Sub' };
  Sub.f_perl = function () { return '::Sub(' + Main._dump(this) + ')' };
}
(function () {
  // accessor name
  Sub.v_name = null;
  Sub.f_name = function () { return this.v_name }
  // accessor sig
  Sub.v_sig = null;
  Sub.f_sig = function () { return this.v_sig }
  // accessor block
  Sub.v_block = null;
  Sub.f_block = function () { return this.v_block }
  // method emit
  Sub.f_emit = function () {
    var v_self = this;
    try { var v_sig;var v_pos;var v_str;var v_bind;(v_sig = this.v_sig);(v_pos = v_sig.f_positional());(v_str = "my $List__ = \\@_; ");(function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { if ( f_bool(f_isa(v_field, "Lit::Array")) ) { (v_str = ( f_string(v_str) + f_string(( f_string("my (") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(v_field.f_array1()).join(", ")) + f_string("); ") )) )) )) } else { (v_str = ( f_string(v_str) + f_string(( f_string("my ") + f_string(( f_string(v_field.f_emit()) + f_string("; ") )) )) )) } })(a_[i_]) } })((v_pos));(v_bind = { __proto__:Bind, v_parameters: { __proto__:Lit$Array, v_array1: v_sig.f_positional(),},v_arguments: { __proto__:Var, v_sigil: "@",v_twigil: "",v_name: "_",},});(v_str = ( f_string(v_str) + f_string(( f_string(v_bind.f_emit()) + f_string("; ") )) ));return(( f_string("sub ") + f_string(( f_string(this.v_name) + f_string(( f_string(" { ") + f_string(( f_string(v_str) + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_block).join("; ")) + f_string(" }") )) )) )) )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Sub.f_emit;  // v8 bug workaround
})();

// class Do
if (typeof Do != 'object') {
  Do = function() {};
  Do = new Do;
  Do.f_isa = function (s) { return s == 'Do' };
  Do.f_perl = function () { return '::Do(' + Main._dump(this) + ')' };
}
(function () {
  // accessor block
  Do.v_block = null;
  Do.f_block = function () { return this.v_block }
  // method emit
  Do.f_emit = function () {
    var v_self = this;
    try { return(( f_string("do { ") + f_string(( f_string((function (a_) { var out = []; if ( typeof a_ == 'undefined' ) { return out }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].f_emit() ) } return out; })(this.v_block).join("; ")) + f_string(" }") )) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Do.f_emit;  // v8 bug workaround
})();

// class Use
if (typeof Use != 'object') {
  Use = function() {};
  Use = new Use;
  Use.f_isa = function (s) { return s == 'Use' };
  Use.f_perl = function () { return '::Use(' + Main._dump(this) + ')' };
}
(function () {
  // accessor mod
  Use.v_mod = null;
  Use.f_mod = function () { return this.v_mod }
  // method emit
  Use.f_emit = function () {
    var v_self = this;
    try { return(( f_string("use ") + f_string(this.v_mod) )) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  Use.f_emit;  // v8 bug workaround
})();

