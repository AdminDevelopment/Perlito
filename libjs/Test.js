// Do not edit this file - Generated by MiniPerl6 3.0
// class Test
if (typeof Test != 'object') {
  Test = function() {};
  Test = new Test;
  Test.f_isa = function (s) { return s == 'Test' };
  Test.f_perl = function () { return '::Test(' + Main._dump(this) + ')' };
}
(function () {
  var v__NAMESPACE = Test;
var v_num_of_tests_run = null;
var v_num_of_tests_failed = null;
var v_num_of_tests_badpass = null;
var v_num_of_tests_planned = null;
var v_testing_started = null;
  // sub plan
  Test.f_plan = function (v_number_of_tests) {
    try { (v_testing_started = 1);(v_num_of_tests_planned = v_number_of_tests);return(say(( f_string("1..") + f_string(v_number_of_tests) ))) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub ok
  Test.f_ok = function (v_cond, v_desc, v_todo, v_depends) {
    try { return(Test.f_proclaim(v_cond, ( f_string("ok! ") + f_string(v_desc) ), v_todo, v_depends)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub is
  Test.f_is = function (v_got, v_expected, v_desc, v_todo, v_depends) {
    try { var v_test;(v_test = (v_got == v_expected));return(Test.f_proclaim(v_test, ( f_string("is! ") + f_string(v_desc) ), v_todo, v_got, v_expected, v_depends)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub is_deeply
  Test.f_is_deeply = function (v_got, v_expected, v_desc, v_todo, v_depends) {
    try { var v_got_perl;var v_expected_perl;var v_test;(v_got_perl = f_perl(v_got));(v_expected_perl = f_perl(v_expected));(v_test = (v_got_perl == v_expected_perl));return(Test.f_proclaim(v_test, ( f_string("is deeply! ") + f_string(v_desc) ), v_todo, v_got_perl, v_expected_perl, v_depends)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub isnt
  Test.f_isnt = function (v_got, v_expected, v_desc, v_todo, v_depends) {
    try { var v_test;(v_test = ( f_bool((v_got == v_expected)) ? false : true));return(Test.f_proclaim(v_test, ( f_string("isnt! ") + f_string(v_desc) ), v_todo, v_got, v_expected, v_depends, { "negate":1, })) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub cmp_ok
  Test.f_cmp_ok = function (v_got, Code_compare_func, v_expected, v_desc, v_todo, v_depends) {
    try { return(say("### Test::cmp_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub like
  Test.f_like = function () {
    try { return(say("### Test::like not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub unlike
  Test.f_unlike = function () {
    try { return(say("### Test::unlike not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub eval_dies_ok
  Test.f_eval_dies_ok = function () {
    try { return(say("### Test::eval_dies_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub isa_ok
  Test.f_isa_ok = function () {
    try { return(say("### Test::isa_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub use_ok
  Test.f_use_ok = function () {
    try { return(say("### Test::use_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub throws_ok
  Test.f_throws_ok = function () {
    try { return(say("### Test::throws_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub dies_ok
  Test.f_dies_ok = function () {
    try { return(say("### Test::dies_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub lives_ok
  Test.f_lives_ok = function () {
    try { return(say("### Test::lives_ok not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub skip
  Test.f_skip = function (v_reason, v_depends) {
    try { return(Test.f_proclaim(1, "", ( f_string("skip ") + f_string(v_reason) ), v_depends)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub pass
  Test.f_pass = function (v_desc) {
    try { return(Test.f_proclaim(1, ( f_string("pass! ") + f_string(v_desc) ))) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub flunk
  Test.f_flunk = function (v_desc, v_todo, v_depends) {
    try { return(Test.f_proclaim(0, ( f_string("flunk! ") + f_string(v_desc) ), v_todo, v_depends)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub proclaim
  Test.f_proclaim = function (v_cond, v_desc, v_todo, v_got, v_expected, v_depends, v_negate) {
    try { (v_testing_started = 1);(v_num_of_tests_run = (v_num_of_tests_run + 1));if ( f_bool(v_cond) ) { say("ok " + v_num_of_tests_run) } else { say("not ok " + v_num_of_tests_run);Test.f_report_failure(v_todo, v_got, v_expected, v_negate) };throw(v_cond) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub report_failure
  Test.f_report_failure = function (v_todo, v_got, v_expected, v_negate) {
    try { return(say("### Test::report_failure not implemented")) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
  // sub test_ends
  Test.f_test_ends = function () {
    try { if ( f_bool(v_testing_started) ) {  } else { throw(null) };if ( f_bool(v_num_of_tests_planned) ) {  } else { say(( f_string("1..") + f_string(v_num_of_tests_run) )) };if ( f_bool((v_num_of_tests_planned != v_num_of_tests_run)) ) { say(( f_string("# Looks like you planned ") + f_string(( f_string(v_num_of_tests_planned) + f_string(( f_string(" tests, but ran ") + f_string(v_num_of_tests_run) )) )) )) } else {  };if ( f_bool(v_num_of_tests_failed) ) { say(( f_string("# Looks like you failed ") + f_string(( f_string(v_num_of_tests_failed) + f_string(( f_string(" tests of ") + f_string(v_num_of_tests_run) )) )) )) } else {  };(v_num_of_tests_run = 0);(v_num_of_tests_failed = 0);(v_num_of_tests_planned = 0);return((v_testing_started = 0)) } catch(err) { if ( err instanceof Error ) { throw(err) } else { return(err) } } 
  }
})();

