package main;
use lib 'lib5';
use strict;

BEGIN {
    $::_V6_COMPILER_NAME    = 'MiniPerl6';
    $::_V6_COMPILER_VERSION = '2.0';
}

use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package Main;
use MiniPerl6::Grammar;
use MiniPerl6::Go::Emitter;
use MiniPerl6::Grammar::Regex;
use MiniPerl6::Emitter::Token;

my @lib_source_filename = (
    'lib/MiniPerl6/Go/Runtime.go',
);
my ( @switch_e, $source, $source_filename, $backend );
my $tmp_go_filename = 'tmp';
my $execute = 1;
my @args = @ARGV;
while (@args) {
    if ( $args[0] eq '-e' ) {
        my ($switch, $source) = (shift @args, shift @args);
        push @switch_e, $source;
        redo;
    }
    if ( $args[0] eq '-Cgo' ) {
        my $switch = shift @args;
        $backend = 'go';
        $execute = 0;
        redo;
    }
    last;
}
$source_filename = shift @args if @args;

if (@switch_e) {
    $source = join('; ', @switch_e);
}
elsif ($source_filename) {
    open FILE, $source_filename
      or die "Cannot read $source_filename\n";
    local $/ = undef;
    $source = <FILE>;
    close FILE;
}
else {
    local $/ = undef;
    $source = <>;
}

if ( $execute ) {
    my $out = '>' . $tmp_go_filename . '.go';
    open( OUT, $out )
      or die "Cannot write to $out\n";
    select( OUT );
    for my $lib_source_filename ( @lib_source_filename ) {
        say("// include file: $lib_source_filename");
        open FILE, $lib_source_filename
          or die "Cannot read $lib_source_filename\n";
        local $/ = undef;
        print <FILE>;
        close FILE;
        say("// end include file: $lib_source_filename");
    }
}

my $pos = 0;
my @comp_unit;
if ( $source_filename =~ /\.p5ast$/ ) {
    # source code was precompiled to AST, dumped as a perl5 structure
    @comp_unit = @{ eval $source };
}
else {
    while ( $pos < length($source) ) {
        my $p = MiniPerl6::Grammar->comp_unit( $source, $pos );
        push @comp_unit, $$p;
        $pos = $p->to;
    }
}

say("// Do not edit this file - Generated by MiniPerl6");
print CompUnit::emit_go_program( \@comp_unit );

if ( $execute ) {
    close(OUT);
    select(STDOUT);
    unlink $tmp_go_filename . '.6';
    unlink '6.out'; 
    `6g $tmp_go_filename.go`; 
    `6l $tmp_go_filename.6`;
    exec "./6.out"
        or die "can't execute";
}

