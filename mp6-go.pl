package main;

use lib 'lib5';
use strict;

BEGIN {
    $::_V6_COMPILER_NAME    = 'MiniPerl6';
    $::_V6_COMPILER_VERSION = '2.0';
}

use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package Main;
use MiniPerl6::Grammar;
use MiniPerl6::Go::Emitter;
use MiniPerl6::Grammar::Regex;
use MiniPerl6::Emitter::Token;

my $source = join('', <> );
my $pos = 0;

my @comp_unit;

say( "// Do not edit this file - Generated by MiniPerl6" );

while ( $pos < length( $source ) ) {
    #say( "Source code:", $source );
    my $p = MiniPerl6::Grammar->comp_unit($source, $pos);
    #say( Main::perl( $$p ) );
    #say( join( "", (map { $_->emit() } ($$p) )));
    push @comp_unit, $$p;
    #say( $p->to, " -- ", length($source) );
    $pos = $p->to;
}

my %unit_seen;
my @tmp_comp_unit;
for my $comp_unit ( @comp_unit ) {
    my $name = $comp_unit->{name};
    if ( $unit_seen{$name} ) {
        for my $stmt ( @{ $comp_unit->{body} } ) {
            push @{ $unit_seen{$name}{body} }, $stmt;
        }
    }
    else {
        $unit_seen{$name} = $comp_unit;
        push @tmp_comp_unit, $comp_unit;
    }
}
@comp_unit = @tmp_comp_unit;

for my $comp_unit ( @comp_unit ) {
    say( $comp_unit->emit() );
}

say("// interfaces for all methods");
my %meth_seen;
for my $comp_unit ( @comp_unit ) {
    for my $stmt ( @{ $comp_unit->{body} } ) {
        if ( $stmt->isa( 'Method' ) && !$meth_seen{$stmt->{name}} ) {
            my $meth = $stmt->{name};
            say("type " . $meth . "_er interface { f_" . $meth . " (Capture) Any }");
            $meth_seen{$meth} = 1;
        }
    }
}
say();
say("func main () {");
for my $comp_unit ( @comp_unit ) {
    say("  Init_" . Main::to_go_namespace( $comp_unit->{name} ) . "();");
}
for my $comp_unit ( @comp_unit ) {
    say("  Run_" . Main::to_go_namespace( $comp_unit->{name} ) . "();");
}
say("}");

